<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MyBatis - SSM 框架</title>
    <link href="/post/983349234/"/>
    <url>/post/983349234/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="1. 基本概述"></a>1. 基本概述</h1><p><strong>概述</strong></p><p>MyBatis 是一款持久层框架，用于简化 JDBC 开发。</p><p>参考 <a href="/post/2450791866/#1-2-%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE">Maven 依赖配置</a>进行配置。</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-it5a0jlckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-it5a0jlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--MyBatis依赖项--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--JDBC依赖项--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--日志输出的依赖，可选配--&gt;</span><br>    <span class="hljs-comment">&lt;!--添加slf4j日志api--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--添加logback-classic依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--添加logback-core依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p><strong>案例</strong></p><ul><li><p>数据准备</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-cn3e72lckj50kj"></i><span>sql</span><div class="collapse show" id="collapse-cn3e72lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">use test01;<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_user;<br><br><span class="hljs-comment">-- 准备数据</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    password <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    address <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user(username, password, gender, address)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>),<br>       (<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;234&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-string">&#x27;天津&#x27;</span>),<br>       (<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>);<br></code></pre></td></tr></table></div></figure></li><li><p>创建类用于存储数据库的信息</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-23yflclckj50kj"></i><span>java</span><div class="collapse show" id="collapse-23yflclckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>创建数据库映射文件 <code>userMapper.xml</code> 并进行配置，在里面书写需要执行的 SQL 语句</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xuubmnlckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-xuubmnlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--namespace：命名空间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--id：语句的唯一识别id--&gt;</span><br>    <span class="hljs-comment">&lt;!--resultType：返回类型，填入创建的用于存储数据的类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.example.User&quot;</span>&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>创建 MyBatis 配置文件 <code>mybatis-config.xml</code> 并进行配置，加载数据库映射文件处填写上述文件</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-oq3cfulckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-oq3cfulckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--配置数据库链接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///test01?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;*************&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--加载数据库映射文件：相对路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;userMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>在主程序中加载配置文件，并运行</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-0zfyh6lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-0zfyh6lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//加载MyBatis的配置文件，获取SqlSessionFactory</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;                             <span class="hljs-comment">//MyBatis配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-comment">//获取SqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><br>        <span class="hljs-comment">//执行sql</span><br>        List&lt;User&gt; users = sqlSession.selectList(<span class="hljs-string">&quot;test.selectAll&quot;</span>);         <span class="hljs-comment">//映射文件中命名空间.语句识别id</span><br><br>        System.out.println(users);<br><br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h1 id="2-Mapper-代理"><a href="#2-Mapper-代理" class="headerlink" title="2. Mapper 代理"></a>2. Mapper 代理</h1><p>为了解决原生方式中的硬编码，简化后期执行SQL，推荐使用 Mapper 代理的方式，步骤如下：</p><ul><li><p>数据准备</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-0ejgl5lckj50kj"></i><span>sql</span><div class="collapse show" id="collapse-0ejgl5lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">use test01;<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_user;<br><br><span class="hljs-comment">-- 准备数据</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    password <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    address <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user(username, password, gender, address)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>),<br>       (<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;234&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-string">&#x27;天津&#x27;</span>),<br>       (<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>);<br></code></pre></td></tr></table></div></figure></li><li><p>创建类用于存储数据库的信息</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6501vplckj50kj"></i><span>java</span><div class="collapse show" id="collapse-6501vplckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>创建数据库映射文件 <code>userMapper.xml</code> 并进行配置，其中命名空间处填入同名接口 <code>UserMapper.java</code> 的全限定名</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rxxfzdlckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-rxxfzdlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--命名空间：填入同名接口的全限定名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.example.User&quot;</span>&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>创建与数据库映射文件同名的接口 <code>UserMapper.java</code>，在接口中定义方法，方法名即映射文件中的id，并保持参数类型和返回类型与映射文件一致</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jn5j5alckj50kj"></i><span>java</span><div class="collapse show" id="collapse-jn5j5alckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.User;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;          <span class="hljs-comment">//方法名即映射文件中的id，并保持参数类型和返回类型与映射文件一致</span><br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>创建 MyBatis 配置文件 <code>mybatis-config.xml</code> 并进行配置，加载数据库映射文件处填写上述文件</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yzo117lckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-yzo117lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--配置数据库链接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///test01?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;*************&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--加载数据库映射文件：相对路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;userMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>在主程序中加载配置文件，并运行</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vn7oxolckj50kj"></i><span>java</span><div class="collapse show" id="collapse-vn7oxolckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//加载MyBatis的配置文件，获取SqlSessionFactory</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-comment">//获取SqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><br>        <span class="hljs-comment">//获取UserMapper接口的代理对象</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);        <span class="hljs-comment">//填入Mapper接口</span><br>        <br>        <span class="hljs-comment">//使用Mapper代理执行sql语句</span><br>        List&lt;User&gt; users = userMapper.selectAll();<br>        <br>        System.out.println(users);<br><br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h1 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h1><p>MyBatis 配置文件中标签结构如下所示，使用时需要遵守顺序。</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-cqxyawlckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-cqxyawlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!-- 属性：定义配置外在化 --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!-- 设置：定义mybatis的一些全局性设置 --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <br>       <span class="hljs-comment">&lt;!-- 具体的参数名和参数值 --&gt;</span>  <br>       <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!-- 类型名称：为一些类定义别名 --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span> <br>    <br>    <span class="hljs-comment">&lt;!-- 类型处理器：定义Java类型与数据库中的数据类型之间的转换关系 --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeHandlers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandlers</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!-- 对象工厂 --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">objectFactory</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">objectFactory</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!-- 插件：mybatis的插件,插件可以修改mybatis的内部运行规则 --&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>  <br>       <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!-- 环境：配置mybatis的环境，default值代表默认使用的环境变量的id --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>                                          <br>       <span class="hljs-comment">&lt;!-- 环境变量：可以配置多个环境变量，比如使用多数据源时，就需要配置多个环境变量 --&gt;</span>  <br>       <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>  <br>          <span class="hljs-comment">&lt;!-- 事务管理器 --&gt;</span>  <br>          <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>  <br>          <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span>  <br>          <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>  <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!-- 数据库厂商标识 --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">databaseIdProvider</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">databaseIdProvider</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!-- 映射器：指定映射文件或者映射类 --&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span>  <br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <br></code></pre></td></tr></table></div></figure><p>其中定义别名有两种使用方式：</p><ul><li><p>为全路径类名指定别名，若不写别名则默认别名是类名的首字母小写</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-82qohilckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-82qohilckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在MyBatis配置文件中为com.example.User指定别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dxh9tslckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-dxh9tslckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在userMapper.xml中使用别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>          <span class="hljs-comment">&lt;!--使用别名user代替com.example.User--&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>为指定路径包下所有类指定别名，别名即类名的首字母小写</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-v9d5hclckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-v9d5hclckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在MyBatis配置文件中为com.example包下所有类指定默认别名--&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-k938kelckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-k938kelckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在userMapper.xml中使用别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>          <span class="hljs-comment">&lt;!--使用别名user代替com.example.User--&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><h1 id="4-增删改查-配置文件"><a href="#4-增删改查-配置文件" class="headerlink" title="4. 增删改查 (配置文件)"></a>4. 增删改查 (配置文件)</h1><h1 id="5-增删改查-注解"><a href="#5-增删改查-注解" class="headerlink" title="5. 增删改查 (注解)"></a>5. 增删改查 (注解)</h1>]]></content>
    
    
    <categories>
      
      <category>07 SSM 框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SSM 框架</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring (二) - SSM 框架</title>
    <link href="/post/4096320407/"/>
    <url>/post/4096320407/</url>
    
    <content type="html"><![CDATA[<h1 id="1-bean-基本配置-注解"><a href="#1-bean-基本配置-注解" class="headerlink" title="1. bean 基本配置 (注解)"></a>1. bean 基本配置 (注解)</h1><p><strong>语法</strong></p><p>对比不使用注解直接<a href="/post/914190096/#2-bean-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">配置 bean</a>，使用注解可以进一步简化开发。</p><ul><li><p>使用 <font class="code-word"><code>@Component</code></font> 定义 bean：若不配置 bean 名，则默认使用首字母小写的类名做 bean 名</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yuxaaxlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-yuxaaxlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;bean名&quot;)</span>         <br><span class="hljs-keyword">public</span> class 类名 &#123;          <span class="hljs-comment">//类的对象交给IoC容器管理</span><br>&#125;        <br></code></pre></td></tr></table></div></figure><p>配置文件中通过组件扫描加载 bean：需要开启 context 命名空间，详见<a href="/post/914190096/#8-%E5%8A%A0%E8%BD%BD%E5%B1%9E%E6%80%A7%E9%9B%86">加载属性集</a></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xvuw7wlckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-xvuw7wlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;扫描包路径&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p>除了 @Component 以外，Spring 还提供了三个衍生注解，功能与 @Component 一致只是含义不一样：</p><ul><li>@ Controller：用于表现层 bean 定义</li><li>@ Service：用于业务层 bean 定义</li><li>@ Repository：用于数据层 bean 定义</li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-evezpxlckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-evezpxlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.example.dao&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a data-target="1-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="1-2"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8lw4i8lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-8lw4i8lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//获取容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//获取bean</span><br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        bookDao.save();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="1-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-k46oj8lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-k46oj8lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span>                             <span class="hljs-comment">//配置bean名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="2-Spring-配置文件-注解"><a href="#2-Spring-配置文件-注解" class="headerlink" title="2. Spring 配置文件 (注解)"></a>2. Spring 配置文件 (注解)</h1><p><strong>步骤</strong></p><p>对比不使用注解直接在 Spring 配置文件中进行 bean 的配置，可以通过注解使 Java 类替代配置文件，实现纯注解开发。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-8.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 40%;" /><ul><li><p>使用 <font class="code-word"><code>@Configuration</code></font> 注解用于设定当前类为配置类</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zoqc6vlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-zoqc6vlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>       <br><span class="hljs-keyword">public</span> class 配置类 &#123;                  <span class="hljs-comment">//该类用于代替配置文件</span><br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>使用 <font class="code-word"><code>@ComponentScan(&quot;扫描包路径&quot;)</code></font> 注解用于设定扫描bean的路径</p><p>此注解只能添加一次，若想设置多个扫描路径则须使用<font class="word-stress">数组格式 @ComponentScan({“路径1”, “路径2”, …})</font></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dimrjelckj50kj"></i><span>java</span><div class="collapse show" id="collapse-dimrjelckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;扫描包路径&quot;)</span>           <span class="hljs-comment">//设置扫描bean的包路径</span><br><span class="hljs-keyword">public</span> class 配置类 &#123;                 <br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>在主程序中使用 <font class="code-word"><code>AnnotationConfigApplicationContext</code></font> 获取容器，其他步骤不变</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-b63bpplckj50kj"></i><span>java</span><div class="collapse show" id="collapse-b63bpplckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取IoC容器</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(配置类.class);<br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="2"><ul class="nav-tabs"><li class="tab active"><a data-target="2-1"><i class="fa fa-file-text"></i>App.java</a></li><li class="tab"><a data-target="2-2"><i class="fa fa-file-text"></i>SpringConfig.java</a></li><li class="tab"><a data-target="2-3"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="2-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-srvocplckj50kj"></i><span>java</span><div class="collapse show" id="collapse-srvocplckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//加载配置类获取容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><br>        <span class="hljs-comment">//获取bean</span><br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="2-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-309ts7lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-309ts7lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;               <br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="2-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-g87gvwlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-g87gvwlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span>                             <span class="hljs-comment">//配置bean名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="3-bean-作用范围-注解"><a href="#3-bean-作用范围-注解" class="headerlink" title="3. bean 作用范围 (注解)"></a>3. bean 作用范围 (注解)</h1><p><strong>语法</strong></p><p>对比不使用注解直接<a href="/post/914190096/#3-bean-%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4">配置 bean 作用范围</a>，使用注解可以进一步简化开发。</p><ul><li><p>使用注解 <font class="code-word"><code>@Scope</code></font> 配置单例 singleton|多例 prototype，不配置该项则默认为单例</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ny38wglckj50kj"></i><span>java</span><div class="collapse show" id="collapse-ny38wglckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;bean名&quot;)</span>         <br><span class="hljs-keyword">public</span> class 类名 &#123;          <span class="hljs-comment">//类的对象交给IoC容器管理</span><br>&#125;     <br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="3"><ul class="nav-tabs"><li class="tab active"><a data-target="3-1"><i class="fa fa-file-text"></i>App.java</a></li><li class="tab"><a data-target="3-2"><i class="fa fa-file-text-o"></i>SpringConfig.java</a></li><li class="tab"><a data-target="3-3"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="3-4"><i class="fa fa-file-text"></i>UserDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="3-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-emb9vjlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-emb9vjlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> com.example.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><br>        <span class="hljs-comment">//单例</span><br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao2</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        System.out.println(bookDao);          <span class="hljs-comment">//输出：com.example.dao.BookDaoImp@1b68b9a4</span><br>        System.out.println(bookDao2);         <span class="hljs-comment">//输出：com.example.dao.BookDaoImp@1b68b9a4</span><br><br>        <span class="hljs-comment">//多例</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) ctx.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao2</span> <span class="hljs-operator">=</span> (UserDao) ctx.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        System.out.println(userDao);          <span class="hljs-comment">//输出：com.example.dao.UserDaoImp@4f9a3314</span><br>        System.out.println(userDao2);         <span class="hljs-comment">//输出：com.example.dao.UserDaoImp@3b2c72c2</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="3-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nhplhelckj50kj"></i><span>java</span><div class="collapse show" id="collapse-nhplhelckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;               <br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="3-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4el7selckj50kj"></i><span>java</span><div class="collapse show" id="collapse-4el7selckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span>                        <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="3-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-e6nx0wlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-e6nx0wlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Scope;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//UserDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;userDao&quot;)</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span>                 <span class="hljs-comment">//设置成多例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;user dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="4-bean-生命周期-注解"><a href="#4-bean-生命周期-注解" class="headerlink" title="4. bean 生命周期 (注解)"></a>4. bean 生命周期 (注解)</h1><p><strong>语法</strong></p><p>对比不使用注解直接<a href="/post/914190096/#5-bean-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">配置 bean 生命周期方法</a>，使用注解可以进一步简化开发。</p><ul><li><p>使用 <font class="code-word"><code>@PostConstruct</code></font> 和 <font class="code-word"><code>@PreDestroy</code></font> 用于设定当前类的初始化方法和销毁前方法</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gcbc62lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-gcbc62lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> class 类名 &#123;                   <span class="hljs-comment">//类的对象交给IoC容器管理</span><br><br>    <span class="hljs-meta">@PostConstruct</span>      <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> 初始化方法() &#123;&#125;<br><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> 销毁前方法() &#123;&#125;<br>&#125; <br></code></pre></td></tr></table></div></figure></li></ul><p><strong>注意</strong></p><p>若不<a href="#9-3-%E5%85%B3%E9%97%AD%E5%AE%B9%E5%99%A8">关闭容器</a>而是直接结束程序，则程序结束后会直接关闭虚拟器，不再执行关闭容器的操作，也就无法执行 bean 销毁前的方法。</p><p>使用配置类代替配置文件时，在 <font class="code-word"><code>AnnotationConfigApplicationContext</code></font> 中关闭容器的方法与  <font class="code-word"><code>ClassPathXmlApplicationContext</code></font> 中一致。</p><p><strong>案例</strong></p><div class="tag-common tabs" id="4"><ul class="nav-tabs"><li class="tab active"><a data-target="4-1"><i class="fa fa-file-text"></i>App.java</a></li><li class="tab"><a data-target="4-2"><i class="fa fa-file-text-o"></i>SpringConfig.java</a></li><li class="tab"><a data-target="4-3"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="4-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1dkmhclckj50kj"></i><span>java</span><div class="collapse show" id="collapse-1dkmhclckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-comment">//注册关闭钩子</span><br>        ctx.registerShutdownHook();<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        bookDao.save();<br>        <br>        <span class="hljs-comment">//输出：book init ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>        <span class="hljs-comment">//     book destroy ...</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="4-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tf7pf2lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-tf7pf2lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;               <br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="4-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8lmj62lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-8lmj62lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> javax.annotation.PreDestroy;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br><br>    <span class="hljs-comment">//初始化方法</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book init ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//销毁前方法</span><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book destroy ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="5-依赖注入-注解"><a href="#5-依赖注入-注解" class="headerlink" title="5. 依赖注入 (注解)"></a>5. 依赖注入 (注解)</h1><h2 id="5-1-引用类型"><a href="#5-1-引用类型" class="headerlink" title="5.1 引用类型"></a>5.1 引用类型</h2><p>使用注解进行引用类型的依赖注入只提供了<font class="word-stress">自动装配</font>这一种方式，对比不使用注解直接<a href="/post/914190096/#6-3-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D">依赖注入</a>，使用注解可以进一步简化开发。</p><ul><li>引用类型的自动装配基于<font class="word-stress">反射</font>（即公有和私有均能获取）获取属性并初始化，因此无需提供 setter 方法</li><li>自动装配建议使用无参构造器创建对象（默认）</li><li>按类型自动装配，要求该类型只能有这一个 bean</li><li>按名称自动装配，要求该名字只能有这一个 bean</li></ul><h3 id="5-1-1-按类型"><a href="#5-1-1-按类型" class="headerlink" title="5.1.1 按类型"></a>5.1.1 按类型</h3><p><strong>语法</strong></p><ul><li><p>按类型自动装配：使用注解 <font class="code-word"><code>@Autowired</code></font> 在类A中注入类B</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kdstwxlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-kdstwxlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> class 类A &#123;<br>    <br>    <span class="hljs-comment">//设置自动装配</span><br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">private</span> 类B 变量b;                 <span class="hljs-comment">//另一个交给IoC容器的类的实例，需要在bean中注入依赖</span><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6exr2glckj50kj"></i><span>java</span><div class="collapse show" id="collapse-6exr2glckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> class 类B &#123;           <br>&#125;<br></code></pre></td></tr></table></div></figure><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-12.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="5"><ul class="nav-tabs"><li class="tab active"><a data-target="5-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="5-2"><i class="fa fa-file-text-o"></i>SpringConfig.java</a></li><li class="tab"><a data-target="5-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="5-4"><i class="fa fa-file-text"></i>BookServiceImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="5-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-noy571lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-noy571lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.example.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>, BookService.class);<br>        bookService.save();<br>        <br>        <span class="hljs-comment">//输出：book service save ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="5-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-za850wlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-za850wlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;               <br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="5-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h0w2pplckj50kj"></i><span>java</span><div class="collapse show" id="collapse-h0w2pplckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="5-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-y7s980lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-y7s980lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookService实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book service save ...&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h3 id="5-1-2-按名称"><a href="#5-1-2-按名称" class="headerlink" title="5.1.2 按名称"></a>5.1.2 按名称</h3><p><strong>语法</strong></p><ul><li><p>按名称自动装配：使用注解 <font class="code-word"><code>@Autowired</code></font> 和 <font class="code-word"><code>@Qualifier(&quot;自动装配的bean名&quot;)</code></font> 在类A中注入类B</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-b7lopmlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-b7lopmlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> class 类A &#123;<br>    <br>    <span class="hljs-comment">//设置自动装配</span><br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-meta">@Qualifier(&quot;bean名B&quot;)</span><br>    <span class="hljs-keyword">private</span> 类B 变量b;                 <span class="hljs-comment">//另一个交给IoC容器的类的实例，需要在bean中注入依赖</span><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-g1sfqelckj50kj"></i><span>java</span><div class="collapse show" id="collapse-g1sfqelckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-meta">@Component(&quot;bean名B&quot;)</span><br><span class="hljs-keyword">public</span> class 类B &#123;           <br>&#125;<br></code></pre></td></tr></table></div></figure><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-11.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="6"><ul class="nav-tabs"><li class="tab active"><a data-target="6-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="6-2"><i class="fa fa-file-text-o"></i>SpringConfig.java</a></li><li class="tab"><a data-target="6-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="6-4"><i class="fa fa-file-text"></i>BookServiceImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="6-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6pu747lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-6pu747lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.example.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>, BookService.class);<br>        bookService.save();<br>        <br>        <span class="hljs-comment">//输出：book service save ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="6-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bk3yg9lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-bk3yg9lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;               <br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="6-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kau3o3lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-kau3o3lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="6-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-u7voeflckj50kj"></i><span>java</span><div class="collapse show" id="collapse-u7voeflckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookService实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;bookDao&quot;)</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book service save ...&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h2 id="5-2-基本类型"><a href="#5-2-基本类型" class="headerlink" title="5.2 基本类型"></a>5.2 基本类型</h2><p>基本类型的依赖注入基于<font class="word-stress">反射</font>（即公有和私有均能获取）获取属性并初始化，因此无需提供 setter 方法。</p><p><strong>语法</strong></p><ul><li><p>使用注解 <font class="code-word"><code>@Value(&quot;注入的值&quot;)</code></font> 在类中实现基本类型的注入</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-438vi7lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-438vi7lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> class 类名 &#123;<br><br>    <span class="hljs-meta">@Value(&quot;值&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;      <span class="hljs-comment">//基本类型的实例，需要在bean中注入依赖</span><br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="7"><ul class="nav-tabs"><li class="tab active"><a data-target="7-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="7-2"><i class="fa fa-file-text-o"></i>SpringConfig.java</a></li><li class="tab"><a data-target="7-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="7-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hnlmtglckj50kj"></i><span>java</span><div class="collapse show" id="collapse-hnlmtglckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> com.example.dao.BookDaoImp;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>, BookDaoImp.class);<br>        bookDao.save();<br>        <br>        <span class="hljs-comment">//输出：book dao save ...100你好</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="7-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ppb2wzlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-ppb2wzlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;               <br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="7-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ikzo57lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-ikzo57lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br><br>    <span class="hljs-comment">//基本类型依赖注入</span><br>    <span class="hljs-meta">@Value(&quot;100&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-meta">@Value(&quot;你好&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span> + number + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="6-管理第三方-bean-注解"><a href="#6-管理第三方-bean-注解" class="headerlink" title="6. 管理第三方 bean (注解)"></a>6. 管理第三方 bean (注解)</h1><p>以<a href="/post/4002719321/#7-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0">配置 Druid</a> 为例，区别于<a href="/post/914190096/#7-%E7%AE%A1%E7%90%86%E7%AC%AC%E4%B8%89%E6%96%B9-bean">正常管理第三方 bean</a>，使用注解可以一定程度上简化配置。</p><h2 id="6-1-bean-管理"><a href="#6-1-bean-管理" class="headerlink" title="6.1 bean 管理"></a>6.1 bean 管理</h2><p><strong>语法</strong></p><p>使用第三方 jar 包时，由于包中的类都是已经写好的，因而无法将所需的类配置成 bean，则需要自己额外定义一个方法去获取所需类的 bean。</p><p>使用注解 <font class="code-word"><code>@Bean</code></font> 定义 bean：若不配置 bean 名，则默认使用方法做 bean 名。共有以下两种方式管理第三方 bean：</p><ul><li><p>直接在配置类中定义 bean</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rqidy0lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-rqidy0lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>    <span class="hljs-comment">//在配置类中定义bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        <span class="hljs-comment">//相关配置...</span><br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>在独立的类中定义 bean，并将使用注解 <font class="code-word"><code>@Import(类.class)</code></font> 将其导入到核心配置类中</p><p>此注解只能添加一次，若想设置多个文件则须使用<font class="word-stress">数组格式 @Import({类1.class, 类2.class, …})</font></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fgsoiqlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-fgsoiqlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(独立类.class)</span>              <span class="hljs-comment">//导入独立类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-aff7xylckj50kj"></i><span>java</span><div class="collapse show" id="collapse-aff7xylckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 独立类 &#123;<br>    <br>    <span class="hljs-comment">//定义方法获得要管理的对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        <span class="hljs-comment">//相关配置...</span><br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><p><strong>步骤</strong></p><p>在 Spring 中配置 Druid 连接的步骤如下：</p><ul><li>在 <a href="/post/2450791866/#1-2-%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE">Maven 配置文件</a>中配置相关依赖：mysql、druid</li><li>定义获取 bean 的方法并配置相关属性，具体属性详见 <a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8">Druid 配置属性列表</a></li><li>获取数据库连接池对象 <font class="code-word"><code>DataSource</code></font></li><li>获取连接  <font class="code-word"><code>Connection</code></font></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="9"><ul class="nav-tabs"><li class="tab active"><a data-target="9-1"><i class="fa fa-file-text-o"></i>pom.xml</a></li><li class="tab"><a data-target="9-2"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="9-3"><i class="fa fa-file-text"></i>SpringConfig.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="9-1"><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-713zlhlckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-713zlhlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Maven配置文件：依赖配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="9-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2p8pf8lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-2p8pf8lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-comment">//获取IoC容器</span><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><br>        <span class="hljs-comment">//获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>, DataSource.class);<br><br>        <span class="hljs-comment">//获取数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br><br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="9-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4o383rlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-4o383rlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>    <span class="hljs-comment">//定义方法获得要管理的对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        ds.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        ds.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>);<br>        ds.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        ds.setPassword(<span class="hljs-string">&quot;***********&quot;</span>);<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h2 id="6-2-bean-注入"><a href="#6-2-bean-注入" class="headerlink" title="6.2 bean 注入"></a>6.2 bean 注入</h2><p>使用第三方 jar 包时，由于包中的类都是已经写好的，因而无法在所需类中直接进行依赖配置，而需要自己额外定义一个方法去获取所需类的 bean，并在该 bean 中进行依赖配置。</p><h3 id="6-2-1-引用类型"><a href="#6-2-1-引用类型" class="headerlink" title="6.2.1 引用类型"></a>6.2.1 引用类型</h3><p><strong>语法</strong></p><ul><li><p>将使用按类型自动装配：bean 定义方法的形参类型 &#x3D; 需要依赖注入的类型</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-unsjfclckj50kj"></i><span>java</span><div class="collapse show" id="collapse-unsjfclckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 类A &#123;<br>    <br>    <span class="hljs-keyword">private</span> 类B 变量b;                        <span class="hljs-comment">//另一个交给IoC容器的类的实例，需要在bean中注入依赖</span><br>    <br>    <span class="hljs-comment">//定义方法获得要管理的对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> 方法类型 方法名(类B 参数名) &#123;         <br>        System.out.println(参数名);           <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4r80g9lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-4r80g9lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> class 类B &#123;           <br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="11"><ul class="nav-tabs"><li class="tab active"><a data-target="11-1"><i class="fa fa-file-text-o"></i>pom.xml</a></li><li class="tab"><a data-target="11-2"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="11-3"><i class="fa fa-file-text-o"></i>SpringConfig.java</a></li><li class="tab"><a data-target="11-4"><i class="fa fa-file-text"></i>jdbcConfig.java</a></li><li class="tab"><a data-target="11-5"><i class="fa fa-file-text-o"></i>BookDao.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="11-1"><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-292dvplckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-292dvplckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Maven配置文件：依赖配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="11-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z0zjs0lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-z0zjs0lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-comment">//获取IoC容器</span><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-comment">//获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>, DataSource.class);<br>        <span class="hljs-comment">//获取数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br><br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="11-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-j1tg5zlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-j1tg5zlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example&quot;)</span><br><span class="hljs-meta">@Import(jdbcConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="11-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-iso1aulckj50kj"></i><span>java</span><div class="collapse show" id="collapse-iso1aulckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">//待引入配置的独立类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcConfig</span> &#123;<br><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <br>    <span class="hljs-comment">//定义方法获得要管理的对象</span><br>    <span class="hljs-meta">@Bean</span> <br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">(BookDao bookDao)</span> &#123;                 <span class="hljs-comment">//引用类型依赖注入</span><br>        System.out.println(bookDao);<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        ds.setDriverClassName(<span class="hljs-string">&quot;...&quot;</span>);<br>        ds.setUrl(<span class="hljs-string">&quot;...&quot;</span>);<br>        ds.setUsername(<span class="hljs-string">&quot;...&quot;</span>);<br>        ds.setPassword(<span class="hljs-string">&quot;...&quot;</span>);<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="11-5"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7ota2elckj50kj"></i><span>java</span><div class="collapse show" id="collapse-7ota2elckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//UserDao实现类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h3 id="6-2-2-基本类型"><a href="#6-2-2-基本类型" class="headerlink" title="6.2.2 基本类型"></a>6.2.2 基本类型</h3><p><strong>语法</strong></p><ul><li><p>直接在 bean 中<a href="#5-2-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">使用注解进行基本类型的依赖注入</a>即可。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lbjqdilckj50kj"></i><span>java</span><div class="collapse show" id="collapse-lbjqdilckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 类 &#123;<br><br>    <span class="hljs-meta">@Value(&quot;值&quot;)</span>                       <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;                    <span class="hljs-comment">//基本类型的实例，需要在bean中注入依赖</span><br>    <br>    <span class="hljs-comment">//在类中定义bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> 方法类型 方法名() &#123;<br>        System.out.println(number);        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="10"><ul class="nav-tabs"><li class="tab active"><a data-target="10-1"><i class="fa fa-file-text-o"></i>pom.xml</a></li><li class="tab"><a data-target="10-2"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="10-3"><i class="fa fa-file-text-o"></i>SpringConfig.java</a></li><li class="tab"><a data-target="10-4"><i class="fa fa-file-text"></i>jdbcConfig.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="10-1"><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-i13g7jlckj50kj"></i><span>xml</span><div class="collapse show" id="collapse-i13g7jlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Maven配置文件：依赖配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="10-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ryuet1lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-ryuet1lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-comment">//获取IoC容器</span><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-comment">//获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>, DataSource.class);<br>        <span class="hljs-comment">//获取数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        <br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="10-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-u434jxlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-u434jxlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(jdbcConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="10-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jyzhhhlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-jyzhhhlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">//待引入配置的独立类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcConfig</span> &#123;<br><br>    <span class="hljs-comment">//基本类型依赖注入</span><br>    <span class="hljs-meta">@Value(&quot;com.mysql.cj.jdbc.Driver&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;jdbc:mysql://localhost:3306/test01&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;root&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;**********&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">//定义bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        ds.setDriverClassName(driverClassName);<br>        ds.setUrl(url);<br>        ds.setUsername(username);<br>        ds.setPassword(password);<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="7-加载属性集-注解"><a href="#7-加载属性集-注解" class="headerlink" title="7. 加载属性集 (注解)"></a>7. 加载属性集 (注解)</h1><p>对于直接写在属性集 <font class="code-word"><code>Properties</code></font> 文件中的属性，需要先加载文件然后再使用里面的值，对比不使用注解直接<a href="/post/914190096/#8-%E5%8A%A0%E8%BD%BD%E5%B1%9E%E6%80%A7%E9%9B%86">加载属性集</a>，使用注解可以进一步简化开发。</p><p><strong>步骤</strong></p><ul><li><p>使用 <font class="code-word"><code>@PropertySource(classpath:文件.properties)</code></font> 注解设定 properties 文件路径。</p><p>此注解只能添加一次，若想设置多个文件则须使用<font class="word-stress">数组格式 @PropertySource({“文件1”, “文件2”, …})</font></p><p>使用注解开发时，文件路径不允许使用 <font class="code-word"><code>*</code></font> 占位符</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-c0x5tnlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-c0x5tnlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:文件.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;                  <span class="hljs-comment">//该类用于代替配置文件</span><br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>使用读取加载的属性值：<font class="code-word"><code>$&#123;key值&#125;</code></font>，则会在此处会直接引入 value 值</p></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="8"><ul class="nav-tabs"><li class="tab active"><a data-target="8-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="8-2"><i class="fa fa-file-text"></i>SpringConfig.java</a></li><li class="tab"><a data-target="8-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="8-4"><i class="fa fa-file-text"></i>example.properties</a></li></ul><div class="tab-content"><div class="tab-pane active" id="8-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gj29r8lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-gj29r8lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> com.example.dao.BookDaoImp;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>, BookDaoImp.class);<br>        bookDao.save();<br>        <br>        <span class="hljs-comment">//输出：book dao save ...20JOJO</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="8-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zz3qv5lckj50kj"></i><span>java</span><div class="collapse show" id="collapse-zz3qv5lckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:example.properties&quot;)</span>    <span class="hljs-comment">//加载properties文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;              <br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="8-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uohdbdlckj50kj"></i><span>java</span><div class="collapse show" id="collapse-uohdbdlckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;example.number&#125;&quot;)</span>               <span class="hljs-comment">//使用属性集的值进行注入</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-meta">@Value(&quot;$&#123;example.name&#125;&quot;)</span>                 <span class="hljs-comment">//使用属性集的值进行注入</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span> + number + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="8-4"><figure class="highlight properties"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h1aljilckj50kj"></i><span>properties</span><div class="collapse show" id="collapse-h1aljilckj50kj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 属性集文件</span><br><span class="hljs-attr">example.number</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">example.name</span>=<span class="hljs-string">JOJO</span><br></code></pre></td></tr></table></div></figure></div></div></div>]]></content>
    
    
    <categories>
      
      <category>07 SSM 框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SSM 框架</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring (一) - SSM 框架</title>
    <link href="/post/914190096/"/>
    <url>/post/914190096/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="1. 基本概述"></a>1. 基本概述</h1><p><strong>概述</strong></p><p>Spring Framework 的系统架构如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-3.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 40%;" /><p>IoC (Inversion of Control) <font class="word-stress">控制反转</font>：</p><ul><li>使用对象时，由主动 new 产生对象转换为<font class="word-stress">由外部提供对象</font>，此过程中对象创建控制权转移到外部，即控制反转。</li><li>Spring 提供了一个 IoC 容器，用来充当 IoC 思想中的”外部“。</li><li>IoC 容器负责对象的创建、初始化等一系列工作，被创建或背管理的对象在 IoC 容器中统称为 Bean。</li></ul><p>DI (Dependency Injection) <font class="word-stress">依赖注入</font>：</p><ul><li>在容器中建立 bean 与 bean 之间的依赖关系的整个过程，称为依赖注入</li></ul><p><strong>配置</strong></p><p>参考 <a href="/post/2450791866/#1-2-%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE">Maven 依赖配置</a>进行配置。</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-09vgnolckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-09vgnolckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>然后创建 Spring 配置文件，即可进行相关的配置。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-4.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 60%;" /><p><strong>案例</strong></p><p>其中 Spring 的配置文件如下所示。</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-x583oflckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-x583oflckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置bean --&gt;</span><br>    <span class="hljs-comment">&lt;!-- id：容器中的bean名称 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- class：容器中的bean类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span>                  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookServiceBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.BookServiceImp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置依赖 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- name：表示配置哪一个具体的属性--&gt;</span><br>        <span class="hljs-comment">&lt;!-- ref：表示参照哪一个bean--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>使用 Spring 框架构建的项目演示如下。</p><div class="tag-common tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a data-target="1-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="1-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="1-3"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="1-4"><i class="fa fa-file-text-o"></i>BookService.java</a></li><li class="tab"><a data-target="1-5"><i class="fa fa-file-text-o"></i>BookServiceImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fvce2jlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-fvce2jlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> com.example.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//获取IoC容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>        <span class="hljs-comment">//获取bean</span><br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br>        bookDao.save();<br><br>        <span class="hljs-comment">//获取bean</span><br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookServiceBean&quot;</span>);<br>        bookService.save();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="1-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-n3ve7xlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-n3ve7xlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="1-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-k4vq1ulckj50ki"></i><span>java</span><div class="collapse show" id="collapse-k4vq1ulckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="1-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-quvxuclckj50ki"></i><span>java</span><div class="collapse show" id="collapse-quvxuclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookService接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="1-5"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-eycadolckj50ki"></i><span>java</span><div class="collapse show" id="collapse-eycadolckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><br><span class="hljs-comment">//BookService实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book service save ...&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>    <span class="hljs-comment">//提供对应的set方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDao</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><p>其中在 Spring 配置文件中的对应关系如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-5.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><h1 id="2-bean-基本配置"><a href="#2-bean-基本配置" class="headerlink" title="2. bean 基本配置"></a>2. bean 基本配置</h1><p><strong>语法</strong></p><ul><li><p>配置 bean</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-70j4ielckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-70j4ielckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;别名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p>bean 的基本属性如下：</p><ul><li>id（名称）：bean 的 id，使用容器可以通过 id 值获取对应的 bean，在一个容器中 id 值唯一</li><li>class（类型）：bean 的类型，即配置的 bean 的全路径类名</li><li>name（别名）：bean 的别名，定义多个时可以用逗号 ( ,) 分号 ( ;) 空格 (  ) 分隔</li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-59r5gulckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-59r5gulckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span>       <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookServiceBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.BookServiceImp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dao&quot;</span>/&gt;</span>       <span class="hljs-comment">&lt;!-- 使用别名 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h1 id="3-bean-作用范围"><a href="#3-bean-作用范围" class="headerlink" title="3. bean 作用范围"></a>3. bean 作用范围</h1><p><strong>语法</strong></p><p>bean 的作用范围分为两种：单例即重复造出的为同一对象，多例即重复造出的为不同对象，不写默认单例。</p><ul><li><p>通过 bean 的 <font class="code-word"><code>scope</code></font> 属性配置作用范围：singleton (单例)|prototype (多例)</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-eio136lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-eio136lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;别名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton|prototype&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5nwj4ulckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-5nwj4ulckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span>                         <span class="hljs-comment">&lt;!-- 单例 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.UserDaoImp&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span>       <span class="hljs-comment">&lt;!-- 多例 --&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="14"><ul class="nav-tabs"><li class="tab active"><a data-target="14-1"><i class="fa fa-file-text"></i>App.java</a></li><li class="tab"><a data-target="14-2"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="14-3"><i class="fa fa-file-text-o"></i>UserDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="14-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-phwd44lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-phwd44lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> com.example.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>        <span class="hljs-comment">//单例</span><br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao2</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        System.out.println(bookDao);          <span class="hljs-comment">//输出：com.example.dao.BookDaoImp@343f4d3d</span><br>        System.out.println(bookDao2);         <span class="hljs-comment">//输出：com.example.dao.BookDaoImp@343f4d3d</span><br><br>        <span class="hljs-comment">//多例</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) ctx.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao2</span> <span class="hljs-operator">=</span> (UserDao) ctx.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        System.out.println(userDao);          <span class="hljs-comment">//输出：com.example.dao.UserDaoImp@53b32d7</span><br>        System.out.println(userDao2);         <span class="hljs-comment">//输出：com.example.dao.UserDaoImp@5442a311</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="14-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-smlpbulckj50ki"></i><span>java</span><div class="collapse show" id="collapse-smlpbulckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="14-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-d58ye0lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-d58ye0lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao实现类，接口略过不展示</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;user dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="4-bean-实例化"><a href="#4-bean-实例化" class="headerlink" title="4. bean 实例化"></a>4. bean 实例化</h1><p>bean 可以通过配置来指定不同的方式进行实例化，在不进行任何配置的情况下默认是用构造器实例化。</p><h2 id="4-1-构造器"><a href="#4-1-构造器" class="headerlink" title="4.1 构造器"></a>4.1 构造器</h2><p><strong>语法</strong></p><p>当使用构造器实例化 bean 时，实际是利用<font class="word-stress">反射</font>（即公有和私有均能获取）获取类的<font class="word-stress">无参构造方法</font>，无参构造方法不存在时将报错。</p><ul><li><p>使用构造器实例化</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vn0l0vlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-vn0l0vlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span>/&gt;</span>    <br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-k7af4zlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-k7af4zlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span>                  <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="2"><ul class="nav-tabs"><li class="tab active"><a data-target="2-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="2-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="2-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="2-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-g8igmclckj50ki"></i><span>java</span><div class="collapse show" id="collapse-g8igmclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//获取IoC容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>        <span class="hljs-comment">//获取bean</span><br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br>        bookDao.save();<br>        <br>        <span class="hljs-comment">//输出：book dao constructor is running ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="2-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tbfadnlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-tbfadnlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="2-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hwc4f0lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-hwc4f0lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br><br>    <span class="hljs-comment">//无参构造器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">BookDaoImp</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao constructor is running ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h2 id="4-2-静态工场"><a href="#4-2-静态工场" class="headerlink" title="4.2 静态工场"></a>4.2 静态工场</h2><p><strong>语法</strong></p><ul><li><p>使用静态工厂实例化</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jkn786lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-jkn786lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;工厂类&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;工厂类中的实例化方法&quot;</span>/&gt;</span> <br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-92hls1lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-92hls1lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.factory.OrderDaoFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getOrderDao&quot;</span>/&gt;</span>            <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="3"><ul class="nav-tabs"><li class="tab active"><a data-target="3-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="3-2"><i class="fa fa-file-text-o"></i>OrderDao.java</a></li><li class="tab"><a data-target="3-3"><i class="fa fa-file-text-o"></i>OrderDaoImp.java</a></li><li class="tab"><a data-target="3-4"><i class="fa fa-file-text"></i>OrderDaoFactory.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="3-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-v747wrlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-v747wrlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.OrderDao;<br><span class="hljs-keyword">import</span> com.example.factory.OrderDaoFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//直接使用工厂方法获取对象</span><br>        <span class="hljs-type">OrderDao</span> <span class="hljs-variable">orderDao</span> <span class="hljs-operator">=</span> OrderDaoFactory.getOrderDao();<br>        orderDao.save();<br><br>        <span class="hljs-comment">//使用IoC容器获取bean</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <br>        <span class="hljs-type">OrderDao</span> <span class="hljs-variable">orderDao1</span> <span class="hljs-operator">=</span> (OrderDao) ctx.getBean(<span class="hljs-string">&quot;orderDaoBean&quot;</span>);<br>        orderDao1.save();<br>        <br>        <span class="hljs-comment">//输出：order dao factory running ...</span><br>        <span class="hljs-comment">//     order dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="3-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pzz465lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-pzz465lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//OrderDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="3-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-68z7pplckj50ki"></i><span>java</span><div class="collapse show" id="collapse-68z7pplckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//OrderDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;order dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="3-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-juh4e0lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-juh4e0lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.OrderDao;<br><span class="hljs-keyword">import</span> com.example.dao.OrderDaoImp;<br><br><span class="hljs-comment">//OrderDaoImp静态工厂</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderDaoFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OrderDao <span class="hljs-title function_">getOrderDao</span> <span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;order dao factory running ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderDaoImp</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h2 id="4-3-实例工厂"><a href="#4-3-实例工厂" class="headerlink" title="4.3 实例工厂"></a>4.3 实例工厂</h2><p><strong>语法</strong></p><p>使用实例工厂实例化，即创建好实例工厂类后，在 Spring 配置文件中需要先配置工厂的 bean，然后再配置所需 bean。</p><ul><li><p>使用实例工厂实例化</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-047bvclckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-047bvclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;工厂bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;工厂类&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;工厂bean名&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;工厂类中的实例化方法&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vtntj7lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-vtntj7lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.factory.UserDaoFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoBean&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;userDaoFactoryBean&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>/&gt;</span>      <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="4"><ul class="nav-tabs"><li class="tab active"><a data-target="4-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="4-2"><i class="fa fa-file-text-o"></i>UserDao.java</a></li><li class="tab"><a data-target="4-3"><i class="fa fa-file-text-o"></i>UserDaoImp.java</a></li><li class="tab"><a data-target="4-4"><i class="fa fa-file-text"></i>OrderDaoFactory.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="4-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-svvpgllckj50ki"></i><span>java</span><div class="collapse show" id="collapse-svvpgllckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.UserDao;<br><span class="hljs-keyword">import</span> com.example.factory.UserDaoFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建实例工厂对象</span><br>        <span class="hljs-type">UserDaoFactory</span> <span class="hljs-variable">userDaoFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoFactory</span>();<br>        <span class="hljs-comment">//通过实例工厂对象创建对象</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> userDaoFactory.getUserDao();<br>        userDao.save();<br><br>        <span class="hljs-comment">//使用IoC容器获取bean</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao1</span> <span class="hljs-operator">=</span> (UserDao) ctx.getBean(<span class="hljs-string">&quot;userDaoBean&quot;</span>);<br>        userDao1.save();<br>        <br>        <span class="hljs-comment">//输出：user dao factory running ...</span><br>        <span class="hljs-comment">//     user dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="4-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-06a1tblckj50ki"></i><span>java</span><div class="collapse show" id="collapse-06a1tblckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="4-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hjcx0hlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-hjcx0hlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;user dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="4-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nbaqe7lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-nbaqe7lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.UserDao;<br><span class="hljs-keyword">import</span> com.example.dao.UserDaoImp;<br><br><span class="hljs-comment">//UserDaoImp实例工厂</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getUserDao</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;user dao factory running ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImp</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h2 id="4-4-工场接口"><a href="#4-4-工场接口" class="headerlink" title="4.4 工场接口"></a>4.4 工场接口</h2><p><strong>语法</strong></p><p>创建的工厂类需要继承 <font class="code-word"><code>FactoryBean</code></font> 接口并重写指定方法，在 Spring 配置文件中只用配置工厂类。</p><ul><li><p>使用 FactoryBean 的实现类实例化</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6z735vlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-6z735vlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//IoC容器将管理工厂造出的对象</span><br><span class="hljs-keyword">public</span> class 实例工厂名 <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;造的对象的类型&gt; &#123;<br><br>    <span class="hljs-comment">//代替原始实例工厂中创建对象的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> 造的对象的类型 getObject() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> 造的对象的构造方法();<br>    &#125;<br><br>    <span class="hljs-comment">//返回造的对象的类型</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> 造的对象的类型.class;<br>    &#125;<br>    <br>    <span class="hljs-comment">//非必须重写方法，指定单例|多例</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>|<span class="hljs-literal">false</span>;                   <span class="hljs-comment">//true(默认)：单例     false：多例</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 bean 中进行配置只需配置继承了 FactoryBean 的工厂类</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ggh5m6lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-ggh5m6lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;继承了指定接口的工厂类名&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gjzxfblckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-gjzxfblckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.factory.UserDaoFactoryBean&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="5"><ul class="nav-tabs"><li class="tab active"><a data-target="5-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="5-2"><i class="fa fa-file-text-o"></i>UserDao.java</a></li><li class="tab"><a data-target="5-3"><i class="fa fa-file-text-o"></i>UserDaoImp.java</a></li><li class="tab"><a data-target="5-4"><i class="fa fa-file-text"></i>OrderDaoFactoryBean.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="5-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bz08ojlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-bz08ojlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.UserDao;<br><span class="hljs-keyword">import</span> com.example.factory.UserDaoFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//使用IoC容器获取bean</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) ctx.getBean(<span class="hljs-string">&quot;userDaoBean&quot;</span>);<br>        userDao.save();<br>        <br>        <span class="hljs-comment">//输出：user dao factory running ...</span><br>        <span class="hljs-comment">//     user dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="5-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-e7c0oolckj50ki"></i><span>java</span><div class="collapse show" id="collapse-e7c0oolckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="5-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-swd1q4lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-swd1q4lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;user dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="5-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-o2rxe6lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-o2rxe6lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.UserDao;<br><span class="hljs-keyword">import</span> com.example.dao.UserDaoImp;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;UserDao&gt; &#123;<br><br>    <span class="hljs-comment">//代替原始实例工厂中创建对象的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;user dao factory running ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImp</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//返回造的对象的类型</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> UserDao.class;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="5-bean-生命周期"><a href="#5-bean-生命周期" class="headerlink" title="5. bean 生命周期"></a>5. bean 生命周期</h1><p>bean 可以通过配置来指定生命周期的控制方法。</p><h2 id="5-1-生命周期"><a href="#5-1-生命周期" class="headerlink" title="5.1 生命周期"></a>5.1 生命周期</h2><p><strong>概述</strong></p><ul><li>初始化容器：创建对象（内存分配） -&gt; 执行构造方法 -&gt; 执行属性注入 -&gt; 执行 bean 初始化方法</li><li>使用 bean：执行业务操作</li><li>关闭容器：执行 bean 销毁前的方法</li></ul><p><strong>注意</strong></p><p>若不<a href="#9-3-%E5%85%B3%E9%97%AD%E5%AE%B9%E5%99%A8">关闭容器</a>而是直接结束程序，则程序结束后会直接关闭虚拟器，不再执行关闭容器的操作，也就无法执行 bean 销毁前的方法。</p><h2 id="5-2-自定控制方法"><a href="#5-2-自定控制方法" class="headerlink" title="5.2 自定控制方法"></a>5.2 自定控制方法</h2><p><strong>语法</strong></p><p>可以在实现类中自己创建生命周期的控制方法，并在 bean 中进行配置。</p><ul><li><p>指定生命周期控制方法</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-f4p77plckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-f4p77plckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;bean类中初始化对应的方法&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;bean类中销毁前对应的方法&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-adbpenlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-adbpenlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="6"><ul class="nav-tabs"><li class="tab active"><a data-target="6-1"><i class="fa fa-file-text"></i>App.java</a></li><li class="tab"><a data-target="6-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="6-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="6-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qxf85mlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-qxf85mlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//方式一</span><br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br>        bookDao.save();<br>        ctx.close();<br>        <br>        <span class="hljs-comment">//方式二</span><br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        ctx1.registerShutdownHook();<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao1</span> <span class="hljs-operator">=</span> (BookDao) ctx1.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br>        bookDao1.save();<br>        <br>        <span class="hljs-comment">//输出：init ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>        <span class="hljs-comment">//     destroy ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="6-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dafta2lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-dafta2lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="6-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vw9fullckj50ki"></i><span>java</span><div class="collapse show" id="collapse-vw9fullckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//表示bean初始化对应的操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;init ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//表示bean销毁前对应的操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h2 id="5-3-生命周期接口"><a href="#5-3-生命周期接口" class="headerlink" title="5.3 生命周期接口"></a>5.3 生命周期接口</h2><p><strong>语法</strong></p><p>可以在让实现类继承 <font class="code-word"><code>InitializingBean</code></font> 和 <font class="code-word"><code>DisposableBean</code></font> 接口，并重写其中的初始化以及销毁前的方法，在 bean 中则无需再配置。</p><ul><li><p>继承接口，重写生命周期控制方法</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wksms3lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-wksms3lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-keyword">public</span> class 类名 <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>, DisposableBean &#123;<br><br>    <span class="hljs-comment">//重写接口DisposableBean的销毁前的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//重写接口InitializingBean的初始化的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 bean 进行配置时只需要进行常规配置</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wvffmwlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-wvffmwlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;继承了指定接口的实现类&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3ajmi0lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-3ajmi0lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="7"><ul class="nav-tabs"><li class="tab active"><a data-target="7-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="7-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="7-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="7-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hk68yulckj50ki"></i><span>java</span><div class="collapse show" id="collapse-hk68yulckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//注册关闭钩子</span><br>        ctx.registerShutdownHook();<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao1</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br>        bookDao.save();<br>        <br>        <span class="hljs-comment">//输出：init ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>        <span class="hljs-comment">//     destroy ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="7-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-mbf0rolckj50ki"></i><span>java</span><div class="collapse show" id="collapse-mbf0rolckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="7-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bxk9g3lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-bxk9g3lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.DisposableBean;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.InitializingBean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>, InitializingBean, DisposableBean &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//重写接口DisposableBean的销毁前的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//重写接口InitializingBean的初始化的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;init ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="6-依赖注入"><a href="#6-依赖注入" class="headerlink" title="6. 依赖注入"></a>6. 依赖注入</h1><p>bean 可以通过配置来指定不同的方式进行依赖注入。</p><p>依赖注入方式的选择：</p><ul><li>强制依赖建议使用构造器进行，使用 setter 注入有概率不进行注入导致null对象出现</li><li>可选依赖建议使用 setter 注入</li><li>自己开发的模块推荐使用 setter 注入</li></ul><h2 id="6-1-Setter-注入"><a href="#6-1-Setter-注入" class="headerlink" title="6.1 Setter 注入"></a>6.1 Setter 注入</h2><h3 id="6-1-1-引用类型"><a href="#6-1-1-引用类型" class="headerlink" title="6.1.1 引用类型"></a>6.1.1 引用类型</h3><p><strong>语法</strong></p><ul><li><p>在类中定义引用类型属性并提供可访问的 <font class="code-word"><code>set</code></font> 方法，其中 set 后面的名字 (函数为小驼峰命名) 将配置给 property 的 <font class="code-word"><code>name</code></font> 属性</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gnts4qlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-gnts4qlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-keyword">public</span> class 类A&#123;<br><br>    <span class="hljs-keyword">private</span> 类B 变量b;     <span class="hljs-comment">//另一个交给IoC容器的类的实例，需要在bean中注入依赖</span><br><br>    <span class="hljs-comment">//提供set函数（采用小驼峰命名）设置成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> set名称(类B 参数) &#123;<br>        <span class="hljs-built_in">this</span>.变量b = 参数;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 bean 中使用 <font class="code-word"><code>property</code></font> 标签的 <font class="code-word"><code>ref</code></font> 属性注入引用类型对象</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ru7ry5lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-ru7ry5lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名B&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类B&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名A&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类A&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;类A中set后的名称&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bean名B&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">...</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6qguy0lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-6qguy0lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookServiceBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.BookServiceImp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDaoInService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="8"><ul class="nav-tabs"><li class="tab active"><a data-target="8-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="8-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="8-3"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="8-4"><i class="fa fa-file-text-o"></i>BookService.java</a></li><li class="tab"><a data-target="8-5"><i class="fa fa-file-text"></i>BookServiceImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="8-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6cfi24lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-6cfi24lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookServiceBean&quot;</span>);<br>        bookService.save();<br>        <br>        <span class="hljs-comment">//输出：book service save ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="8-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xp9aftlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-xp9aftlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="8-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kpsa77lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-kpsa77lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="8-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wioxr8lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-wioxr8lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookService接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="8-5"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-mtiv0flckj50ki"></i><span>java</span><div class="collapse show" id="collapse-mtiv0flckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><br><span class="hljs-comment">//BookService实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <br>    <span class="hljs-comment">//提供对应的set方法设置bookDao</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDaoInService</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book service save ...&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h3 id="6-1-2-基本类型"><a href="#6-1-2-基本类型" class="headerlink" title="6.1.2 基本类型"></a>6.1.2 基本类型</h3><p><strong>语法</strong></p><ul><li><p>在类中定义基本类型属性并提供可访问的 <font class="code-word"><code>set</code></font> 方法，其中 set 后面的名字（函数为小驼峰命名）将配置给 property 的 <font class="code-word"><code>name</code></font> 属性</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hyg7kwlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-hyg7kwlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-keyword">public</span> class 类名 &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;      <span class="hljs-comment">//基本类型的实例，需要在bean中注入依赖</span><br><br>    <span class="hljs-comment">//提供set函数（采用小驼峰命名）设置成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 bean 中使用 <font class="code-word"><code>property</code></font> 标签的 <font class="code-word"><code>value</code></font> 属性注入简单类型数据</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xujit9lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-xujit9lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set后的名称&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;属性值&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">...</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-joji4nlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-joji4nlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;numberInDao&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nameInDao&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;加油&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="9"><ul class="nav-tabs"><li class="tab active"><a data-target="9-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="9-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="9-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="9-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-me57v8lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-me57v8lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br>        bookDao.save();<br>        <br>        <span class="hljs-comment">//输出：book dao save ...1加油</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="9-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kupqublckj50ki"></i><span>java</span><div class="collapse show" id="collapse-kupqublckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="9-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4dy5w7lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-4dy5w7lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//提供成员变量的set函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumberInDao</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br><span class="hljs-comment">//提供成员变量的set函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNameInDao</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span> + number + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h3 id="6-1-3-集合注入"><a href="#6-1-3-集合注入" class="headerlink" title="6.1.3 集合注入"></a>6.1.3 集合注入</h3><p>语法</p><ul><li><p>在类中定义集合类型属性并提供可访问的 <font class="code-word"><code>set</code></font> 方法，其中 set 后面的名字 (函数为小驼峰命名) 将配置给 property 的 <font class="code-word"><code>name</code></font> 属性</p><p>在 bean 中使用 <font class="code-word"><code>property</code></font> 标签下的集合标签注入对象：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=15%>标签</th>            <th style="text-align: center;" width=15%>说明</th>            <th style="text-align: center;" width=35%>注入基本类型</th>            <th style="text-align: center;" width=35%>注入引用类型</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">&lt;array&gt;</td>             <td style="text-align: center;">数组</td>             <td style="text-align: center;">&lt;value&gt;值&lt;/value&gt;</td>             <td style="text-align: center;">&lt;refer bean="注入的bean的id"/&gt;</td>         </tr>        <tr>            <td style="text-align: center;">&lt;list&gt;</td>             <td style="text-align: center;">list 集合</td>             <td style="text-align: center;">&lt;value&gt;值&lt;/value&gt;</td>             <td style="text-align: center;">&lt;refer bean="注入的bean的id"/&gt;</td>         </tr>        <tr>            <td style="text-align: center;">&lt;set&gt;</td>             <td style="text-align: center;">set 集合</td>             <td style="text-align: center;">&lt;value&gt;值&lt;/value&gt;</td>             <td style="text-align: center;">&lt;refer bean="注入的bean的id"/&gt;</td>         </tr>        <tr>            <td style="text-align: center;">&lt;map&gt;</td>             <td style="text-align: center;">map 集合</td>             <td style="text-align: center;">&lt;entry key="key值" value="value值"&gt;</td>             <td style="text-align: center;"></td>         </tr>        <tr>            <td style="text-align: center;">&lt;properties&gt;</td>             <td style="text-align: center;">properties 集合</td>             <td style="text-align: center;">&lt;prop key="key值"&gt;value值&lt;/prop&gt;</td>             <td style="text-align: center;"></td>         </tr>    </body></table></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6qzxbplckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-6qzxbplckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.UserDaoImp&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注入数组 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;array&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注入list集合 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;userDaoBean&quot;</span>/&gt;</span>               <span class="hljs-comment">&lt;!-- 注入引用类型 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;userDaoBean&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注入set集合 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>220<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>220<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                      <span class="hljs-comment">&lt;!-- Set集合会自动去重 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注入map集合 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;你好&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;我好&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注入properties集合 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;42&quot;</span>&gt;</span>KFC<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>               <br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;32&quot;</span>&gt;</span>MacDonald<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="10"><ul class="nav-tabs"><li class="tab active"><a data-target="10-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="10-2"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="10-3"><i class="fa fa-file-text-o"></i>UserDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="10-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-c18nk4lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-c18nk4lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br>        bookDao.save();<br>        <br>        <span class="hljs-comment">//输出：book dao save ...</span><br>        <span class="hljs-comment">//     遍历数组:[100, 200]</span><br>        <span class="hljs-comment">//     遍历List[com.example.dao.UserDaoImp@6325a3ee, com.example.dao.UserDaoImp@6325a3ee]</span><br>        <span class="hljs-comment">//     遍历Set[120, 220]</span><br>        <span class="hljs-comment">//     遍历Map&#123;12=你好, 22=我好&#125;</span><br>        <span class="hljs-comment">//     遍历Properties&#123;32=MacDonald, 42=KFC&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="10-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-opaxvylckj50ki"></i><span>java</span><div class="collapse show" id="collapse-opaxvylckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] array;<br>    <span class="hljs-keyword">private</span> List&lt;UserDaoImp&gt; list;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; set;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-comment">//提供set方法设置成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = array;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;UserDaoImp&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSet</span><span class="hljs-params">(Set&lt;String&gt; set)</span> &#123;<br>        <span class="hljs-built_in">this</span>.set = set;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;遍历数组:&quot;</span> + Arrays.toString(array));<br>        System.out.println(<span class="hljs-string">&quot;遍历List&quot;</span> + list);<br>        System.out.println(<span class="hljs-string">&quot;遍历Set&quot;</span> + set);<br>        System.out.println(<span class="hljs-string">&quot;遍历Map&quot;</span> + map);<br>        System.out.println(<span class="hljs-string">&quot;遍历Properties&quot;</span> + properties);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="10-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-p5qneilckj50ki"></i><span>java</span><div class="collapse show" id="collapse-p5qneilckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao实现类，接口略过不展示</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;user dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h2 id="6-2-构造器注入"><a href="#6-2-构造器注入" class="headerlink" title="6.2 构造器注入"></a>6.2 构造器注入</h2><h3 id="6-2-1-引用类型"><a href="#6-2-1-引用类型" class="headerlink" title="6.2.1 引用类型"></a>6.2.1 引用类型</h3><p><strong>语法</strong></p><ul><li><p>在类中定义引用类型属性并提供对应的构造方法，其中构造方法的参数将配置给 constructor-arg 的 <font class="code-word"><code>name</code></font> 属性</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xhz8lqlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-xhz8lqlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-keyword">public</span> class 类A&#123;<br><br>    <span class="hljs-keyword">private</span> 类B 变量b;     <span class="hljs-comment">//另一个交给IoC容器管理的类的实例，需要在bean中注入依赖</span><br><br>    <span class="hljs-comment">//提供构造方法设置成员变量</span><br>    <span class="hljs-keyword">public</span> 类A(类b 参数) &#123;<br>        <span class="hljs-built_in">this</span>.变量b = 参数;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 bean 中使用 <font class="code-word"><code>constructor-arg</code></font> 标签的 <font class="code-word"><code>ref</code></font> 属性注入引用类型对象</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wsmvpllckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-wsmvpllckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名B&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类B&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名A&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类A&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;类A中构造方法的参数名&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bean名B&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">...</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-behevslckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-behevslckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.UserDaoImp&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookServiceBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.BookServiceImp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;argsBookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;argsUserDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoBean&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="11"><ul class="nav-tabs"><li class="tab active"><a data-target="11-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="11-2"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="11-3"><i class="fa fa-file-text-o"></i>UserDaoImp.java</a></li><li class="tab"><a data-target="11-4"><i class="fa fa-file-text"></i>BookServiceImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="11-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7ymbv0lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-7ymbv0lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookServiceBean&quot;</span>);<br>        bookService.save();<br>        <br>        <span class="hljs-comment">//输出：book service save ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>        <span class="hljs-comment">//     user dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="11-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-0frzqulckj50ki"></i><span>java</span><div class="collapse show" id="collapse-0frzqulckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类，接口略过不展示</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="11-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-glze5dlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-glze5dlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao实现类，接口略过不展示</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;user dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="11-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-snb4uclckj50ki"></i><span>java</span><div class="collapse show" id="collapse-snb4uclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> com.example.dao.UserDao;<br><br><span class="hljs-comment">//BookService实现类，接口略过不展示</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-comment">//提供构造方法设置bookDao</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImp</span><span class="hljs-params">(BookDao argsBookDao, UserDao argsUserDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = argsBookDao;<br>        <span class="hljs-built_in">this</span>.userDao = argsUserDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book service save ...&quot;</span>);<br>        bookDao.save();<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h3 id="6-2-2-基本类型"><a href="#6-2-2-基本类型" class="headerlink" title="6.2.2 基本类型"></a>6.2.2 基本类型</h3><p><strong>语法</strong></p><ul><li><p>在类中定义基本类型属性并提供可访问的构造方法，其中构造方法的参数将配置给 constructor-arg 的 <font class="code-word"><code>name</code></font> 属性</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yod8fllckj50ki"></i><span>java</span><div class="collapse show" id="collapse-yod8fllckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的对象交给IoC容器管理</span><br><span class="hljs-keyword">public</span> class 类名 &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;      <span class="hljs-comment">//基本类型的实例，需要在bean中注入依赖</span><br><br>    <span class="hljs-comment">//提供构造方法设置成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImp</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 bean 中使用 <font class="code-word"><code>constructor-arg</code></font> 标签的 <font class="code-word"><code>value</code></font> 属性注入简单类型数据</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3u4bq2lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-3u4bq2lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;类中构造方法的参数名&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;属性值&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">...</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w2xh01lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-w2xh01lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;加油&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="12"><ul class="nav-tabs"><li class="tab active"><a data-target="12-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="12-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="12-3"><i class="fa fa-file-text"></i>BookDaoImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="12-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vk1u80lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-vk1u80lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br>        bookDao.save();<br>        <br>        <span class="hljs-comment">//输出：book dao save ...10加油</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="12-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ldz3m6lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-ldz3m6lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="12-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-84g6bzlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-84g6bzlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> number;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//提供构造方法设置成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImp</span><span class="hljs-params">(<span class="hljs-type">int</span> number, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span> + number + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h3 id="6-2-3-参数适配"><a href="#6-2-3-参数适配" class="headerlink" title="6.2.3 参数适配"></a>6.2.3 参数适配</h3><p>除了在上述案例中提到的用 <font class="code-word"><code>constructor-arg</code></font> 标签的 <font class="code-word"><code>name</code></font> 属性去对应构造方法中的形参以外，还有两种适配方法</p><ul><li><p>使用 <font class="code-word"><code>type</code></font> 属性按形参类型注入，将根据类型区分是哪个形参</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yuqsyolckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-yuqsyolckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;类中构造方法的参数类型&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;属性值&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">...</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>使用 <font class="code-word"><code>index</code></font> 属性按形参位置注入，将根据位置区分是哪个形参（从0开始数）</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8g0m6glckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-8g0m6glckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;属性值&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;属性值&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">...</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><h2 id="6-3-自动装配"><a href="#6-3-自动装配" class="headerlink" title="6.3 自动装配"></a>6.3 自动装配</h2><p>IoC 容器根据 bean 所依赖的资源在容器中自动查找并注入到 bean 中的过程称为自动装配。</p><ul><li>自动装配用于<font class="word-stress">引用类型</font>依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时（byType）必须保证容器中相同类型的 bean 唯一</li><li>使用按名称装配时（byName）必须保证容器中相同名字的 bean 唯一，但该方法会导致变量名和配置耦合度高</li><li>自动装配优先级低于 Setter 注入与构造器注入，同时出现时自动装配配置失效</li></ul><h3 id="6-3-1-按类型"><a href="#6-3-1-按类型" class="headerlink" title="6.3.1 按类型"></a>6.3.1 按类型</h3><p><strong>语法</strong></p><p>在类中定义引用类型属性并提供可访问的 <font class="code-word"><code>set</code></font> 方法，在 bean 中使用  <font class="code-word"><code>bean</code></font> 标签的  <font class="code-word"><code>autowire</code></font> 属性设置自动装配。</p><ul><li><p>按类型自动装配：类A.类B &#x3D; 配置文件.类B，则会容器中给 beanA 注入 beanB</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-mzgstalckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-mzgstalckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名B&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类B&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名A&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类A&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-9.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 40%;" /></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vgjuqelckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-vgjuqelckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookServiceBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.BookServiceImp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="15"><ul class="nav-tabs"><li class="tab active"><a data-target="15-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="15-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="15-3"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="15-4"><i class="fa fa-file-text-o"></i>BookService.java</a></li><li class="tab"><a data-target="15-5"><i class="fa fa-file-text"></i>BookServiceImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="15-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w3h540lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-w3h540lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookServiceBean&quot;</span>);<br>        bookService.save();<br>        <br>        <span class="hljs-comment">//输出：book service save ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="15-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-59a9b2lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-59a9b2lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="15-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5mgubzlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-5mgubzlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="15-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-d47wbxlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-d47wbxlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookService接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="15-5"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-89742llckj50ki"></i><span>java</span><div class="collapse show" id="collapse-89742llckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><br><span class="hljs-comment">//BookService实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <br>    <span class="hljs-comment">//提供对应的set方法设置bookDao</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDaoInService</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book service save ...&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h3 id="6-3-1-按名称"><a href="#6-3-1-按名称" class="headerlink" title="6.3.1 按名称"></a>6.3.1 按名称</h3><p><strong>语法</strong></p><p>在类中定义引用类型属性并提供可访问的 <font class="code-word"><code>set</code></font> 方法，在 bean 中使用  <font class="code-word"><code>bean</code></font> 标签的  <font class="code-word"><code>autowire</code></font> 属性设置自动装配。</p><ul><li><p>按名称自动装配：类A. set 方法后面的名字 &#x3D; 配置文件.bean名B，则会容器中给 beanA 注入 beanB</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-a7hn09lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-a7hn09lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名B&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类B&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名A&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类A&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-10.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /></li></ul><p><strong>案例</strong></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jes2f4lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-jes2f4lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDaoBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.BookDaoImp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookServiceBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.service.BookServiceImp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure><div class="tag-common tabs" id="16"><ul class="nav-tabs"><li class="tab active"><a data-target="16-1"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="16-2"><i class="fa fa-file-text-o"></i>BookDao.java</a></li><li class="tab"><a data-target="16-3"><i class="fa fa-file-text-o"></i>BookDaoImp.java</a></li><li class="tab"><a data-target="16-4"><i class="fa fa-file-text-o"></i>BookService.java</a></li><li class="tab"><a data-target="16-5"><i class="fa fa-file-text"></i>BookServiceImp.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="16-1"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wxcghhlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-wxcghhlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.service.BookService;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookServiceBean&quot;</span>);<br>        bookService.save();<br>        <br>        <span class="hljs-comment">//输出：book service save ...</span><br>        <span class="hljs-comment">//     book dao save ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="16-2"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-taudmslckj50ki"></i><span>java</span><div class="collapse show" id="collapse-taudmslckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="16-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wxc809lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-wxc809lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookDao实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="16-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-p6p720lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-p6p720lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BookService接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="16-5"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ej0pymlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-ej0pymlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.dao.BookDao;<br><br><span class="hljs-comment">//BookService实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>&#123;<br><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-comment">//提供对应的set方法设置bookDao</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDaoBean</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;book service save ...&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="7-管理第三方-bean"><a href="#7-管理第三方-bean" class="headerlink" title="7. 管理第三方 bean"></a>7. 管理第三方 bean</h1><p>以管理 Druid 为例，此处参考 <a href="/post/4002719321/#7-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0">JBDC 中 druid 的配置</a>。</p><p><strong>步骤</strong></p><p>在 Spring 中配置连接的步骤如下：</p><ul><li>在 <a href="/post/2450791866/#1-2-%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE">Maven 配置文件</a>中配置相关依赖：mysql、druid</li><li>在 Spring 配置文件中配置 bean 并通过 <a href="#6-1-2-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">Setter 依赖注入</a>配置属性，具体属性详见 <a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8">Druid 配置属性列表</a></li><li>获取数据库连接池对象 <font class="code-word"><code>DataSource</code></font></li><li>获取连接  <font class="code-word"><code>Connection</code></font></li></ul><p><strong>案例</strong></p><div class="tag-common tabs" id="17"><ul class="nav-tabs"><li class="tab active"><a data-target="17-1"><i class="fa fa-file-text-o"></i>pom.xml</a></li><li class="tab"><a data-target="17-2"><i class="fa fa-file-text-o"></i>applicationContext.xml</a></li><li class="tab"><a data-target="17-3"><i class="fa fa-file-text-o"></i>App.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="17-1"><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6oy7stlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-6oy7stlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Maven配置文件：依赖配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="17-2"><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zo8qr7lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-zo8qr7lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件：配置bean，Setter注入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;*************&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="17-3"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h406kdlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-h406kdlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-comment">//获取IoC容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>        <span class="hljs-comment">//获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource) ctx.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>);<br><br>        <span class="hljs-comment">//获取数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br><br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="8-加载属性集"><a href="#8-加载属性集" class="headerlink" title="8. 加载属性集"></a>8. 加载属性集</h1><p><strong>步骤</strong></p><p>对于直接写在属性集 <font class="code-word"><code>Properties</code></font> 文件中的属性，需要先加载文件然后再使用里面的值，步骤如下：</p><ul><li><p>开启 context 命名空间：在 Spring 配置文件原有内容上添加如下内容：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-6.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /></li><li><p>使用 context 命名空间，加载指定的 properties 文件，其中共有如下多种加载方式</p><ul><li><p>加载当前项目路径下指定 properties 文件</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ot3fi4lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-ot3fi4lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载当前项目路径下指定properties文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:文件.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>加载当前项目路径下多个 properties 文件</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4uqu7plckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-4uqu7plckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载当前项目路径下多个properties文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:文件1.properties, classpath:文件2.properties ...&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>加载 properties 文件时不加载系统属性，不配置该项则与系统环境变量重名时系统环境变量读取优先级高于文件</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ycd9bclckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-ycd9bclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载properties文件时不加载系统属性，不配置该项则与系统环境变量重名时系统环境变量读取优先级高于文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:文件.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>加载当前项目路径下所有的 properties 文件</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-712gaplckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-712gaplckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载当前项目路径下所有的properties文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:*.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li><li><p>加载当前项目以及项目依赖的 jar 包路径下所有的 properties 文件</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nkd7cwlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-nkd7cwlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载当前项目以及项目依赖的jar包路径下所有的properties文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath*:*.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>使用读取加载的属性值：<font class="code-word"><code>$&#123;key值&#125;</code></font>，则会在此处会直接引入 value 值</p></li></ul><p><strong>案例</strong></p><p>该案例参照了[在 Spring 中配置 druid](#7-管理第三方 bean) 的案例。</p><div class="tag-common tabs" id="13"><ul class="nav-tabs"><li class="tab active"><a data-target="13-1"><i class="fa fa-file-text-o"></i>pom.xml</a></li><li class="tab"><a data-target="13-2"><i class="fa fa-file-text"></i>jdbc.properties</a></li><li class="tab"><a data-target="13-3"><i class="fa fa-file-text"></i>applicationContext.xml</a></li><li class="tab"><a data-target="13-4"><i class="fa fa-file-text-o"></i>App.java</a></li><li class="tab"><a data-target="13-5"><i class="fa fa-file-text-o"></i>PrintDemo.java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="13-1"><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6z3m66lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-6z3m66lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Maven配置文件：依赖配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="13-2"><figure class="highlight properties"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4nor98lckj50ki"></i><span>properties</span><div class="collapse show" id="collapse-4nor98lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 属性集文件</span><br><span class="hljs-attr">jdbc.driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test01</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">*********</span><br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="13-3"><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yxpnezlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-yxpnezlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring配置文件 --&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 此处路径为jdbc.properties与applicationContext.xml放在一起--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;printDemo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.PrintDemo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="13-4"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-t0je1slckj50ki"></i><span>java</span><div class="collapse show" id="collapse-t0je1slckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">//主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>        <span class="hljs-comment">//获取数据库连接</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource) ctx.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(connection);                          <span class="hljs-comment">//输出：com.mysql.cj.jdbc.ConnectionImpl@71d15f18</span><br><br>        <span class="hljs-comment">//打印信息</span><br>        <span class="hljs-type">PrintDemo</span> <span class="hljs-variable">printDemo</span> <span class="hljs-operator">=</span> (PrintDemo) ctx.getBean(<span class="hljs-string">&quot;printDemo&quot;</span>);<br>        System.out.println(printDemo.string);                    <span class="hljs-comment">//输出：com.mysql.cj.jdbc.Driver</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="13-5"><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pm6428lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-pm6428lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> String string;<br>    <br>    <span class="hljs-comment">//用于注入Properties中读取的属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setString</span><span class="hljs-params">(String string)</span> &#123;<br>        <span class="hljs-built_in">this</span>.string = string;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="9-Ioc-容器"><a href="#9-Ioc-容器" class="headerlink" title="9. Ioc 容器"></a>9. Ioc 容器</h1><p>IoC 容器的使用选择：</p><ul><li>适合交给容器管理的 bean：表现层对象、业务层对象、数据层对象</li><li>不适合交给容器进行管理的 bean：封装实体的域对象</li></ul><h2 id="9-1-容器接口"><a href="#9-1-容器接口" class="headerlink" title="9.1 容器接口"></a>9.1 容器接口</h2><p><strong>概述</strong></p><p><font class="code-word"><code>BeanFactory</code></font> 是容器的最顶层接口，在 Spring 早期使用其实现类作 IoC 容器，现在已经弃用了。</p><img src="D:\Study\编程\Java\图片\05 SSM 框架\05-7.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 40%;" /><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-o5xzl5lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-o5xzl5lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用BeanFactory做IoC容器</span><br>org.springframework.core.io.<span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><span class="hljs-type">BeanFactory</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(resource);<br><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) bf.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br></code></pre></td></tr></table></div></figure><p><font class="code-word"><code>ApplicationContext</code></font> 是现在常用的容器核心接口，其接口中常用的实现类为：</p><ul><li>ClassPathXmlApplicationContext：使用类路径加载配置文件</li><li>FileSystemXmlApplicationContext：使用文件路径加载配置文件</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8ebxctlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-8ebxctlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用ApplicationContext做IoC容器</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDaoBean&quot;</span>);<br></code></pre></td></tr></table></div></figure><p><strong>注意</strong></p><p><font class="code-word"><code>BeanFactory</code></font> 与现在常用的  <font class="code-word"><code>ApplicationContext</code></font> 的区别在于 bean 的加载时机：</p><ul><li><p>BeanFactory：延迟加载 bean，即容器对象造出来时 bean 并未被加载，而是使用容器获取 bean 时才加载</p></li><li><p>ApplicationContext：在容器对象造出来时 bean 就会加载，若想实现延迟加载需要配置 bean 的属性 <font class="code-word"><code>lazy-init</code></font></p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-cps640lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-cps640lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置bean实现延迟加载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bean名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;别名&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean类&quot;</span> <span class="hljs-attr">lazy-init</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><h2 id="9-2-获取容器"><a href="#9-2-获取容器" class="headerlink" title="9.2 获取容器"></a>9.2 获取容器</h2><p>获取容器需要使用 <font class="code-word"><code>ApplicationContext</code></font> 下的子类，有以下多种方式：</p><ul><li><p>类路径加载配置文件：使用 <font class="code-word"><code>ClassPathXmlApplicationContext</code></font>，配置文件放在类路径下</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rbuquslckj50ki"></i><span>java</span><div class="collapse show" id="collapse-rbuquslckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类路径加载配置文件</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;配置文件&quot;</span>);<br></code></pre></td></tr></table></div></figure></li><li><p>加载多个配置文件</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tbxpy6lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-tbxpy6lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加载多个配置文件</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;配置文件1&quot;</span>, <span class="hljs-string">&quot;配置文件2&quot;</span>, ...);<br></code></pre></td></tr></table></div></figure></li><li><p>文件路径加载配置文件：使用 <font class="code-word"><code>FileSystemXmlApplicationContext</code></font>，配置文件放在任意路径下</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6fsa21lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-6fsa21lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//文件路径加载配置文件</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>(<span class="hljs-string">&quot;配置文件路径&quot;</span>);<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="9-3-关闭容器"><a href="#9-3-关闭容器" class="headerlink" title="9.3 关闭容器"></a>9.3 关闭容器</h2><p>关闭容器需要使用 <font class="code-word"><code>ApplicationContext</code></font> 中实现类 <font class="code-word"><code>ClassPathXmlApplicationContext</code></font> 的方法。</p><p>使用时遵循<a href="/post/1017/#4-2-%E8%B0%83%E7%94%A8%E6%88%90%E5%91%98">多态调用成员原则</a>，左侧的类也必须使用 ClassPathXmlApplicationContext。</p><ul><li><p>手动关闭容器：使用 <font class="code-word"><code>close()</code></font> 方法</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bd1w24lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-bd1w24lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用close()方法手动关闭</span><br><span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;配置文件&quot;</span>);<br>....                <span class="hljs-comment">//进行业务操作</span><br>ctx.close();        <span class="hljs-comment">//在业务操作结束后关闭</span><br></code></pre></td></tr></table></div></figure></li><li><p>注册关闭钩子：使用 <font class="code-word"><code>registerShutdownHook()</code></font> 方法，可以在虚拟机退出前先关闭容器再退出虚拟机</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w44mnylckj50ki"></i><span>java</span><div class="collapse show" id="collapse-w44mnylckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用关闭钩子来关闭</span><br><span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>ctx.registerShutdownHook();          <span class="hljs-comment">//可以放在任意位置</span><br></code></pre></td></tr></table></div></figure></li></ul><h2 id="9-4-获取对象"><a href="#9-4-获取对象" class="headerlink" title="9.4 获取对象"></a>9.4 获取对象</h2><p>获取容器中的 bean 有以下多种方式：</p><ul><li><p>使用 bean 名称获取：获取后需要强转类型</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-puhn4jlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-puhn4jlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用bean名称获取</span><br><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bean名&quot;</span>);<br></code></pre></td></tr></table></div></figure></li><li><p>使用 bean 名称获取并指定类型</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-j57leslckj50ki"></i><span>java</span><div class="collapse show" id="collapse-j57leslckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用bean名称获取并指定类型</span><br><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;bean名&quot;</span>, BookDao.class);<br></code></pre></td></tr></table></div></figure></li><li><p>使用 bean 类型获取：要求该类型的 bean 唯一</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-00m9r5lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-00m9r5lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用bean类型获取</span><br><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> ctx.getBean(BookDao.class);<br></code></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>07 SSM 框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SSM 框架</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC - MySQL</title>
    <link href="/post/4002719321/"/>
    <url>/post/4002719321/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="1. 基本概述"></a>1. 基本概述</h1><p><strong>概述</strong></p><p>JDBC 就是使用 Java 语言操作关系型数据库的一套 API。</p><ul><li><p>本质是是官方定义的一套操作所有关系型数据库的规则，即<font class="word-stress">接口</font>。</p></li><li><p>各个数据厂商去实现这套接口，提供数据驱动 jar 包；我们可以使用 jar 包中的<font class="word-stress">实现类</font>。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-29.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /></li></ul><p><strong>案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nmpsqglckj50kh"></i><span>java</span><div class="collapse show" id="collapse-nmpsqglckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//1.注册驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);            <br><br>        <span class="hljs-comment">//2.获取连接:</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>;   <br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                            <span class="hljs-comment">//用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;                    <span class="hljs-comment">//用户密码</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//3.定义sql语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update tb_user set name = &#x27;改名&#x27; where name = &#x27;张三&#x27;&quot;</span>;<br><br>        <span class="hljs-comment">//4.获取执行sql的对象Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>        <span class="hljs-comment">//5.执行sql</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sta.executeUpdate(sql);<br>        <br>        System.out.println(count);   <span class="hljs-comment">//打印受到修改的行数</span><br><br>        <span class="hljs-comment">//6.释放资源</span><br>        sta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="2-驱动管理"><a href="#2-驱动管理" class="headerlink" title="2. 驱动管理"></a>2. 驱动管理</h1><p><font class="code-word"><code>DriverManager</code></font> 是驱动管理类，用于注册驱动、获取数据库连接。</p><p><strong>注册驱动</strong></p><ul><li><p>注册驱动：MySQL 5之后的驱动包可以省略注册驱动的步骤</p><p><font class="code-sentence"><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></font></p></li></ul><p><strong>方法</strong></p><p>DriverManager 中获取连接的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>方法返回值</th>            <th style="text-align: center;" width=40%>方法名称</th>            <th style="text-align: center;" width=40%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Static Connection</td>             <td style="text-align: center;">getConnection(String url, String user, String password)</td>             <td style="text-align: center;">获取连接</td>         </tr>      </body></table><p>其中参数含义如下：</p><ul><li>url：连接路径，格式为 <font class="code-word"><code>jdbc:mysql://主机名:端口名/数据库名?参数1=值1&amp;参数2=值2...</code></font><ul><li>如果连接的是本机 MySQL 服务器，并且 MySQL 服务器默认端口是3306，则可以简写为 <font class="code-word"><code>jdbc:mysql:///数据库名?参数1=值1&amp;参数2=值2...</code></font></li></ul></li><li>user：用户名</li><li>password：用户密码</li></ul><p><strong>案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gzj1dilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-gzj1dilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册驱动</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><br><span class="hljs-comment">//获取连接:</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql:///test01?useSSL=false&quot;</span>;    <span class="hljs-comment">//设置禁用安全连接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                            <span class="hljs-comment">//用户名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;                    <span class="hljs-comment">//用户密码</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br></code></pre></td></tr></table></div></figure><h1 id="3-数据库连接"><a href="#3-数据库连接" class="headerlink" title="3. 数据库连接"></a>3. 数据库连接</h1><p><font class="code-word"><code>Connection</code></font> 是数据库连接类，用于获取执行 SQL 的对象、管理事务。可以通过 <font class="code-word"><code>DriverManager</code></font> 的方法获取。</p><p><strong>方法</strong></p><p>Connection 中获取执行 SQL 的对象的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>方法返回值</th>            <th style="text-align: center;" width=40%>方法名称</th>            <th style="text-align: center;" width=40%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Statement</td>             <td style="text-align: center;">createStatement()</td>             <td style="text-align: center;">普通执行 SQL 对象</td>         </tr>          <tr>            <td style="text-align: center;">PreparedStatement</td>             <td style="text-align: center;">prepareStatement(String sql)</td>             <td style="text-align: center;">预编译 SQL 的执行 SQL 对象，并防止 SQL 注入</td>         </tr>          <tr>            <td style="text-align: center;">CallableStatement</td>             <td style="text-align: center;">prepareCall(String sql)</td>             <td style="text-align: center;">执行存储过程的对象</td>         </tr>      </body></table><p>Connection 中事务管理的方法如下：此处参考 MySQL 的<a href="/post/1273908976/#1-2-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C">事务管理基本操作</a>。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>方法返回值</th>            <th style="text-align: center;" width=35%>方法名称</th>            <th style="text-align: center;" width=45%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void</td>             <td style="text-align: center;">setAutoCommit(boolean autoCommit);</td>             <td style="text-align: center;">true 为自动提交事务；false 为手动提交事务，即开启事务；默认为true</td>         </tr>          <tr>            <td style="text-align: center;">void</td>             <td style="text-align: center;">commit()</td>             <td style="text-align: center;">提交事务</td>         </tr>          <tr>            <td style="text-align: center;">void</td>             <td style="text-align: center;">rollback()</td>             <td style="text-align: center;">回滚事务</td>         </tr>      </body></table><p><strong>案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-v69w9rlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-v69w9rlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdbc;<br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//配置连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                     <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;              <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//定义sql语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update tb_user set name = &#x27;张3&#x27; where name = &#x27;张三&#x27;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update tb_user set name = &#x27;李4&#x27; where name = &#x27;李四&#x27;&quot;</span>;<br><br>        <span class="hljs-comment">//获取执行sql的对象</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>        <span class="hljs-comment">//进行事务管理</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//开启事务</span><br>            con.setAutoCommit(<span class="hljs-literal">false</span>);<br><br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count1</span> <span class="hljs-operator">=</span> sta.executeUpdate(sql1);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> sta.executeUpdate(sql2);<br><br>            <span class="hljs-comment">// 提交事务</span><br>            con.commit();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 回滚事务</span><br>            con.rollback();<br>            <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        sta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-执行语句"><a href="#4-执行语句" class="headerlink" title="4. 执行语句"></a>4. 执行语句</h1><p><font class="code-word"><code>Statement</code></font> 是执行 SQL 语句的类，用于执行 SQL 语句。可以通过 <font class="code-word"><code>Connection</code></font> 的方法获取。</p><p><font class="code-word"><code>PreparedStatement</code></font> 是执行 SQL 语句的类，用于执行 SQL 语句（可以预编译和防止 SQL 注入）。可以通过 <font class="code-word"><code>Connection</code></font> 的方法获取。</p><h2 id="4-1-登录案例"><a href="#4-1-登录案例" class="headerlink" title="4.1 登录案例"></a>4.1 登录案例</h2><p>以下案例提供了一种登录逻辑：根据用户输入的用户名和密码在数据库进行查找，若查找到则视为登录成功。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8dhe0dlckj50kh"></i><span>sql</span><div class="collapse show" id="collapse-8dhe0dlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user(<br>    id       <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    password <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user(username, password) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;1234&#x27;</span>), (<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;5678&#x27;</span>);<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rg42kylckj50kh"></i><span>java</span><div class="collapse show" id="collapse-rg42kylckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdbc;<br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//配置连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                      <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;                <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//模拟用户输入用户名和密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">inputName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">inputPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username = &#x27;&quot;</span> + inputName + <span class="hljs-string">&quot;&#x27; and password = &#x27;&quot;</span> + inputPassword + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>        System.out.println(sql);     <span class="hljs-comment">//输出：select * from tb_user where username = &#x27;张三&#x27; and password = &#x27;1234&#x27;</span><br><br>        <span class="hljs-comment">//获取执行对象</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>        <span class="hljs-comment">//执行sql</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sta.executeQuery(sql);<br><br>        <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        sta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-SQL-注入"><a href="#4-2-SQL-注入" class="headerlink" title="4.2 SQL 注入"></a>4.2 SQL 注入</h2><p>SQL 注入是通过操作输入来修改事先定义好的 SQL 语句，用以达到执行代码对服务器进行攻击的方法。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-t8yi6klckj50kh"></i><span>java</span><div class="collapse show" id="collapse-t8yi6klckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据准备同登录案例</span><br><span class="hljs-keyword">package</span> com.example.jdbc;<br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//配置连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                           <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;                  <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//模拟用户输入用户名和密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">inputName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;askldn&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">inputPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username = &#x27;&quot;</span> + inputName + <span class="hljs-string">&quot;&#x27; and password = &#x27;&quot;</span> + inputPassword + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>        System.out.println(sql);     <span class="hljs-comment">//输出：select * from tb_user where username = &#x27;askldn&#x27; and password = &#x27;&#x27; or &#x27;1&#x27; = &#x27;1&#x27;</span><br><br>        <span class="hljs-comment">//获取执行对象</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>        <span class="hljs-comment">//执行sql</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sta.executeQuery(sql);<br><br>        <span class="hljs-comment">//识别结果</span><br>        <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);                 <span class="hljs-comment">//显示：登录成功，即 SQL 注入</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        sta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-3-Statement"><a href="#4-3-Statement" class="headerlink" title="4.3 Statement"></a>4.3 Statement</h2><p><font class="code-word"><code>Statement</code></font> 是执行 SQL 语句的类，用于执行 SQL 语句。可以通过 <font class="code-word"><code>Connection</code></font> 的方法获取。</p><p><strong>方法</strong></p><p>Statement 中执行 SQL 语句的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>方法返回值</th>            <th style="text-align: center;" width=40%>方法名称</th>            <th style="text-align: center;" width=40%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">int</td>             <td style="text-align: center;">executeUpdate(String sql)</td>             <td style="text-align: center;">执行 DML（返回值为受影响的行数）、DDL（返回值均有可能）</td>         </tr>          <tr>            <td style="text-align: center;">ResultSet</td>             <td style="text-align: center;">executeQuery(String sql)</td>             <td style="text-align: center;">执行 DQL 语句，返回结果集 ResultSet 对象</td>         </tr>      </body></table><p><strong>案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1d7qjjlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1d7qjjlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdbc;<br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br><br>    <span class="hljs-meta">@Test</span>   <span class="hljs-comment">//DML语句测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//配置连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                         <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;          <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//定义DML语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update tb_user set name = &#x27;张3&#x27; where name = &#x27;张三&#x27;&quot;</span>;<br><br>        <span class="hljs-comment">//获取执行sql的对象</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>        <span class="hljs-comment">//执行sql</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sta.executeUpdate(sql);<br>        Assert.assertEquals(<span class="hljs-string">&quot;更新可能出现问题&quot;</span>, <span class="hljs-number">1</span>, count);    <span class="hljs-comment">//受影响的行数预期值为：1</span><br><br>        <span class="hljs-comment">//释放资源</span><br>        sta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bfvhrmlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-bfvhrmlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdbc;<br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br><br>    <span class="hljs-meta">@Test</span>   <span class="hljs-comment">//DDL语句测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDDL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//配置连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                         <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;               <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//定义DDL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;alter table tb_user rename to new_table&quot;</span>;<br><br>        <span class="hljs-comment">//获取执行sql的对象</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>        <span class="hljs-comment">//执行sql</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sta.executeUpdate(sql);      <span class="hljs-comment">//即使成功，结果也可能为0</span><br><br>        <span class="hljs-comment">//释放资源</span><br>        sta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-i9m7tslckj50kh"></i><span>java</span><div class="collapse show" id="collapse-i9m7tslckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdbc;<br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br><br>    <span class="hljs-meta">@Test</span>   <span class="hljs-comment">//DQL语句测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDQL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//配置连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                         <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;                 <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//定义DQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where gender = 1;&quot;</span>;<br><br>        <span class="hljs-comment">//获取执行sql的对象</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>        <span class="hljs-comment">//执行sql</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sta.executeQuery(sql);      <span class="hljs-comment">//即使成功，结果也可能为0</span><br><br>        <span class="hljs-comment">//释放资源</span><br>        sta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-4-PreparedStatement"><a href="#4-4-PreparedStatement" class="headerlink" title="4.4 PreparedStatement"></a>4.4 PreparedStatement</h2><p><strong>概述</strong></p><p><font class="code-word"><code>PreparedStatement</code></font> 继承了 <font class="code-word"><code>Statement</code></font>，是执行 SQL 语句的类。</p><ul><li>可以预编译 SQL：预编译功能开启需要在 url 里设置 <font class="code-word"><code>useServerPrepStmts=true</code></font></li><li>可以防止 SQL 注入：将敏感字符进行转义，字符串 <font class="code-word"><code>&quot;&#39; or &#39;1&#39; = &#39;1&quot;</code></font> 会被转义成 <font class="code-word"><code>&quot;\&#39; or \&#39;1\&#39; = \&#39;1&quot;</code></font>，称为纯字符串</li></ul><p><strong>方法</strong></p><p>在 <a href="#3-Connection">Connection</a> 中提供了获取 PreparedStatement 对象的方法， 其中传入的 SQL 语句中的参数值使用占位符 <font class="code-word"><code>?</code></font> 替代。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ncx538lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ncx538lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义SQL语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;<br><br><span class="hljs-comment">//通过Connection对象获取PreparedStatement对象</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psta</span> <span class="hljs-operator">=</span> con.prepareStatement(sql);<br></code></pre></td></tr></table></div></figure><p>PreparedStatement 对象设置参数值的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>方法返回值</th>            <th style="text-align: center;" width=40%>方法名称</th>            <th style="text-align: center;" width=40%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void</td>             <td style="text-align: center;">setXxx(int parameterIndex, xxx x)</td>             <td style="text-align: center;">parameterIndex 为 ? 的位置编号（从1开始），x 为替换 ? 的值</td>         </tr>      </body></table><p>PreparedStatement 中执行 SQL 语句的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>方法返回值</th>            <th style="text-align: center;" width=40%>方法名称</th>            <th style="text-align: center;" width=40%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">int</td>             <td style="text-align: center;">executeUpdate()</td>             <td style="text-align: center;">执行 DML（返回值为受影响的行数）、DDL（返回值均有可能）</td>         </tr>          <tr>            <td style="text-align: center;">ResultSet</td>             <td style="text-align: center;">executeQuery()</td>             <td style="text-align: center;">执行 DQL 语句，返回结果集 ResultSet 对象</td>         </tr>     </body></table><p><strong>案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-glg9rylckj50kh"></i><span>java</span><div class="collapse show" id="collapse-glg9rylckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdbc;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//配置连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01?useServerPrepStmts=true&quot;</span>;   <span class="hljs-comment">//开启预编译</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                           <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;                   <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//模拟用户输入用户名和密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">inputName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;askldn&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">inputPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27; = &#x27;1&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username = ? and password = ?&quot;</span>;<br><br>        <span class="hljs-comment">//获取执行对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">psta</span> <span class="hljs-operator">=</span> con.prepareStatement(sql);<br><br>        psta.setString(<span class="hljs-number">1</span>, inputName);<br>        psta.setString(<span class="hljs-number">2</span>, inputPassword);<br><br>        <span class="hljs-comment">//执行sql</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> psta.executeQuery();<br><br>        <span class="hljs-comment">//识别结果</span><br>        <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);                 <span class="hljs-comment">//显示：登录失败，已经防止了SQL注入，必须输入正确密码</span><br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        psta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="5-结果集"><a href="#5-结果集" class="headerlink" title="5. 结果集"></a>5. 结果集</h1><p><font class="code-word"><code>ResultSet</code></font> 是结果集，用于封装 DQL 语句的查询结果。可以通过 <font class="code-word"><code>Statement</code></font> 的方法获取。</p><p><strong>方法</strong></p><p>ResultSet 中获取查询结果的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>方法返回值</th>            <th style="text-align: center;" width=40%>方法名称</th>            <th style="text-align: center;" width=40%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">boolean</td>             <td style="text-align: center;">next()</td>             <td style="text-align: center;">移到下一行，返回值为 true 则表示当前行有数据，false 则表示没有数据</td>         </tr>          <tr>            <td style="text-align: center;">xxx</td>             <td style="text-align: center;">xxx getXxx(String columnLabel)</td>             <td style="text-align: center;">获取名称为 str 的列的数据</td>         </tr>          <tr>            <td style="text-align: center;">xxx</td>             <td style="text-align: center;">xxx getXxx(int columnIndex)</td>             <td style="text-align: center;">获取第 num 列的数据（从1开始）</td>         </tr>     </body></table><p><strong>案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9007irlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-9007irlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdbc;<br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br><br>    <span class="hljs-meta">@Test</span>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testResultSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//配置连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test01&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;                         <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;************&quot;</span>;            <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//定义DQL语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where gender = 1;&quot;</span>;<br><br>        <span class="hljs-comment">//获取执行sql的对象</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>        <span class="hljs-comment">//执行sql</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sta.executeQuery(sql);      <span class="hljs-comment">//即使成功，结果也可能为0</span><br><br>        <span class="hljs-comment">//输出数据</span><br>        <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-number">1</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-number">7</span>);<br>            System.out.println(id + <span class="hljs-string">&quot; &quot;</span> + name + <span class="hljs-string">&quot; &quot;</span> + gender + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        sta.close();<br>        con.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="6-数据库连接池"><a href="#6-数据库连接池" class="headerlink" title="6. 数据库连接池"></a>6. 数据库连接池</h1><p>数据库连接池是个容器，负责分配、管理数据库连接（Connection）：</p><ul><li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</li></ul><p>官方提供了数据库连接池标准接口 <font class="code-word"><code>DataSource</code></font>，由第三方组织实现此接口，并重写对应的 <font class="code-word"><code>getConnection()</code></font> 方法，用于获取连接 <font class="code-word"><code>Connection</code></font>。常见的数据库连接池：DBCP、C3P0、Druid（相关介绍以及参数配置详见其 Github 地址：<a href="https://github.com/alibaba/druid%EF%BC%89%E3%80%82">https://github.com/alibaba/druid）。</a></p><p><strong>步骤</strong></p><p>普通配置并连接 <font class="word-stress">Druid</font> 的步骤如下：</p><ul><li><p>导入对应的 jar 包</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-30.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /></li><li><p>在文件中进行属性配置并导入配置文件，具体属性详见 <a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8">Druid 配置属性列表</a></p></li><li><p>获取数据库连接池对象 <font class="code-word"><code>DataSource</code></font></p></li><li><p>获取连接  <font class="code-word"><code>Connection</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight properties"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5awfuzlckj50kh"></i><span>properties</span><div class="collapse show" id="collapse-5awfuzlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 定义配置文件</span><br><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"># 配置规则与DriverManager中相同</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test01</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">************</span><br><span class="hljs-comment"># 初始化连接数量</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">5</span><br><span class="hljs-comment"># 最大连接数</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">10</span><br><span class="hljs-comment"># 最大等待时间</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">3000</span><br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-htdpcflckj50kh"></i><span>java</span><div class="collapse show" id="collapse-htdpcflckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//加载配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;demo\\src\\druid.properties&quot;</span>));           <span class="hljs-comment">//相对路径</span><br><br>        <span class="hljs-comment">//获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br><br>        <span class="hljs-comment">//获取数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br><br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>04 MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
      <tag>Java</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven - 项目管理</title>
    <link href="/post/2450791866/"/>
    <url>/post/2450791866/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="1. 基本概述"></a>1. 基本概述</h1><p><strong>概述</strong></p><p>Apache Maven 是一个项目管理和构建工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建、报告和文档。其特点为：标准化的项目结构、标准化的构建流程、方便的依赖管理。</p><p>Maven 项目模型如下：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-1.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 60%;" /><p><strong>仓库</strong></p><p>Maven 仓库包括：</p><ul><li>本地仓库：自己计算机上的一个目录</li><li>中央仓库：由 Maven 团队维护的全球唯一的仓库，地址：<a href="https://repo1.maven.org/maven2">https://repo1.maven.org/maven2</a></li><li>远程仓库（私服）：一般由公司团队搭建的私有仓库（用于提升访问速度）</li></ul><p>仓库使用顺序如下：</p><ul><li><p>当项目中使用坐标引入对应依赖 jar 包后，首先会查找本地仓库中是否有对应的 jar 包，有则直接引用</p></li><li><p>如果本地仓库没有 jar 包：</p><ul><li><p>没有远程仓库：从中央仓库去寻找对应 jar 包并下载到本地仓库</p></li><li><p>有远程仓库：从远程仓库中查找对应 jar 包并下载到本地仓库</p><p>​                       如果远程仓库没有，则会从中央仓库去寻找对应 jar 包下载到远程仓库，再从远程仓库下载到本地仓库</p></li></ul></li></ul><p><strong>坐标</strong></p><p>Maven 中的坐标用于描述仓库中资源的位置，主要组成如下：</p><ul><li>groupID：定义当前 Maven 项目所属组织名称（通常是域名反写，例如：org.mybatis）</li><li>artifactID：定义当前 Maven 项目名称（通常是模块名称）</li><li>version：定义当前项目版本号</li></ul><h1 id="2-依赖配置"><a href="#2-依赖配置" class="headerlink" title="2. 依赖配置"></a>2. 依赖配置</h1><p><strong>依赖管理</strong></p><p>依赖指当前项目运行所需要的 jar 包，一个项目可以在 <code>pom.xml</code> 文件中通过坐标配置多个依赖。</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6mviwhlckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-6mviwhlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入MySQL驱动jar包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                                <span class="hljs-comment">&lt;!--依赖所属群组ID--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-comment">&lt;!--依赖所属项目ID--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                               <span class="hljs-comment">&lt;!--依赖版本号--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><span class="hljs-comment">&lt;!--配置好后需点击刷新按钮才能生效--&gt;</span><br></code></pre></td></tr></table></div></figure><p><strong>依赖范围</strong></p><p>可以通过设置坐标的依赖范围（<font class="code-word"><code>scope</code></font>）来设置对应 jar 包的作用范围，默认取 <font class="code-word"><code>compile</code></font>。</p><p>作用范围分为三类：</p><ul><li>编译环境：主程序范围有效，即 main 文件夹范围内</li><li>测试环境：测试程序范围有效，即 test 文件夹范围内</li><li>运行环境：指运行时，也即参与了打包，即 package 指定范围内</li></ul><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>依赖范围</th>            <th style="text-align: center;" width=15%>编译环境</th>            <th style="text-align: center;" width=15%>测试环境</th>            <th style="text-align: center;" width=25%>运行环境</th>            <th style="text-align: center;" width=25%>例子</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">compile</td>              <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">logback</td>        </tr>           <tr>            <td style="text-align: center;">test</td>              <td style="text-align: center;">-</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">-</td>             <td style="text-align: center;">Junit</td>        </tr>           <tr>            <td style="text-align: center;">provided</td>              <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">-</td>             <td style="text-align: center;">servlet-api</td>        </tr>          <tr>            <td style="text-align: center;">runtime</td>              <td style="text-align: center;">-</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">JDBC 驱动</td>        </tr>        <tr>            <td style="text-align: center;">system</td>              <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">-</td>             <td style="text-align: center;">存储在本地的 jar 包</td>        </tr>        <tr>            <td style="text-align: center;">import</td>              <td style="text-align: center;" colspan="4">引入 DependencyManagement</td>         </tr>       </body></table><p>可以在 <code>pom.xml</code> 文件中配置依赖时指定依赖范围。</p><figure class="highlight xml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-iy5ty1lckj50ki"></i><span>xml</span><div class="collapse show" id="collapse-iy5ty1lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入MySQL驱动jar包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                                <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>          <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                               <br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>                                  <span class="hljs-comment">&lt;!--指定依赖范围--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h1 id="3-生命周期"><a href="#3-生命周期" class="headerlink" title="3. 生命周期"></a>3. 生命周期</h1><p>Maven 构建项目生命周期描述的是一次构建过程经历了多少个时间，Maven 对项目构建的生命周期划分为三类，各自为一个生命周期：</p><ul><li><strong>clean</strong>：清理工作<ul><li>pre-clean：执行一些需要在 clean 之前完成的工作</li><li>clean：移除所有上一次构建生成的文件</li><li>post-clean：执行一些需要在 clean 之后立刻完成的工作</li></ul></li><li><strong>default</strong>：核心工作，例如编译、测试、打包、安装等，其中常见的命令如下<ul><li>compile：编译项目的源代码</li><li>test：使用合适的单元测试框架运行测试</li><li>package：将编译后的代码打包成可分发格式的文件，比如jar、war、ear文件</li><li>install：安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖</li></ul></li><li><strong>site</strong>：产生报告，发布站点等<ul><li>pre-site：执行一些需要在生成站点文件之前完成的工作</li><li>site：生成项目的站点文档</li><li>post-site：执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy：将生成的站点文档部署到特性的服务器上</li></ul></li></ul><p>在同一条生命周期里，执行后面的命令时，该命令前全部命令会先自动执行。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/05-2.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h1 id="4-插件"><a href="#4-插件" class="headerlink" title="4. 插件"></a>4. 插件</h1><ul><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</li><li>默认 Maven 在各个生命周期上绑定有预设的功能</li><li>通过插件可以自定义其他功能</li></ul><p>官方给出的插件列表：<a href="https://maven.apache.org/plugins/index.html">https://maven.apache.org/plugins/index.html</a></p><p>官方给出的插件配置指南：<a href="https://maven.apache.org/guides/mini/guide-configuring-plugins.html">https://maven.apache.org/guides/mini/guide-configuring-plugins.html</a></p>]]></content>
    
    
    <categories>
      
      <category>06 项目管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>项目管理</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven - 软件配置</title>
    <link href="/post/2655733482/"/>
    <url>/post/2655733482/</url>
    
    <content type="html"><![CDATA[<h1 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1. 软件下载"></a>1. 软件下载</h1><p>Maven 官网地址：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-1.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:100%;" /><p>点击 Download 进入下载页面后，下载对应系统的安装包。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-2.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:100%;" /><h1 id="2-软件安装"><a href="#2-软件安装" class="headerlink" title="2. 软件安装"></a>2. 软件安装</h1><p>下载好的压缩包如下。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-3.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /><p>将该压缩包打开后里面内容如下，将该文件夹复制到存放软件的目录即可，无需安装。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-4.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><h1 id="3-软件配置"><a href="#3-软件配置" class="headerlink" title="3. 软件配置"></a>3. 软件配置</h1><h2 id="3-1-配置环境变量"><a href="#3-1-配置环境变量" class="headerlink" title="3.1 配置环境变量"></a>3.1 配置环境变量</h2><p>右键单击计算机 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt;  新建</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-5.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /><p>新建如下系统变量，变量值输入之前解压出的文件夹存放的目录，然后点击确定。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-6.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><p>然后双击系统变量 Path，在里面新建如下环境变量，然后点击确定。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-7.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><h2 id="3-2-配置本地仓库"><a href="#3-2-配置本地仓库" class="headerlink" title="3.2 配置本地仓库"></a>3.2 配置本地仓库</h2><p>打开 maven 文件夹中配置文件： <code>/.../apache-maven-3.8.6/conf/settings.xml</code></p><p>在如下位置插入本地仓库配置项，其中填入本地仓库文件夹的路径，不配置该项则会默认存放于C盘中。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-8.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /><h2 id="3-3-配置阿里云私服"><a href="#3-3-配置阿里云私服" class="headerlink" title="3.3 配置阿里云私服"></a>3.3 配置阿里云私服</h2><p>打开 maven 文件夹中配置文件： <code>/.../apache-maven-3.8.6/conf/settings.xml</code></p><p>查看阿里云私服的配置：<a href="https://developer.aliyun.com/mvn/guide">阿里云官网-Maven仓库</a>，并复制教程中的内容到如下指定位置。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-9.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /><h1 id="4-IDEA-配置-Maven"><a href="#4-IDEA-配置-Maven" class="headerlink" title="4. IDEA 配置 Maven"></a>4. IDEA 配置 Maven</h1><h2 id="4-1-项目配置"><a href="#4-1-项目配置" class="headerlink" title="4.1 项目配置"></a>4.1 项目配置</h2><p>选择 IDEA 里的设置 -&gt; 搜索 Maven -&gt; 点开 Maven 配置界面</p><p>进行如下配置，设置 IDEA 使用本地的 Maven，并修改文件配置，此配置将对该项目生效。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-10.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /><h2 id="4-2-全局配置"><a href="#4-2-全局配置" class="headerlink" title="4.2 全局配置"></a>4.2 全局配置</h2><p>在 IDEA 中选择文件 -&gt; 关闭所有项目 -&gt; 进入 IDEA 启动界面 -&gt; 自定义 -&gt; 所有设置</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-12.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><p>之后的配置过程与<a href="#4-1-%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE">项目配置</a>相同，此配置为全局配置，将对所有项目生效。</p><h2 id="4-3-创建项目"><a href="#4-3-创建项目" class="headerlink" title="4.3 创建项目"></a>4.3 创建项目</h2><p>可以直接创建 Maven 项目</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-13.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><p>也可以创建空项目 -&gt; 创建新模块 -&gt; 选择 Maven 模块</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-11.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><h2 id="4-4-导入项目"><a href="#4-4-导入项目" class="headerlink" title="4.4 导入项目"></a>4.4 导入项目</h2><p>从侧边栏选中 Maven -&gt; 点击加号 -&gt; 选择要导入的 Maven 项目的 <code>pom.xml</code> 文件</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-14.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><h2 id="4-5-插件安装"><a href="#4-5-插件安装" class="headerlink" title="4.5 插件安装"></a>4.5 插件安装</h2><p>推荐插件：Maven Helper，包含右键单击选择操作和断点调试功能</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/04-15.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" />]]></content>
    
    
    <categories>
      
      <category>05 软件配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Maven</tag>
      
      <tag>软件配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储引擎 - MySQL</title>
    <link href="/post/3462126909/"/>
    <url>/post/3462126909/</url>
    
    <content type="html"><![CDATA[<h1 id="1-体系结构"><a href="#1-体系结构" class="headerlink" title="1. 体系结构"></a>1. 体系结构</h1><p>MySQL 体系结构如下：</p><ul><li><strong>连接层</strong>：最上层是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证、及相关的安全方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li><li><strong>服务层</strong>：第二层架构主要完成大多数的核心服务功能，如 SQL 接口，并完成缓存的查询，SQL 的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数。</li><li><strong>引擎层</strong>：存储引擎真正的负责了 MySQL 中数据的存储和提取，服务器通过 API 和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。MySQL 中<font class="word-stress">索引在引擎层</font>。</li><li><strong>存储层</strong>：主要是将数据存储再文件系统之上，并完成与存储引擎的交互。</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-28.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h1 id="2-引擎概述"><a href="#2-引擎概述" class="headerlink" title="2. 引擎概述"></a>2. 引擎概述</h1><p><strong>语法</strong></p><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。</p><ul><li><p>在创建表时，指定存储引擎：不指定时默认是 InnoDB</p><p><font class="code-sentence"><code>create table 表名 (...) engine = 存储引擎;</code></font></p></li><li><p>查看当前数据库支持的存储引擎</p><p><font class="code-sentence"><code>show engines;</code></font></p></li></ul><p><strong>特点</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>特点</th>            <th style="text-align: center;" width=25%>InnoDB</th>            <th style="text-align: center;" width=25%>MyISAM</th>            <th style="text-align: center;" width=25%>Memory</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">存储限制</td>             <td style="text-align: center;">64TB</td>             <td style="text-align: center;">有</td>             <td style="text-align: center;">有</td>         </tr>        <tr>            <td style="text-align: center;">事务安全</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">不支持</td>             <td style="text-align: center;">不支持</td>         </tr>        <tr>            <td style="text-align: center;">锁机制</td>             <td style="text-align: center;">支持表级锁、行级锁</td>             <td style="text-align: center;">支持表级锁</td>             <td style="text-align: center;">支持表级锁</td>         </tr>        <tr>            <td style="text-align: center;">B+Tree 索引</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">支持</td>         </tr>        <tr>            <td style="text-align: center;">Hash 索引</td>             <td style="text-align: center;">不支持</td>             <td style="text-align: center;">不支持</td>             <td style="text-align: center;">支持</td>         </tr>        <tr>            <td style="text-align: center;">全文索引</td>             <td style="text-align: center;">支持（5.6版本之后）</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">不支持</td>         </tr>        <tr>            <td style="text-align: center;">空间使用</td>             <td style="text-align: center;">高</td>             <td style="text-align: center;">低</td>             <td style="text-align: center;">N/A</td>         </tr>        <tr>            <td style="text-align: center;">内存使用</td>             <td style="text-align: center;">高</td>             <td style="text-align: center;">低</td>             <td style="text-align: center;">中等</td>         </tr>        <tr>            <td style="text-align: center;">批量插入速度</td>             <td style="text-align: center;">低</td>             <td style="text-align: center;">高</td>             <td style="text-align: center;">高</td>         </tr>        <tr>            <td style="text-align: center;">外键机制</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">不支持</td>             <td style="text-align: center;">不支持</td>         </tr>    </body></table><p>应用场合如下：</p><ul><li>InnoDB：是 MySQL 的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查之外，还包含很多的更新、删除操作，则适合用 InnoDB 引擎。</li><li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性，并发性要求不是很高，则适合用 MyISAM 引擎。</li><li>MEMORY：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY 的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，且无法保障数据的安全性。</li></ul><h1 id="3-InnoDB"><a href="#3-InnoDB" class="headerlink" title="3. InnoDB"></a>3. InnoDB</h1><p><strong>概述</strong></p><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 存储引擎。</p><p>InnoDB 特点如下：</p><ul><li>DML 操作遵循 ACID（事务四大特性）原则，支持事务</li><li>支持行级锁，提高并发访问性能</li><li>支持外键 <font class="code-word"><code>foreign key</code></font> 约束，保证数据的完整性和正确性</li></ul><p><strong>文件</strong></p><p>文件名.ibd：InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据、索引</p><p>​                      可以通过语句 <font class="code-sentence"><code>show variables like &#39;innodb_file_per_table&#39;;</code></font> 查询开关是否打开</p><p><strong>逻辑存储结构</strong></p><ul><li>TableSpace：表空间，包含若干 Segment</li><li>Segment：段，包含若干 Extent</li><li>Extent：区，<font class="word-stress">固定大小 1M</font>，包含64个 Page</li><li>Page：页，<font class="word-stress">固定大小 16K</font>， 包含若干 Row</li><li>Row：行，包含行数据</li></ul><h1 id="4-MyISAM"><a href="#4-MyISAM" class="headerlink" title="4. MyISAM"></a>4. MyISAM</h1><p><strong>概述</strong></p><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>MyISAM 特点如下：</p><ul><li>不支持事务，不支持外键</li><li>支持表级锁，不支持行级锁</li><li>访问速度快</li></ul><p><strong>文件</strong></p><ul><li>文件名.sdi：存储表结构信息</li><li>文件名.MYD：存储数据</li><li>文件名.MYI：存储索引</li></ul><h1 id="5-MEMORY"><a href="#5-MEMORY" class="headerlink" title="5. MEMORY"></a>5. MEMORY</h1><p><strong>概述</strong></p><p>MEMORY 引擎的表数据是存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>MEMORY 特点如下：</p><ul><li>存储在内存中</li><li>默认采用 hash 索引</li></ul><p><strong>文件</strong></p><p>文件名.sdl：存储表结构信息</p>]]></content>
    
    
    <categories>
      
      <category>04 MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事务和锁 - MySQL</title>
    <link href="/post/1273908976/"/>
    <url>/post/1273908976/</url>
    
    <content type="html"><![CDATA[<h1 id="1-事务概述"><a href="#1-事务概述" class="headerlink" title="1. 事务概述"></a>1. 事务概述</h1><h2 id="1-1-四大特性"><a href="#1-1-四大特性" class="headerlink" title="1.1 四大特性"></a>1.1 四大特性</h2><p>事务具有四大特性（ACID）：</p><ul><li><strong>原子性</strong>：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li><strong>一致性</strong>：事务完成时，必须使所有的数据都保持一致状态</li><li><strong>隔离性</strong>：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li><strong>持久性</strong>：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h2 id="1-2-基本操作"><a href="#1-2-基本操作" class="headerlink" title="1.2 基本操作"></a>1.2 基本操作</h2><p><strong>语法</strong></p><p>事务是一组操作的集合，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作<font class="word-stress">要么同时成功，要么同时失败</font>。</p><ul><li><p>查看事务提交方式</p><p><font class="code-sentence"><code>select @@autocommit;</code></font></p></li><li><p>设置事务提交方式：默认为1，即自动提交</p><p><font class="code-sentence"><code>set @@autocommit = 0;</code></font></p></li><li><p>开启事务</p><p><font class="code-sentence"><code>start transaction;</code></font> 或 <font class="code-sentence"><code>begin;</code></font></p></li><li><p>提交事务：将所有的DML语句操作历史记录和底层硬盘数据来一次同步</p><p><font class="code-sentence"><code>commit;</code></font></p></li><li><p>回滚事务：将所有的DML语句操作历史记录全部清空</p><p><font class="code-sentence"><code>rollback;</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7hakgjlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-7hakgjlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 方式一</span><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@autocommit</span>;<br><span class="hljs-keyword">set</span> @<span class="hljs-variable">@autocommit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 设置为手动提交</span><br><br><span class="hljs-comment">-- 转账操作</span><br><span class="hljs-comment">-- 1. 查询张三账户余额</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment">-- 2. 将张三账户余额-1000</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment">-- 3. 将李四账户余额+1000</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span>;<br><br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">rollback</span> ;<br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lbks3glckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-lbks3glckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 方式二 </span><br><span class="hljs-keyword">start</span> transaction ;<br><br><span class="hljs-comment">-- 转账操作 </span><br><span class="hljs-comment">-- 1. 查询张三账户余额</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment">-- 2. 将张三账户余额-1000</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br><span class="hljs-comment">-- 3. 将李四账户余额+1000</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span>;<br><br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">rollback</span>;<br></code></pre></td></tr></table></div></figure><h2 id="1-3-隐式提交"><a href="#1-3-隐式提交" class="headerlink" title="1.3 隐式提交"></a>1.3 隐式提交</h2><p>执行部分操作会直接导致事务隐式提交：</p><ul><li><p>执行 DDL 语句</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vzvvsmlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-vzvvsmlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见基本操作</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;<br><br><span class="hljs-comment">-- DQL语句，事务直接提交</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> account <span class="hljs-keyword">add</span> age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>;<br></code></pre></td></tr></table></div></figure></li><li><p>开启新的事务</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-q44mdflckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-q44mdflckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见基本操作</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;<br><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 开启新事务，上个事务直接提交</span><br><span class="hljs-keyword">begin</span>;<br></code></pre></td></tr></table></div></figure></li><li><p>部分锁操作</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7lfr6clckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-7lfr6clckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见基本操作</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;<br><br><span class="hljs-comment">-- 执行加表锁操作，事务直接提交</span><br>lock tables account write;<br></code></pre></td></tr></table></div></figure></li></ul><h1 id="2-并发事务"><a href="#2-并发事务" class="headerlink" title="2. 并发事务"></a>2. 并发事务</h1><h2 id="2-1-并发事务问题"><a href="#2-1-并发事务问题" class="headerlink" title="2.1 并发事务问题"></a>2.1 并发事务问题</h2><ul><li><p><strong>脏读</strong>：一个事务读到另外一个事务还没有提交的数据</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-8.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nvlujilckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-nvlujilckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例说明：在事务一中途直接查询到了事务二未提交的数据结果</span><br><br><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 设置隔离级别</span><br><span class="hljs-keyword">set</span> session transaction isolation level read uncommitted;<br><br><span class="hljs-comment">-- 开启事务一</span><br><span class="hljs-keyword">start</span> transaction;                                                        <span class="hljs-comment">-- 执行1 </span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                                    <span class="hljs-comment">-- 执行3 </span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> money <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span>  <span class="hljs-number">2000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>  <span class="hljs-number">2000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                                    <span class="hljs-comment">-- 执行5：出现脏读 </span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> money <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span>  <span class="hljs-number">1000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>  <span class="hljs-number">2000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9dq1tzlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-9dq1tzlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 开启事务二</span><br><span class="hljs-keyword">start</span> transaction;                                                        <span class="hljs-comment">-- 执行2 </span><br><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;               <span class="hljs-comment">-- 执行4</span><br></code></pre></td></tr></table></div></figure></li><li><p><strong>不可重复读</strong>：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复度</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-9.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-0saxk4lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-0saxk4lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例说明：在事务一未提交时直接查询到了事务二提交后数据结果。</span><br><br><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 设置隔离级别</span><br><span class="hljs-keyword">set</span> session transaction isolation level read committed;<br><br><span class="hljs-comment">-- 开启事务一</span><br><span class="hljs-keyword">start</span> transaction;                                                        <span class="hljs-comment">-- 执行1 </span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                                    <span class="hljs-comment">-- 执行4 </span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> money <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span>  <span class="hljs-number">2000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>  <span class="hljs-number">2000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                                    <span class="hljs-comment">-- 执行6：出现不可重复读</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> money <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span>  <span class="hljs-number">1000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>  <span class="hljs-number">2000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-------+</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-y8aat3lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-y8aat3lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 开启事务二</span><br><span class="hljs-keyword">start</span> transaction;                                                        <span class="hljs-comment">-- 执行2 </span><br><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;               <span class="hljs-comment">-- 执行3</span><br><br><span class="hljs-keyword">commit</span>;                                                                   <span class="hljs-comment">-- 执行5</span><br></code></pre></td></tr></table></div></figure></li><li><p><strong>幻读</strong>：一个事务按照条件查询数据时，没有对应的数据行，但在插入数据时，又发现这行数据已经存在。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-10.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-laub6vlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-laub6vlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例说明：在事务一未提交时查询id=3，显示不存在数据，却在插入数据时显示id=3的数据已存在。</span><br><br><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 设置隔离级别</span><br><span class="hljs-keyword">set</span> session transaction isolation level read committed;<br><br><span class="hljs-comment">-- 开启事务一</span><br><span class="hljs-keyword">start</span> transaction;                                                        <span class="hljs-comment">-- 执行1 </span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;                                       <span class="hljs-comment">-- 执行5</span><br><span class="hljs-comment">-- 查询不到结果，显示数据不存在</span><br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">2000</span>);             <span class="hljs-comment">-- 执行6：出现幻读</span><br><span class="hljs-comment">-- 报错：[23000][1062] Duplicate entry &#x27;3&#x27; for key &#x27;account.PRIMARY&#x27;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xdkvhnlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-xdkvhnlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 开启事务二</span><br><span class="hljs-keyword">start</span> transaction;                                                        <span class="hljs-comment">-- 执行2 </span><br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">2000</span>);             <span class="hljs-comment">-- 执行3</span><br><br><span class="hljs-keyword">commit</span>;                                                                   <span class="hljs-comment">-- 执行4</span><br></code></pre></td></tr></table></div></figure></li></ul><h2 id="2-2-事务隔离级别"><a href="#2-2-事务隔离级别" class="headerlink" title="2.2 事务隔离级别"></a>2.2 事务隔离级别</h2><p><strong>隔离级别</strong></p><ul><li>读未提交 (read uncommitted)： 一个事务可以读取另一个未提交事务的数据</li><li>读提交 (read committed)：一个事务要等另一个事务提交后才能读取数据</li><li>可重复读 (repeatable read)：在开始读取数据（事务开启）时，不再允许修改操作</li><li>串行 (serializable)：是最高的事务隔离级别，事务串行化顺序执行，但性能低且效率低下</li></ul><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=40%>隔离级别</th>            <th style="text-align: center;" width=20%>脏读</th>            <th style="text-align: center;" width=20%>不可重复读</th>            <th style="text-align: center;" width=20%>幻读</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">read uncommitted</td>             <td style="text-align: center;">未解决</td>             <td style="text-align: center;">未解决</td>             <td style="text-align: center;">未解决</td>         </tr>        <tr>            <td style="text-align: center;">read committed</td>             <td style="text-align: center;">解决</td>             <td style="text-align: center;">未解决</td>             <td style="text-align: center;">未解决</td>         </tr>        <tr>            <td style="text-align: center;">repeatable read（默认）</td>             <td style="text-align: center;">解决</td>             <td style="text-align: center;">解决</td>             <td style="text-align: center;">未解决</td>         </tr>        <tr>            <td style="text-align: center;">serializable</td>             <td style="text-align: center;">解决</td>             <td style="text-align: center;">解决</td>             <td style="text-align: center;">解决</td>         </tr>    </body></table><p><strong>语法</strong></p><ul><li><p>查看事务隔离级别</p><p><font class="code-sentence"><code>select @@transaction_isolation;</code></font></p></li><li><p>设置事务隔离级别</p><p><font class="code-sentence"><code>set [session|global] transaction isolation level 隔离级别;</code></font></p></li></ul><p><strong>案例</strong></p><p>相关使用案例见<a href="#3-%E5%B9%B6%E5%8F%91%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98">并发事务问题</a>。</p><h1 id="3-锁分类"><a href="#3-锁分类" class="headerlink" title="3. 锁分类"></a>3. 锁分类</h1><p><strong>按照锁的粒度分类</strong></p><ul><li>全局锁：锁定数据库中的所有表</li><li>表级锁：每次操作锁住整张表</li><li>行级锁：每次操作锁住对应的行数据</li></ul><p>不同存储引擎支持情况如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=40%>存储引擎</th>            <th style="text-align: center;" width=30%>表级锁</th>            <th style="text-align: center;" width=30%>行级锁</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">MyISAM</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">不支持</td>         </tr>        <tr>            <td style="text-align: center;">InnoDB</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">支持</td>         </tr>        <tr>            <td style="text-align: center;">MEMORY</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">不支持</td>         </tr>        <tr>            <td style="text-align: center;">BDB</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">不支持</td>         </tr>    </body></table><p><strong>按照操作类型分类</strong></p><ul><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</li><li>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</li></ul><h1 id="4-全局锁"><a href="#4-全局锁" class="headerlink" title="4. 全局锁"></a>4. 全局锁</h1><p><strong>语法</strong></p><p>全局锁就是对整个数据库实例加锁，后续的 DML 语句， DDL 语句，以及更新操作的事务提交语句都将被阻塞，直至全局锁被释放后再执行。全局锁常用于做全库的逻辑备份。</p><ul><li><p>加全局锁</p><p><font class="code-sentence"><code>flush tables with read lock;</code></font></p></li><li><p>解全局锁</p><p><font class="code-sentence"><code>unlock tables;</code></font></p></li><li><p>数据库备份：非 SQL 语句，而是一个 MySQL 的工具，直接在命令行窗口执行</p><p><font class="code-sentence"><code>mysqldump -h主机地址 -u用户名 -p用户密码 数据库名 &gt; 路径/数据库名.sql;</code></font></p><p>在 InnoDB 引擎中可以在备份时在 <font class="code-word"><code>mysqldump</code></font> 后加上参数 <font class="code-word"><code>--single-transaction</code></font> 完成不加锁的一致性数据备份。</p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fusu5xlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-fusu5xlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 加全局锁</span><br>flush tables <span class="hljs-keyword">with</span> read lock ;                                              <span class="hljs-comment">-- 执行1 </span><br><br><span class="hljs-comment">-- 解全局锁</span><br>unlock tables ;                                                            <span class="hljs-comment">-- 执行5：此时执行3和执行4才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ty2uiklckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ty2uiklckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- DQL语句可以执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                                     <span class="hljs-comment">-- 执行2 </span><br><br><span class="hljs-comment">-- DML和DDL语句均会阻塞，直到解全局锁后才执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">2000</span>);             <span class="hljs-comment">-- 执行3：阻塞</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;王五&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;                              <span class="hljs-comment">-- 执行4：阻塞</span><br></code></pre></td></tr></table></div></figure><h1 id="5-表级锁"><a href="#5-表级锁" class="headerlink" title="5. 表级锁"></a>5. 表级锁</h1><p>每次操作锁住对应的表数据。应用在 MyISAM、InnoDB、BDB 等存储引擎中。</p><h2 id="5-1-表锁"><a href="#5-1-表锁" class="headerlink" title="5.1 表锁"></a>5.1 表锁</h2><p><strong>概述</strong></p><ul><li><p>表共享锁（read lock）：又名读锁，所有客户端均只可读、不可写。上锁客户端执行写会报错，其他客户端执行写会阻塞直至释放锁。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-23.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li><li><p>表排他锁（write lock）：又名写锁，本客户端可读可写，其余客户端均不可读不可写</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-24.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li></ul><p><strong>语法</strong></p><ul><li><p>加锁</p><p><font class="code-sentence"><code>lock tables 表名列表 read/write;</code></font></p></li><li><p>释放锁</p><p><font class="code-sentence"><code>unlock tables;</code></font> 或 客户端断开连接</p></li></ul><p><strong>添加共享锁</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1wnjaalckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-1wnjaalckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 加读锁</span><br>lock tables account read;                                          <span class="hljs-comment">-- 执行1 </span><br><br><span class="hljs-comment">-- 读操作：可执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                             <span class="hljs-comment">-- 执行2</span><br><br><span class="hljs-comment">-- 写操作：不可执行，直接报错</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">2000</span>);     <span class="hljs-comment">-- 执行3</span><br><br><span class="hljs-comment">-- 解读锁</span><br>unlock tables ;                                                    <span class="hljs-comment">-- 执行6：此时执行5才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1ew9k7lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-1ew9k7lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 读操作：可执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                             <span class="hljs-comment">-- 执行4</span><br><br><span class="hljs-comment">-- 写操作：不可执行，会阻塞，直到解读锁后才执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;越七&#x27;</span>, <span class="hljs-number">2000</span>);     <span class="hljs-comment">-- 执行5</span><br></code></pre></td></tr></table></div></figure><p><strong>添加排他锁</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ph33gxlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ph33gxlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 加写锁</span><br>lock tables account write;                                         <span class="hljs-comment">-- 执行1 </span><br><br><span class="hljs-comment">-- 读操作：可执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                             <span class="hljs-comment">-- 执行2</span><br><br><span class="hljs-comment">-- 写操作：可执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">2000</span>);     <span class="hljs-comment">-- 执行3</span><br><br><span class="hljs-comment">-- 解写锁</span><br>unlock tables ;                                                    <span class="hljs-comment">-- 执行6：此时执行4和执行5才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vymqs7lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-vymqs7lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 读操作：不可执行，会阻塞，直到解读锁后才执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                             <span class="hljs-comment">-- 执行4</span><br><br><span class="hljs-comment">-- 写操作：不可执行，会阻塞，直到解读锁后才执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;越七&#x27;</span>, <span class="hljs-number">2000</span>);     <span class="hljs-comment">-- 执行5</span><br></code></pre></td></tr></table></div></figure><h2 id="5-2-元数据锁"><a href="#5-2-元数据锁" class="headerlink" title="5.2 元数据锁"></a>5.2 元数据锁</h2><p><strong>概述</strong></p><p>在 MySQL5.5 中引入了元数据锁（MDL），加锁过程是<font class="word-stress">系统自动控制</font>，在访问一张表的时候会自动加上，避免 DML 与 DDL 冲突。</p><p>查看元数据锁可以使用如下查询命令：</p><p><font class="code-sentence"><code>select object_type,object_schema,object_name,lock_type,lock_duration from performance_schema.metadata_locks;</code></font></p><p><strong>注意</strong></p><ul><li>当对一张表进行增删改查时会自动添加 MDL 共享锁（读锁），当对表结构进行变更操作的时候会自动添加 MDL 排他锁（写锁）。</li><li>开启事务后才能自动加上元数据锁，提交事务后自动释放元数据锁。若为自动提交，则这个过程速度很快几乎看不出来。</li></ul><p><strong>添加锁</strong></p><p>以下事务中的操作会自动添加元数据锁：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=30%>对应 SQL</th>            <th style="text-align: center;" width=30%>自动添加的MDL</th>            <th style="text-align: center;" width=40%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">lock tables 表名列表 read/write</td>             <td style="text-align: center;">shared_read_only/shared_no_read_write</td>             <td style="text-align: center;"></td>         </tr>        <tr>            <td style="text-align: center;">select、select ... lock in share mode</td>             <td style="text-align: center;">shared_read</td>             <td style="text-align: center;">与 shared_read、shared_write 兼容，与 exclusive 互斥</td>         </tr>        <tr>            <td style="text-align: center;">insert、update、delet、select ... for update</td>             <td style="text-align: center;">shared_write</td>             <td style="text-align: center;">与 shared_read、shared_write 兼容，与 exclusive 互斥</td>         </tr>        <tr>            <td style="text-align: center;">alter table</td>             <td style="text-align: center;">exclusive</td>             <td style="text-align: center;">与其他 MDL 都互斥</td></td>         </tr>    </body></table><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7fnzj6lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-7fnzj6lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1</span><br><br><span class="hljs-comment">-- 自动添加 shared_read，正常执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                                      <span class="hljs-comment">-- 执行2</span><br><br><span class="hljs-comment">-- 自动添加 shared_write，正常执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;越七&#x27;</span>, <span class="hljs-number">2000</span>);              <span class="hljs-comment">-- 执行3</span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行7：此时执行6才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qn6ykalckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-qn6ykalckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 自动添加 shared_read，正常执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;                                                      <span class="hljs-comment">-- 执行4</span><br><br><span class="hljs-comment">-- 自动添加 shared_write，正常执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">2000</span>);              <span class="hljs-comment">-- 执行5</span><br><br><span class="hljs-comment">-- 阻塞直到会话一中事务被提交</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> account <span class="hljs-keyword">add</span> age12 <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>;                            <span class="hljs-comment">-- 执行6：阻塞</span><br></code></pre></td></tr></table></div></figure><h2 id="5-3-意向锁"><a href="#5-3-意向锁" class="headerlink" title="5.3 意向锁"></a>5.3 意向锁</h2><p><strong>概述</strong></p><p>为了避免加的表锁与行锁冲突，在 InnoDB 中引入了意向锁，使得表锁不用检查每行数据是否加锁，直接检查意向锁。</p><p>意向锁分为两类：</p><ul><li>意向共享锁（IS）：与意向锁、表锁共享锁（read）兼容，与表锁排他锁（write）互斥</li><li>意向排他锁（IX）：与意向锁兼容，与表锁共享锁（read）、表锁排他锁（write）互斥</li></ul><p>查看意向锁和行锁可以使用如下查询命令：</p><p><font class="code-sentence"><code>select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from performance_schema.data_locks;</code></font></p><p><strong>注意</strong></p><ul><li>当对一张表添加共享行锁时会自动添加意向共享锁（IS），当对一张表进行增删改查、或添加排他行锁时会自动添加意向排他锁（IX）</li><li>开启事务后才能自动加上意向锁，提交事务后才会自动释放意向锁。若为自动提交，则这个过程速度很快几乎看不出来。</li></ul><p><strong>添加共享锁</strong></p><p>事务中 select … lock in share mode 会添加意向共享锁（IS）。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-iqw6x7lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-iqw6x7lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1</span><br><br><span class="hljs-comment">-- 自动添加 IS，正常执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account lock <span class="hljs-keyword">in</span> share mode;                                   <span class="hljs-comment">-- 执行2</span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行6：此时执行5才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-m0jtf7lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-m0jtf7lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;    <br><br><span class="hljs-comment">-- 自动添加 IS，正常执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account lock <span class="hljs-keyword">in</span> share mode ;                                  <span class="hljs-comment">-- 执行3</span><br><br><span class="hljs-comment">-- 正常执行</span><br>lock tables account read;                                                   <span class="hljs-comment">-- 执行4</span><br><br><span class="hljs-comment">-- 阻塞，直到会话一中事务提交</span><br>lock tables account write ;                                                 <span class="hljs-comment">-- 执行5：阻塞</span><br></code></pre></td></tr></table></div></figure><p><strong>添加排他锁</strong></p><p>事务中 insert、update、delete、select … for update 会添加意向排他锁（IX）。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gh7eshlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-gh7eshlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1</span><br><br><span class="hljs-comment">-- 自动添加 IX，正常执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;                              <span class="hljs-comment">-- 执行3</span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行7：此时执行5和执行6才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9ec9p2lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-9ec9p2lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行2</span><br><br><span class="hljs-comment">-- 自动添加 IX，正常执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>                               <span class="hljs-comment">-- 执行4</span><br><br><span class="hljs-comment">-- 阻塞，直到会话一中事务提交</span><br>lock tables account read;                                                   <span class="hljs-comment">-- 执行5：阻塞</span><br><br><span class="hljs-comment">-- 阻塞，直到会话一中事务提交</span><br>lock tables account write ;                                                 <span class="hljs-comment">-- 执行6：阻塞</span><br></code></pre></td></tr></table></div></figure><h1 id="6-行级锁"><a href="#6-行级锁" class="headerlink" title="6. 行级锁"></a>6. 行级锁</h1><p>每次操作锁住对应的行数据。应用在 InnoDB 存储引擎中。</p><p>InnoDB 的行级锁时通过对索引上的<font class="word-stress">索引项</font>加锁来实现的，而不是对记录加锁。</p><h2 id="6-1-行锁"><a href="#6-1-行锁" class="headerlink" title="6.1 行锁"></a>6.1 行锁</h2><p><strong>概述</strong></p><p>锁定单个行记录的锁，防止其他事务对此行进行 <font class="code-word"><code>update</code></font> 和 <font class="code-word"><code>delete</code></font>。在 RC、RR 隔离级别下都支持。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-25.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><p>行锁分为两类：</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获取相同数据集的排他锁。即共享锁与共享锁兼容，与排他锁互斥。</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获取相同数据集的共享锁和排他锁。排他锁与共享锁和排他锁互斥。</li></ul><p>查看意向锁和行锁可以使用如下查询命令：</p><p><font class="code-sentence"><code>select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from performance_schema.data_locks;</code></font></p><p><strong>注意</strong></p><ul><li><p>InnoDB 的行锁是针对于索引加的锁，<font class="word-stress">不通过索引条件检索数据</font>，那么 InnoDB 将<font class="word-stress">对表中所有的记录加锁</font>，锁的类型取决于语句原本的锁类型</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4m8kevlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-4m8kevlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1                            </span><br><br><span class="hljs-comment">-- 不通过检索条件检索数据，则对表中所有记录加共享锁（S）</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> lock <span class="hljs-keyword">in</span> share mode;               <span class="hljs-comment">-- 执行3  </span><br><br><span class="hljs-comment">-- 不通过索引条件检索数据，则对表中所有记录加排他锁（X）</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;                        <span class="hljs-comment">-- 执行4    </span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行6：此时执行5才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qs7b6blckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-qs7b6blckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行2 </span><br><br><span class="hljs-comment">-- 被表锁阻塞，直到会话一中的事务提交</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span>  name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;                              <span class="hljs-comment">-- 执行5 </span><br></code></pre></td></tr></table></div></figure></li><li><p>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</p></li><li><p>开启事务后才能自动加上行锁，提交事务后才会自动释放行锁。若为自动提交，则这个过程速度很快几乎看不出来。</p></li></ul><p><strong>添加锁</strong></p><p>以下事务中的操作会添加行锁：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=30%>对应 SQL</th>            <th style="text-align: center;" width=30%>行锁类型</th>            <th style="text-align: center;" width=40%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">insert</td>             <td style="text-align: center;">排他锁（X）</td>             <td style="text-align: center;">自动加锁</td>         </tr>        <tr>            <td style="text-align: center;">update</td>             <td style="text-align: center;">排他锁（X）</td>             <td style="text-align: center;">自动加锁</td>         </tr>        <tr>            <td style="text-align: center;">delete</td>             <td style="text-align: center;">排他锁（X）</td>             <td style="text-align: center;">自动加锁</td>         </tr>        <tr>            <td style="text-align: center;">select</td>             <td style="text-align: center;">不加任何锁</td>             <td style="text-align: center;"></td>         </tr>        <tr>            <td style="text-align: center;">select ... lock in share mode</td>             <td style="text-align: center;">共享锁（S）</td>             <td style="text-align: center;">需要手动在 select 后面加 lock in share mode</td>         </tr>        <tr>            <td style="text-align: center;">select ... for update</td>             <td style="text-align: center;">排他锁（X）</td>             <td style="text-align: center;">需要手动在 select 后面加 for update</td>         </tr>    </body></table><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-odfnm1lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-odfnm1lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    money <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;余额&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">2000</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1                            </span><br><br><span class="hljs-comment">-- 自动为该行添加共享锁（S），正常执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> lock <span class="hljs-keyword">in</span> share mode;                      <span class="hljs-comment">-- 执行3    </span><br><br><span class="hljs-comment">-- 自动为该行添加排他锁（X），正常执行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, money) <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;越七&#x27;</span>, <span class="hljs-number">2000</span>);              <span class="hljs-comment">-- 执行5    </span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行7：此时执行6才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tync1nlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-tync1nlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行2 </span><br><br><span class="hljs-comment">-- 自动为该行添加共享锁（S），正常执行</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> lock <span class="hljs-keyword">in</span> share mode;                      <span class="hljs-comment">-- 执行4    </span><br><br><span class="hljs-comment">-- 阻塞，直到会话一中事务提交</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span>  name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;                              <span class="hljs-comment">-- 执行6：阻塞</span><br></code></pre></td></tr></table></div></figure><h2 id="6-2-间隙锁和临键锁"><a href="#6-2-间隙锁和临键锁" class="headerlink" title="6.2 间隙锁和临键锁"></a>6.2 间隙锁和临键锁</h2><p><strong>概述</strong></p><ul><li><p>间隙锁：锁定索引记录到前一个记录之间的间隙（不含该记录），防止其他事务在这个间隙进行 <font class="code-word"><code>insert</code></font>，产生幻读。在 RR 隔离级别下支持。 </p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-26.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li><li><p>临键锁：行锁和间隙锁的组合，同时锁住数据，并锁住数据前面的间隙。在 RR 隔离级别下支持。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-27.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li></ul><p><strong>注意</strong></p><ul><li>默认情况下，InnoDB 在 RR 事务隔离级别运行，InnoDB 使用 next-key 锁进行搜索和索引扫描，以防止幻读。</li><li>间隙锁唯一的目的时防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</li><li>开启事务后才能自动加上间隙锁，提交事务后才会自动释放间隙锁。若为自动提交，则这个过程速度很快几乎看不出来。</li></ul><p><strong>添加锁</strong></p><p>以下事务中的操作会添加间隙锁：</p><ul><li><p>索引上的等值查询（唯一索引）：给不存在的记录加行锁时，优化为间隙锁。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ci4o6ylckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ci4o6ylckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">23</span>),(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">33</span>),(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">create</span> index idx_age <span class="hljs-keyword">on</span> account(age);<br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1   </span><br><br><span class="hljs-comment">-- 给不存在的记录加锁，优化为间隙锁，阻止其他事务在id=5到id=8之间插入数据</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;                              <span class="hljs-comment">-- 执行2   </span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行4：此时执行3才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-d5lisdlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-d5lisdlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 在id=5到id=8之间插入数据，阻塞，直到会话一中的事务提交</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, age) <span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">19</span>);                  <span class="hljs-comment">-- 执行3：阻塞</span><br></code></pre></td></tr></table></div></figure></li><li><p>索引上的等值查询（普通索引）：给不存在的记录加行锁时，会访问到不满足条件的的值，next-key lock 退化为间隙锁</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-j9sim5lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-j9sim5lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">23</span>),(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">33</span>),(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">create</span> index idx_age <span class="hljs-keyword">on</span> account(age);<br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1   </span><br><br><span class="hljs-comment">-- 给不存在的记录加锁，优化为age=23为间隙锁，阻止其他事务在age=18到age=23之间插入数据</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;                            <span class="hljs-comment">-- 执行2   </span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行4：此时执行3才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bn3rpzlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-bn3rpzlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 在id=5到id=8之间插入数据，阻塞，直到会话一中的事务提交</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, age) <span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">19</span>);                  <span class="hljs-comment">-- 执行3：阻塞</span><br></code></pre></td></tr></table></div></figure></li><li><p>索引上的等值查询（普通索引）：给已存在的数据添加行锁时，会给该数据加上临键锁，给该数据之后的间隙加上间隙锁。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-v4l170lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-v4l170lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">23</span>),(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">33</span>),(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">create</span> index idx_age <span class="hljs-keyword">on</span> account(age);<br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1   </span><br><br><span class="hljs-comment">-- 给存在的记录加锁，在age=23加入临键锁，在age=23到age=33之间加入间隙锁</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;                            <span class="hljs-comment">-- 执行2   </span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行4：此时执行3才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yxpbiilckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-yxpbiilckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 在id=18到id=33之间插入数据，阻塞，直到会话一中的事务提交</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, age) <span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">19</span>);                  <span class="hljs-comment">-- 执行3：阻塞</span><br></code></pre></td></tr></table></div></figure></li><li><p>索引上的范围查询（唯一索引）：会访问到不满足条件的第一个值为止，并将该值及该值之后的所有数据全部加上临键锁（包括正无穷）</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-a7kpdplckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-a7kpdplckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话一</span><br><br><span class="hljs-comment">-- 数据准备</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> account;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> account(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span><br>) comment <span class="hljs-string">&#x27;账户表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account(id, name, age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">23</span>),(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">33</span>),(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">create</span> index idx_age <span class="hljs-keyword">on</span> account(age);<br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;                                                                      <span class="hljs-comment">-- 执行1   </span><br><br><span class="hljs-comment">-- 在id=5，id=8，id=+∞加上临键锁</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">4</span>;                              <span class="hljs-comment">-- 执行2   </span><br><br><span class="hljs-comment">-- 给id=1，id=5,id=8，id=+∞加上临键锁</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">15</span>;                             <span class="hljs-comment">-- 执行2 </span><br><br><span class="hljs-comment">-- 给id=1，id=5加上临键锁，id=8加上间隙锁</span><br><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;哈哈&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">8</span>;                              <span class="hljs-comment">-- 执行2 </span><br><br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">commit</span> ;                                                                    <span class="hljs-comment">-- 执行4：此时执行3才会执行</span><br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-b298jilckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-b298jilckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 会话二</span><br><br><span class="hljs-comment">-- 在id=18到id=33之间插入数据，阻塞，直到会话一中的事务提交</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> account (id, name, age) <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">19</span>);;                 <span class="hljs-comment">-- 执行3：阻塞</span><br></code></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>04 MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>索引 - MySQL</title>
    <link href="/post/1589765459/"/>
    <url>/post/1589765459/</url>
    
    <content type="html"><![CDATA[<h1 id="1-索引概述"><a href="#1-索引概述" class="headerlink" title="1. 索引概述"></a>1. 索引概述</h1><p>索引是存储引擎用来快速查找记录的一种有序<font class="word-stress">数据结构</font>，不使用索引的情况下，查找是通过全表扫描。</p><p>索引优点：</p><ul><li>提高数据检索的效率，降低数据库的 IO 成本</li><li>通过索引对数据进行排序，降低数据排序的成本，降低 CPU 的消耗</li></ul><p>索引缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引降低了更新表的速度，对表进行增删改时效率更低</li></ul><h1 id="2-索引结构"><a href="#2-索引结构" class="headerlink" title="2. 索引结构"></a>2. 索引结构</h1><h2 id="2-1-分类"><a href="#2-1-分类" class="headerlink" title="2.1 分类"></a>2.1 分类</h2><p>MySQL 的索引是在存储引擎层实现的，不同的存储引擎有不同的结果，主要包含以下几种：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>索引结构</th>            <th style="text-align: center;" width=50%>描述</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">B+Tree 索引</td>             <td style="text-align: center;">最常见的索引类型，大部分引擎都支持 B+ 树索引</td>         </tr>        <tr>            <td style="text-align: center;">Hash 索引</td>             <td style="text-align: center;">底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</td>         </tr>        <tr>            <td style="text-align: center;">R-tree（空间索引）</td>             <td style="text-align: center;">空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>         </tr>        <tr>            <td style="text-align: center;">Full-text（全文索引）</td>             <td style="text-align: center;">是一种通过建立倒排索引，快速匹配文档的方式。类似于 Lucene，Solr，ES</td>         </tr>    </body></table><p>各搜索引擎对索引结构的支持情况如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>索引结构</th>            <th style="text-align: center;" width=25%>InooDB</th>            <th style="text-align: center;" width=25%>MyISAM</th>            <th style="text-align: center;" width=25%>Memory</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">B+Tree 索引</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">支持</td>         </tr>        <tr>            <td style="text-align: center;">Hash 索引</td>             <td style="text-align: center;">不支持</td>             <td style="text-align: center;">不支持</td>             <td style="text-align: center;">支持</td>         </tr>        <tr>            <td style="text-align: center;">R-tree 索引</td>             <td style="text-align: center;">不支持</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">不支持</td>         </tr>        <tr>            <td style="text-align: center;">Full-text 索引</td>             <td style="text-align: center;">5.6版本之后支持</td>             <td style="text-align: center;">支持</td>             <td style="text-align: center;">不支持</td>         </tr>    </body></table><h2 id="2-2-B-Tree"><a href="#2-2-B-Tree" class="headerlink" title="2.2 B-Tree"></a>2.2 B-Tree</h2><p>B-Tree 又叫做B树，是二叉树的一种推广，和平衡二叉树不同的地方在于 B 树是多叉树（平衡多路查找树）。</p><p>最大度数（max-degree）为 m 阶的 B 树，每个节点最多有m 个指针（子树），最多存储 m-1 个 key，并且以升序排列，如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-11.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><p>以5阶 B-Tree 为例演示 B 树增加数据的过程：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-12.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:60%;" /><h2 id="2-3-B-Tree"><a href="#2-3-B-Tree" class="headerlink" title="2.3 B+Tree"></a>2.3 B+Tree</h2><p><strong>经典 B+Tree</strong></p><p>B+Tree 是基于 B-Tree 和叶子节点顺序访问指针进行实现，它具有 B-Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。</p><p>B+Tree 与 B-Tree 的区别如下：</p><ul><li>B+Tree 的所有数据都会出现在叶子节点</li><li>B+Tree 的叶子节点形成一个单向链表</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-13.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><p>以5阶 B+Tree 为例演示 B+树增加数据的过程：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-14.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:60%;" /><p><strong>MySQL 的 B+Tree</strong></p><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的<font class="word-stress">链表指针</font>，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p>相对于其他集中索引结构，MySQL 的 B+Tree 的优势为：</p><ul><li>相对于二叉树，层级更少，搜索效率更高</li><li>相对于 B-Tree，B-Tree 无论是叶子节点还是非叶子节点都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低；而 B+Tree 只有叶子节点保存数据</li><li>相对 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-15.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><h2 id="2-4-Hash"><a href="#2-4-Hash" class="headerlink" title="2.4 Hash"></a>2.4 Hash</h2><p>哈希索引就是采用一定的 hash 算法，将键值换算成新的 hash 值，映射到对应的槽位上，然后存储在 hash 表中。</p><p>Hash 索引特点：</p><ul><li>Hash 索引只能用于对等比较（&#x3D;，in），不支持范围查询（between，&gt;，&lt;，…）</li><li>无法利用索引完成排序操作（hash 表无序）</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-16.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><p>在 MySQL 中，支持 Hash 索引的是 Memory 引擎，而 InnoDB 中具有自适应 Hash 功能，Hash 索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的。</p><h1 id="3-索引分类"><a href="#3-索引分类" class="headerlink" title="3. 索引分类"></a>3. 索引分类</h1><p><strong>根据功能分类</strong></p><p>按照功能划分，索引可以分为以下几类：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>分类</th>            <th style="text-align: center;" width=25%>含义</th>            <th style="text-align: center;" width=25%>特点</th>            <th style="text-align: center;" width=25%>关键字</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">主键索引</td>             <td style="text-align: center;">针对表中主键创建的索引</td>             <td style="text-align: center;">默认自动创建，只能有一个</td>             <td style="text-align: center;">primary</td>         </tr>        <tr>            <td style="text-align: center;">唯一索引</td>             <td style="text-align: center;">避免同一个表中某数据列中的值重复</td>             <td style="text-align: center;">可以有多个</td>             <td style="text-align: center;">unique</td>         </tr>        <tr>            <td style="text-align: center;">常规索引</td>             <td style="text-align: center;">快速定位特定数据</td>             <td style="text-align: center;">可以有多个</td>             <td style="text-align: center;"></td>         </tr>        <tr>            <td style="text-align: center;">全文索引</td>             <td style="text-align: center;">查找文本中的关键词，而不是比较索引中的值</td>             <td style="text-align: center;">可以有多个</td>             <td style="text-align: center;">fulltext</td>         </tr>    </body></table><p><strong>根据存储分类</strong></p><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下几种：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>分类</th>            <th style="text-align: center;" width=50%>含义</th>            <th style="text-align: center;" width=25%>特点</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">聚集索引（Clustered Index）</td>             <td style="text-align: center;">将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</td>             <td style="text-align: center;">必须有，而且只有一个</td>         </tr>        <tr>            <td style="text-align: center;">二级索引（Secondary Index）</td>             <td style="text-align: center;">将数据存储与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>             <td style="text-align: center;">可以存在多个</td>         </tr>    </body></table><p>聚集索引选取规则如下：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一索引作为聚集索引</li><li>如果表没有主键且没有唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-17.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><h1 id="4-索引使用"><a href="#4-索引使用" class="headerlink" title="4. 索引使用"></a>4. 索引使用</h1><h2 id="4-1-索引语法"><a href="#4-1-索引语法" class="headerlink" title="4.1 索引语法"></a>4.1 索引语法</h2><p><strong>语法</strong></p><ul><li><p>创建索引</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xou27ulckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-xou27ulckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 方式1：直接创建索引</span><br><span class="hljs-keyword">create</span> [<span class="hljs-keyword">unique</span><span class="hljs-operator">|</span>fulltext] index 索引名 <span class="hljs-keyword">on</span> 表名 (字段列表);<br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-l6vt66lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-l6vt66lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 方式2：在创建表时创建索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名 (<br>定义字段...<br>    [<span class="hljs-keyword">unique</span><span class="hljs-operator">|</span>fulltext] index 索引名(字段列表)<br>)<br></code></pre></td></tr></table></div></figure><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pl8vz0lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-pl8vz0lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 方式3：在修改表时创建索引</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> [<span class="hljs-keyword">unique</span><span class="hljs-operator">|</span>fulltext] index 索引名(字段列表);<br></code></pre></td></tr></table></div></figure></li><li><p>查看索引</p><p><font class="code-sentence"><code>show index from 表名;</code></font></p></li><li><p>删除索引</p><p><font class="code-sentence"><code>drop index 索引名 on 表名;</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jiqrcolckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-jiqrcolckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 准备数据</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user(<br>    id         <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name       <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>    phone      <span class="hljs-type">char</span>(<span class="hljs-number">11</span>),<br>    email      <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>    profession <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    age        <span class="hljs-type">char</span>(<span class="hljs-number">5</span>),<br>    gender     <span class="hljs-type">int</span>,<br>    status     <span class="hljs-type">int</span>,<br>    createTime datetime<br>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user(name, phone, email, profession, age, gender, status, createTime)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">18012345678</span>, <span class="hljs-string">&#x27;saljdsaiodjoife@126.com&#x27;</span>, <span class="hljs-string">&#x27;土木工程&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;2001-02-02 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">18013895678</span>, <span class="hljs-string">&#x27;asdfasdaa@163.com&#x27;</span>, <span class="hljs-string">&#x27;软件工程&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;2001-03-05 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">18912309008</span>, <span class="hljs-string">&#x27;asasdaoAjdo@qq.com&#x27;</span>, <span class="hljs-string">&#x27;会计&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2001-04-22 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">18924204008</span>, <span class="hljs-string">&#x27;asjsdgaoAjdo@qq.com&#x27;</span>, <span class="hljs-string">&#x27;会计&#x27;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2001-06-28 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;越七&#x27;</span>, <span class="hljs-number">18932552847</span>, <span class="hljs-string">&#x27;sdadAjdo@163.com&#x27;</span>, <span class="hljs-string">&#x27;舞蹈&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2001-09-01 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-number">18932552848</span>, <span class="hljs-string">&#x27;aasdffjdo@qq.com&#x27;</span>, <span class="hljs-string">&#x27;工程造价&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2002-08-01 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;22&#x27;</span>, <span class="hljs-number">18932552849</span>, <span class="hljs-string">&#x27;asjas213o@126.com&#x27;</span>, <span class="hljs-string">&#x27;会计&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2002-01-12 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;33&#x27;</span>, <span class="hljs-number">18932552850</span>, <span class="hljs-string">&#x27;asjagasddsaAjdo@qq.com&#x27;</span>, <span class="hljs-string">&#x27;土木工程&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2001-02-04 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;44&#x27;</span>, <span class="hljs-number">18932552852</span>, <span class="hljs-string">&#x27;q1234wajdo@qq.com&#x27;</span>, <span class="hljs-string">&#x27;土木工程&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2002-03-15 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;55&#x27;</span>, <span class="hljs-number">18932552853</span>, <span class="hljs-string">&#x27;aa22Ajdo@qq.com&#x27;</span>, <span class="hljs-string">&#x27;风景园林&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2003-04-23 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;66&#x27;</span>, <span class="hljs-number">18932552854</span>, <span class="hljs-string">&#x27;asd24@qq.com&#x27;</span>, <span class="hljs-string">&#x27;工程造价&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2003-08-31 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;77&#x27;</span>, <span class="hljs-number">18932552855</span>, <span class="hljs-string">&#x27;dfgd324@qq.com&#x27;</span>, <span class="hljs-string">&#x27;结构风工程&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2004-07-08 00:00:00&#x27;</span>),<br>       (<span class="hljs-string">&#x27;88&#x27;</span>, <span class="hljs-number">18932552856</span>, <span class="hljs-string">&#x27;gdfeaa@qq.com&#x27;</span>, <span class="hljs-string">&#x27;会计&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2004-09-23 00:00:00&#x27;</span>);<br><br><span class="hljs-comment">-- 创建普通索引</span><br><span class="hljs-keyword">create</span> index idx_name <span class="hljs-keyword">on</span> tb_user(name);<br><br><span class="hljs-comment">-- 创建唯一索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index idx_phone <span class="hljs-keyword">on</span> tb_user(phone);<br><br><span class="hljs-comment">-- 创建联合索引</span><br><span class="hljs-keyword">create</span> index idx_pro_age_sta <span class="hljs-keyword">on</span> tb_user(profession, age, status);<br><br><span class="hljs-comment">-- 查看索引</span><br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> tb_user;<br><br><span class="hljs-comment">-- 删除索引</span><br><span class="hljs-keyword">drop</span> index idx_name <span class="hljs-keyword">on</span> tb_user;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-联合索引"><a href="#4-2-联合索引" class="headerlink" title="4.2 联合索引"></a>4.2 联合索引</h2><p>索引包含了多个列，多个列的信息同时存储在索引键值中。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-20.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><p>对于多列联合索引，遵循<font class="word-stress">最左前缀法则</font>。最左（创建联合索引时字段列表的左边）前缀法则指查询从索引的最左列开始，且不跳过索引中的列。</p><p>多列联合索引失效情况：</p><ul><li>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</li><li>如果某一列采用范围查询（&gt; 或 &lt;），则该列之后的字段索引也将失效。改用 &gt;&#x3D;  &lt;&#x3D; between 则不存在该问题</li></ul><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tg0atwlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-tg0atwlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- pro、age、sta索引均生效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;23&#x27;</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;23&#x27;</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-keyword">and</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span>;<br><br><span class="hljs-comment">-- pro、age索引均生效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;23&#x27;</span>;<br><br><span class="hljs-comment">-- 跳过了age列：pro索引生效，sta索引失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br><span class="hljs-comment">-- 未从最左列开始：索引全部失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;23&#x27;</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;6&#x27;</span>;<br><br><span class="hljs-comment">-- age采用了范围查询：pro、age索引生效，sta索引失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;22&#x27;</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;6&#x27;</span> <span class="hljs-keyword">and</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span>;<br></code></pre></td></tr></table></div></figure><h2 id="4-3-前缀索引"><a href="#4-3-前缀索引" class="headerlink" title="4.3 前缀索引"></a>4.3 前缀索引</h2><p>当字段类型为字符串时，有时需要索引很长的字符串，浪费磁盘 IO。可只取字符串的一部分前缀建立索引，提高查询效率。</p><p>在建立索引时，通过在字段后面加上括号限定字符个数：<font class="code-word"><code>字段名(字符个数)</code></font></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6hryt5lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-6hryt5lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- 创建前缀索引，取前5个字符</span><br><span class="hljs-keyword">create</span> index idx_emi_5 <span class="hljs-keyword">on</span> tb_user(email(<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></div></figure><p>前缀查询会在二级索引中查询到符合条件的前缀，获取对应主键后再<font class="word-stress">回表查询获得完整行信息</font>，然后再通过行信息中完整的字符串去比对。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-22.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h2 id="4-4-SQL-提示"><a href="#4-4-SQL-提示" class="headerlink" title="4.4 SQL 提示"></a>4.4 SQL 提示</h2><p><strong>语法</strong></p><p>SQL 提示就是在 SQL 语句中加入一些人为的提示来达到优化操作的目的。</p><ul><li><p>建议系统使用某个索引</p><p><font class="code-sentence"><code>use index (索引名)</code></font></p></li><li><p>忽略某个索引</p><p><font class="code-sentence"><code>ignore index (索引名)</code></font></p></li><li><p>强制系统使用某个索引</p><p><font class="code-sentence"><code>force index (索引名)</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yeifz7lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-yeifz7lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- 建议使用phone的索引</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user force index(idx_phone) <span class="hljs-keyword">where</span> phone <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;18900000000&#x27;</span>;<br><br><span class="hljs-comment">-- 忽略pro_age_sta索引</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user ignore index(idx_pro_age_sta) <span class="hljs-keyword">where</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span>;<br><br><span class="hljs-comment">-- 强制使用phone的索引</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user force index(idx_phone) <span class="hljs-keyword">where</span> phone <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;18900000000&#x27;</span>;<br></code></pre></td></tr></table></div></figure><h2 id="4-5-索引失效"><a href="#4-5-索引失效" class="headerlink" title="4.5 索引失效"></a>4.5 索引失效</h2><p>使用索引时部分操作将导致索引失效：</p><ul><li><p>在索引上进行列运算，索引将失效</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-p7o1g2lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-p7o1g2lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- 进行函数运算，索引失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> <span class="hljs-built_in">substring</span>(phone, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;78&#x27;</span>;<br><br><span class="hljs-comment">-- 进行算数运算，索引失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> id <span class="hljs-operator">+</span> <span class="hljs-number">2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></div></figure></li><li><p>字符串类型字段使用时不加引号，索引将失效</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gviuhflckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-gviuhflckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- 索引生效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> phone <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;18012345678&#x27;</span>;<br><br><span class="hljs-comment">-- 字符串类型字段不加引号，搜索成功，但索引失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> phone <span class="hljs-operator">=</span> <span class="hljs-number">18012345678</span>;<br><br><span class="hljs-comment">-- age字符串类型未加引号：pro索引生效，age、sta索引失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">=</span> <span class="hljs-number">23</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></div></figure></li><li><p>模糊匹配中，头部模糊匹配索引将失效，尾部模糊匹配索引不会失效。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-oqt2zxlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-oqt2zxlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- 尾部模糊匹配，索引生效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;土木%&#x27;</span>;<br><br><span class="hljs-comment">-- 头部模糊匹配，索引失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%工程&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%工%&#x27;</span>;<br><br><span class="hljs-comment">-- pro模糊匹配：pro、age、sta索引全部失效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%工程&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;23&#x27;</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></div></figure></li><li><p>对于 <font class="code-word"><code>or</code></font> 连接的条件，只要有一个条件没有索引，则索引均不会生效</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fdzcptlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-fdzcptlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- 条件均有索引，索引生效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br><br><span class="hljs-comment">-- gender没有索引，索引全部失效（包括name的索引）</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> gender <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></div></figure></li><li><p>如果 MySQL 评估使用索引比使用全表查找还慢，则不使用索引</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-d4ou9olckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-d4ou9olckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- 使用索引</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> phone <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;18900000000&#x27;</span>;<br><br><span class="hljs-comment">-- 未使用索引，而使用全表扫描，因为绝大多数据都满足条件</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> phone <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;18900000000&#x27;</span>;<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="4-6-覆盖和回表"><a href="#4-6-覆盖和回表" class="headerlink" title="4.6 覆盖和回表"></a>4.6 覆盖和回表</h2><p><strong>覆盖查询</strong></p><p>覆盖查询即查询的字段在索引中能够全部找到：</p><ul><li><p>查询聚集索引的字段为覆盖查询，字段信息能直接在聚集索引中查到</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-18.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 40%;" /></li><li><p>查询二级索引的字段为覆盖查询，字段信息能直接在二级索引中查到</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-19.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /></li></ul><p><strong>回表查询</strong></p><p>回表查询即查询的字段在索引中不能够全部找到，只能通过二级索引先查到主键，在根据主键在聚集索引中查到行数据。</p><img src="D:\Study\编程\Java\图片\03 MySQL\03-21.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-eywfsplckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-eywfsplckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- 覆盖查询</span><br><span class="hljs-keyword">select</span> id, profession, age, status <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">23</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;6&#x27;</span> <span class="hljs-keyword">and</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span>;<br><br><span class="hljs-comment">-- 回表查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">23</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;6&#x27;</span> <span class="hljs-keyword">and</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span>;<br></code></pre></td></tr></table></div></figure><h2 id="4-7-单列和联合"><a href="#4-7-单列和联合" class="headerlink" title="4.7 单列和联合"></a>4.7 单列和联合</h2><p><strong>单列索引</strong></p><p>对于多列联合查询，每个列均为单列索引的情况下：</p><ul><li>条件之间用 and 连接：仅其中一个索引生效，MySQL 优化器会评估一个效率最高的索引字段，其他字段的查询则会<font class="word-stress">涉及回表查询</font></li><li>条件之间用 or 连接：每个索引均会生效</li></ul><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-r4nglclckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-r4nglclckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- name和phone均为单列索引，该语句仅使用了phone的索引</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">and</span> phone <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;18012345678&#x27;</span>;<br><br><span class="hljs-comment">-- id和name均为单列索引，该语句同时使用了id和name的索引</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p><strong>联合索引</strong></p><p>对于多列联合查询，在遵循最左前缀法则的情况下索引生效，不会涉及回表查询，优于使用多个单列查询。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ag4udrlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ag4udrlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见索引语法</span><br><br><span class="hljs-comment">-- pro、age、sta的联合索引生效</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> profession <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;土木工程&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;23&#x27;</span> <span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></div></figure><h1 id="5-索引设计原则"><a href="#5-索引设计原则" class="headerlink" title="5. 索引设计原则"></a>5. 索引设计原则</h1><ul><li>针对数据量较大，且查询比较频繁的表建立索引。</li><li>针对常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</li><li>如果时字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</li><li>尽量使用联合索引，减少单列索引，查询时联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</li><li>要控制索引的数量，索引越多对增删改的效率影响就越大。</li><li>如果索引列不能存储 NULL 值，建议在创建表时使用 NOT NULL 约束它。当优化器直到每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询。</li></ul>]]></content>
    
    
    <categories>
      
      <category>04 MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多表查询 - MySQL</title>
    <link href="/post/453331741/"/>
    <url>/post/453331741/</url>
    
    <content type="html"><![CDATA[<h1 id="1-多表关系"><a href="#1-多表关系" class="headerlink" title="1. 多表关系"></a>1. 多表关系</h1><p><strong>一对多</strong></p><p>一对多关系详见<a href="/post/192042733/#4-%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F">外键约束</a>。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-2.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 40%;" /><p><strong>多对多</strong></p><p>实现多对多关系需要建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-3.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ibf6i3lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ibf6i3lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    <span class="hljs-keyword">no</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;学号&#x27;</span><br>) comment <span class="hljs-string">&#x27;学生表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student (name, <span class="hljs-keyword">no</span>)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;200100101&#x27;</span>),<br>       (<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;200100102&#x27;</span>),<br>       (<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;200100103&#x27;</span>),<br>       (<span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-string">&#x27;200100104&#x27;</span>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;课程名称&#x27;</span><br>) comment <span class="hljs-string">&#x27;课程表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course (name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;Java&#x27;</span>), (<span class="hljs-string">&#x27;PHP&#x27;</span>), (<span class="hljs-string">&#x27;MySQL&#x27;</span>), (<span class="hljs-string">&#x27;C++&#x27;</span>);<br><br><span class="hljs-comment">-- 建立中间表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student_course(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    studentId <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;学生ID&#x27;</span>,<br>    courseId <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;课程ID&#x27;</span>,<br>    <span class="hljs-keyword">constraint</span> fk_studentId <span class="hljs-keyword">foreign</span> key (studentId) <span class="hljs-keyword">references</span> student (id),<br>    <span class="hljs-keyword">constraint</span> fk_courseId <span class="hljs-keyword">foreign</span> key (courseId) <span class="hljs-keyword">references</span> course (id)<br>) comment <span class="hljs-string">&#x27;学生-课程中间表&#x27;</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student_course (studentId, courseId) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>), (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>), (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">-- 多表查询</span><br><span class="hljs-keyword">select</span> s.name, c.name <span class="hljs-keyword">from</span> student s, course c, student_course sc <span class="hljs-keyword">where</span> s.id <span class="hljs-operator">=</span> sc.studentId <span class="hljs-keyword">and</span> c.id <span class="hljs-operator">=</span> sc.courseId;<br></code></pre></td></tr></table></div></figure><p><strong>一对一</strong></p><p>一对一关系多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率。</p><p>在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（<font class="code-word"><code>unique</code></font>）。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-4.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lr631mlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-lr631mlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user<br>(<br>    id   <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age  <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户基本信息表&#x27;</span>;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user_edu<br>(<br>    id     <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    degree <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) comment <span class="hljs-string">&#x27;学历&#x27;</span>,<br>    major  <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;专业&#x27;</span>,<br>    userId <span class="hljs-type">int</span> <span class="hljs-keyword">unique</span> comment <span class="hljs-string">&#x27;用户ID&#x27;</span>,<br>    <span class="hljs-keyword">constraint</span> fk_userId <span class="hljs-keyword">foreign</span> key (userId) <span class="hljs-keyword">references</span> tb_user (id)<br>) comment <span class="hljs-string">&#x27;用户教育信息表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user(name, age)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">23</span>),<br>       (<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">25</span>),<br>       (<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">33</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_user_edu(degree, major, userId)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;本科&#x27;</span>, <span class="hljs-string">&#x27;土木工程&#x27;</span>,<span class="hljs-number">1</span> ),<br>       (<span class="hljs-string">&#x27;硕士&#x27;</span>, <span class="hljs-string">&#x27;结构风工程&#x27;</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-string">&#x27;本科&#x27;</span>, <span class="hljs-string">&#x27;电器自动化&#x27;</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></div></figure><h1 id="2-连接查询"><a href="#2-连接查询" class="headerlink" title="2. 连接查询"></a>2. 连接查询</h1><h2 id="2-1-交叉连接"><a href="#2-1-交叉连接" class="headerlink" title="2.1 交叉连接"></a>2.1 交叉连接</h2><p><strong>语法</strong></p><p>交叉连接查询数据时，会给出多表的所有数据的组合情况（笛卡尔积）。即表1有n行，表2有m行，则查询结果为n×m行数据：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-5.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><ul><li><p>交叉连接查询：当为表起了别名后，采用<font class="code-word"><code>表名.字段</code></font>来选定字段时，表名处只能填入别名</p><p><font class="code-sentence"><code>select 字段列表 from 表1 [表1别名], 表2 [表2别名];</code></font></p></li></ul><p><strong>案例</strong></p><p>后续其他章节的查询案例，均使用和下列相同的表格，不再单独列出。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gzfkf8lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-gzfkf8lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 准备数据</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>    id   <span class="hljs-type">int</span> auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;部门名称&#x27;</span><br>) comment <span class="hljs-string">&#x27;部门表&#x27;</span>;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>    id        <span class="hljs-type">int</span> auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    name      <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age       <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    job       <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) comment <span class="hljs-string">&#x27;职位&#x27;</span>,<br>    salary    <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;薪资&#x27;</span>,<br>    entryDate <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>    managerId <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;直属领导ID&#x27;</span>,<br>    deptId   <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;部门ID&#x27;</span>,<br>    <span class="hljs-keyword">constraint</span> fk_emp_deptId <span class="hljs-keyword">foreign</span> key (deptId) <span class="hljs-keyword">references</span> dept (id)<br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept (id, name) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;研发部&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;市场部&#x27;</span>),(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;财务部&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;销售部&#x27;</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;总经办&#x27;</span>), (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;人事部&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp (id, name, age, job, salary, entrydate, managerid, deptId)<br><span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;金庸&#x27;</span>, <span class="hljs-number">66</span>, <span class="hljs-string">&#x27;总裁&#x27;</span>, <span class="hljs-number">20000</span>, <span class="hljs-string">&#x27;2000-01-01&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">5</span>),<br>       (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;张无忌&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;项目经理&#x27;</span>, <span class="hljs-number">12500</span>, <span class="hljs-string">&#x27;2005-12-05&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;杨逍&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-string">&#x27;开发&#x27;</span>, <span class="hljs-number">8400</span>, <span class="hljs-string">&#x27;2000-11-03&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;韦一笑&#x27;</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;开发&#x27;</span>, <span class="hljs-number">11000</span>, <span class="hljs-string">&#x27;2002-02-05&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;常遇春&#x27;</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;开发&#x27;</span>, <span class="hljs-number">10500</span>, <span class="hljs-string">&#x27;2004-09-07&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;小昭&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;程序员&#x27;</span>, <span class="hljs-number">6600</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;灭绝&#x27;</span>, <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;财务总监&#x27;</span>, <span class="hljs-number">8500</span>, <span class="hljs-string">&#x27;2002-09-12&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>),<br>       (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;周芷若&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;会计&#x27;</span>, <span class="hljs-number">48000</span>, <span class="hljs-string">&#x27;2006-06-02&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>),<br>       (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;丁敏君&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;出纳&#x27;</span>, <span class="hljs-number">5250</span>, <span class="hljs-string">&#x27;2009-05-13&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>),<br>       (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;赵敏&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;市场部总监&#x27;</span>, <span class="hljs-number">12500</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;鹿杖客&#x27;</span>, <span class="hljs-number">56</span>, <span class="hljs-string">&#x27;职员&#x27;</span>, <span class="hljs-number">3750</span>, <span class="hljs-string">&#x27;2006-10-03&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;鹤笔翁&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;职员&#x27;</span>, <span class="hljs-number">3750</span>, <span class="hljs-string">&#x27;2007-05-09&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-number">13</span>, <span class="hljs-string">&#x27;方东白&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;职员&#x27;</span>, <span class="hljs-number">5500</span>, <span class="hljs-string">&#x27;2009-02-12&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-number">14</span>, <span class="hljs-string">&#x27;张三丰&#x27;</span>, <span class="hljs-number">88</span>, <span class="hljs-string">&#x27;销售总监&#x27;</span>, <span class="hljs-number">14000</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>),<br>       (<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;俞莲舟&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;销售&#x27;</span>, <span class="hljs-number">4600</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">14</span>, <span class="hljs-number">4</span>),<br>       (<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;宋远桥&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;销售&#x27;</span>, <span class="hljs-number">4600</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">14</span>, <span class="hljs-number">4</span>),<br>       (<span class="hljs-number">17</span>, <span class="hljs-string">&#x27;陈友谅&#x27;</span>, <span class="hljs-number">42</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">2000</span>, <span class="hljs-string">&#x27;2011-10-12&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">-- 交叉查询</span><br><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> emp e, dept d;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-内连接"><a href="#2-2-内连接" class="headerlink" title="2.2 内连接"></a>2.2 内连接</h2><p><strong>语法</strong></p><p>内连接查询的是两张表交集的部分，如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-6.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><ul><li><p>隐式内连接查询</p><p><font class="code-sentence"><code>select 字段列表 from 表1, 表2 where 条件列表;</code></font></p></li><li><p>显式内连接查询</p><p><font class="code-sentence"><code>select 字段列表 from 表1 [inner] join 表2 on 连接条件;</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fqef8flckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-fqef8flckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见交叉连接</span><br><br><span class="hljs-comment">-- 隐式内连接：查询每一个员工的姓名，及关联的部门的名称</span><br><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> emp e, dept d <span class="hljs-keyword">where</span> e.deptId <span class="hljs-operator">=</span> d.id;<br><br><span class="hljs-comment">-- 显式内连接：查询每一个员工的姓名，及关联的部门的名称</span><br><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptId <span class="hljs-operator">=</span> d.id;<br></code></pre></td></tr></table></div></figure><h2 id="2-3-外连接"><a href="#2-3-外连接" class="headerlink" title="2.3 外连接"></a>2.3 外连接</h2><p><strong>语法</strong></p><p>外连接查询的是左&#x2F;右表的所有数据，以及两张表交集部分数据，如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-7.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><ul><li><p>左外连接查询：左指的是 left join 关键字的左边的表</p><p><font class="code-sentence"><code>select 字段列表 from 表1 left [outer] join 表2 on 连接条件;</code></font></p></li><li><p>右外连接查询：右指的是 right join 关键字的右边的表</p><p><font class="code-sentence"><code>select 字段列表 from 表1 right [outer] join 表2 on 连接条件;</code></font></p></li><li><p>满外连接查询：MySQL 不支持</p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gqfnh0lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-gqfnh0lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见交叉连接</span><br><br><span class="hljs-comment">-- 左外连接：查询整个员工表，和其对应的部门信息</span><br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span>, d.name <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptId <span class="hljs-operator">=</span> d.id;<br><br><span class="hljs-comment">-- 右外连接：查询整个部门表，和其对应的员工信息</span><br><span class="hljs-keyword">select</span> d.<span class="hljs-operator">*</span>, e.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptId <span class="hljs-operator">=</span> d.id;<br></code></pre></td></tr></table></div></figure><h2 id="2-4-自连接"><a href="#2-4-自连接" class="headerlink" title="2.4 自连接"></a>2.4 自连接</h2><p><strong>语法</strong></p><p>自连接查询的两张表为<font class="word-stress">同一张表</font>，需要起两个不同的别名，即 <font class="code-word"><code>表1 别名1</code></font> 和 <font class="code-word"><code>表1 别名2</code></font>。可以是内连接查询，也可以是外连接查询。</p><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ccti9mlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ccti9mlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见交叉连接</span><br><br><span class="hljs-comment">-- 自连接+内连接：查询员工姓名及其所属领导的名字</span><br><span class="hljs-keyword">select</span> a.name, b.name <span class="hljs-keyword">from</span> emp a, emp b <span class="hljs-keyword">where</span> a.managerId <span class="hljs-operator">=</span> b.id;<br><br><span class="hljs-comment">-- 自连接+外连接：查询员工姓名及其所属领导姓名，没有领导的员工也需要查询出来</span><br><span class="hljs-keyword">select</span> a.name, b.name <span class="hljs-keyword">from</span> emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> emp b <span class="hljs-keyword">on</span> a.managerId <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></div></figure><h1 id="3-联合查询"><a href="#3-联合查询" class="headerlink" title="3. 联合查询"></a>3. 联合查询</h1><p><strong>语法</strong></p><p>对于 union 联合查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8ctijclckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-8ctijclckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> ...<br><span class="hljs-keyword">union</span> [<span class="hljs-keyword">all</span>]<br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">2</span> ...;<br></code></pre></td></tr></table></div></figure><p><strong>注意</strong></p><ul><li><font class="code-word"><code>union all</code></font> 会将全部的数据直接合并在一起，<font class="code-word"><code>union</code></font> 会对合并之后的数据去重。</li><li>对于联合查询的多张表字段的列数必须保持一致，字段类型也需要保持一致。</li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-borlanlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-borlanlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见交叉连接</span><br><br><span class="hljs-comment">-- 联合查询：将薪资小于5000和年龄小于50的员工都查询出来（不去重）</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&lt;</span> <span class="hljs-number">5000</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">50</span>;<br><br><span class="hljs-comment">-- 联合查询：将薪资小于5000和年龄小于50的员工都查询出来（去重）</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&lt;</span> <span class="hljs-number">5000</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">50</span>;<br></code></pre></td></tr></table></div></figure><h1 id="4-子查询"><a href="#4-子查询" class="headerlink" title="4. 子查询"></a>4. 子查询</h1><h2 id="4-1-子查询概述"><a href="#4-1-子查询概述" class="headerlink" title="4.1 子查询概述"></a>4.1 子查询概述</h2><p>SQL 语句中嵌套 <font class="code-word"><code>select</code></font> 语句，称为嵌套查询，又称为子查询。</p><p>子查询外部的语句可以是 insert&#x2F;update&#x2F;delete&#x2F;select 的任何一个，子查询的位置可以为 where&#x2F;from&#x2F;select 之后。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-i73ir9lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-i73ir9lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 子查询</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> column1 <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> column1 <span class="hljs-keyword">from</span> t2);<br></code></pre></td></tr></table></div></figure><p>根据子查询结果的不同，可以分为以下几类：</p><ul><li>标量子查询：子查询结果为单个值</li><li>列子查询：子查询结果为一列</li><li>行子查询：子查询结果为一行</li><li>表子查询：子查询结果为多行多列</li></ul><h2 id="4-2-标量子查询"><a href="#4-2-标量子查询" class="headerlink" title="4.2 标量子查询"></a>4.2 标量子查询</h2><p>子查询返回的结果是单个值，常用操作符为：&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pdkb28lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-pdkb28lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见交叉连接</span><br><br><span class="hljs-comment">-- 标量子查询：查询销售部的所有员工信息</span><br><span class="hljs-comment">-- a. 查询销售部的部门ID    b. 根据销售部的部门ID，查询员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptId <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;销售部&#x27;</span>);<br><br><span class="hljs-comment">-- 标量子查询：查询在方东白入职之后的员工信息</span><br><span class="hljs-comment">-- a. 查询方东白的入职时间   b. 根据方东白的入职时间，查询在这之后入职的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> entryDate <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> entryDate <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;方东白&#x27;</span>);<br></code></pre></td></tr></table></div></figure><h2 id="4-3-列子查询"><a href="#4-3-列子查询" class="headerlink" title="4.3 列子查询"></a>4.3 列子查询</h2><p><strong>操作符</strong></p><p>子查询返回的结果是一列，常用操作符如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>操作符</th>            <th style="text-align: center;" width=50%>描述</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">in</td>             <td style="text-align: center;">在指定的集合范围之内，多选一</td>         </tr>        <tr>            <td style="text-align: center;">not in</td>             <td style="text-align: center;">不在指定的集合范围之内</td>         </tr>        <tr>            <td style="text-align: center;">any</td>             <td style="text-align: center;">子查询返回列表中，有任意一个满足即可</td>         </tr>        <tr>            <td style="text-align: center;">some</td>             <td style="text-align: center;">与 any 等同</td>         </tr>        <tr>            <td style="text-align: center;">all</td>             <td style="text-align: center;">子查询返回列表的所有值都必须满足</td>         </tr>    </body></table><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3remkblckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-3remkblckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见交叉连接</span><br><br><span class="hljs-comment">-- 列子查询：查询销售部和市场部的所有员工信息</span><br><span class="hljs-comment">-- a. 查询销售部和市场部的部门ID      b. 根据部门ID查询员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptId <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;销售部&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;市场部&#x27;</span>);<br><br><span class="hljs-comment">-- 列子查询：查询比财务部所有人工资都高的员工信息</span><br><span class="hljs-comment">-- a. 查询所有财务部人员工资          b. 根据财务部工资查询比这工资高的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">all</span> (<span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptId <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span>));<br><br><span class="hljs-comment">-- 列子查询：查询比研发部其中任意一人工资高的员工信息</span><br><span class="hljs-comment">-- a. 查询研发部所有人员工资          b. 根据研发部工资查询比其中任意一人高的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">any</span> (<span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptId <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;研发部&#x27;</span>));<br></code></pre></td></tr></table></div></figure><h2 id="4-4-行子查询"><a href="#4-4-行子查询" class="headerlink" title="4.4 行子查询"></a>4.4 行子查询</h2><p>子查询返回的结果是一行，常用的操作符为：&#x3D;、&lt;&gt;、in、not in</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w6mbn8lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-w6mbn8lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见交叉连接</span><br><br><span class="hljs-comment">-- 行子查询：查询与张无忌的薪资及直属领导相同的员工信息</span><br><span class="hljs-comment">-- a. 查询张无忌的薪资和直属领导       b. 查询与其相同的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> (salary, managerId) <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> salary, managerId <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张无忌&#x27;</span>);<br></code></pre></td></tr></table></div></figure><h2 id="4-5-表子查询"><a href="#4-5-表子查询" class="headerlink" title="4.5 表子查询"></a>4.5 表子查询</h2><p>子查询返回结果是多行多列，常用的操作符为：in</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w9qtdklckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-w9qtdklckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例表格见交叉连接</span><br><br><span class="hljs-comment">-- 表子查询：查询与鹿杖客、宋远桥的职位和薪资相同的员工信息</span><br><span class="hljs-comment">-- a. 查询鹿杖客、宋远桥的职位和薪资           b. 查询与其相同的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> (job, salary) <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> job, salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;宋远桥&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;鹿杖客&#x27;</span>);<br><br><span class="hljs-comment">-- 表子查询：查询入职日期是2006-01-01之后的员工信息，及其部门信息</span><br><span class="hljs-comment">-- a. 先查询入职日期是2006-01-01之后的员工    b. 查询这部分员工的部门信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> entryDate <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2006-01-01&#x27;</span>) e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.deptId <span class="hljs-operator">=</span> d.id;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>04 MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>约束 - MySQL</title>
    <link href="/post/192042733/"/>
    <url>/post/192042733/</url>
    
    <content type="html"><![CDATA[<h1 id="1-常见约束"><a href="#1-常见约束" class="headerlink" title="1. 常见约束"></a>1. 常见约束</h1><p><strong>关键字</strong></p><p>约束是作用于表中字段上的规则，用于限制存储在表中的数据，可以在创建表或修改表的时候添加约束。</p><ul><li><p>非空约束：<font class="code-word"><code>not null</code></font></p><p>限制该字段的数据不能为 null，用户添加数据时没有指定值则会报错</p></li><li><p>唯一约束：<font class="code-word"><code>unique</code></font></p><p>保证该字段的所有数据都是唯一且不重复的</p></li><li><p>默认约束：<font class="code-word"><code>default</code></font></p><p>用于指定某列的默认值</p></li><li><p>检查约束：<font class="code-word"><code>check(...)</code></font></p><p>用于保证字段值满足某一个条件</p></li><li><p>零填充约束：<font class="code-word"><code>zerofill</code></font></p><p>插入数据时，当该字段的值的长度小于定义的长度时，会在该值的前面补上相应的0</p></li></ul><p>指定约束名只需要在约束关键字前加上 <font class="code-word"><code>constraint 约束名称</code></font> 即可。</p><p><strong>注意</strong></p><ul><li>zerofill 默认为 <font class="code-word"><code>int(10)</code></font></li><li>当使用 zerofill 时，默认会自动加 <font class="code-word"><code>unsigned</code></font> 属性，数值范围是原值的2倍</li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rg642glckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-rg642glckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在创建表时添加约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user1(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">unique</span> comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> <span class="hljs-keyword">check</span> ( age <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">120</span> ) comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    status <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;1&#x27;</span> comment <span class="hljs-string">&#x27;状态&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表1&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> user1(id, name, age) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;李华&#x27;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> user1(id, name, age, status) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">44</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> user1;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------------+------+------+--------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> idCard     <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> age  <span class="hljs-operator">|</span> status <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------------+------+------+--------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">0000000001</span> <span class="hljs-operator">|</span> 李华 <span class="hljs-operator">|</span>   <span class="hljs-number">23</span> <span class="hljs-operator">|</span> <span class="hljs-number">1</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-number">0000000002</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span>   <span class="hljs-number">44</span> <span class="hljs-operator">|</span> <span class="hljs-number">0</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------------+------+------+--------+</span><br><br><span class="hljs-comment">-- 在修改表时添加约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user2(<br>    id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    status <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;状态&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表2&#x27;</span>;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 modify id <span class="hljs-type">int</span> <span class="hljs-keyword">unique</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 modify name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 modify age <span class="hljs-type">int</span> <span class="hljs-keyword">check</span> ( age <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">120</span> );<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 modify status <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br><br><span class="hljs-comment">-- 删除非空约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 modify name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">-- 删除唯一约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 <span class="hljs-keyword">drop</span> index id;<br><br><span class="hljs-comment">-- 删除检查约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">check</span> user2_chk_1;  <span class="hljs-comment">-- user2_chk_1为默认取的约束名，也可以自己取</span><br><br><span class="hljs-comment">-- 删除默认约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 modify status <span class="hljs-type">char</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">-- 删除零填充约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span> modify id <span class="hljs-type">int</span>;  <br></code></pre></td></tr></table></div></figure><h1 id="2-主键约束"><a href="#2-主键约束" class="headerlink" title="2. 主键约束"></a>2. 主键约束</h1><p><strong>关键字</strong></p><ul><li><p>主键约束：<font class="code-word"><code>primary key</code></font></p><p>主键是一行数据的唯一标识，其数据要求非空且唯一</p></li></ul><p><strong>注意</strong></p><ul><li>每个表最多只允许有一个主键</li><li>当创建主键约束时，系统默认会在所在的列和列组合上建立对应的唯一索引</li><li>对于多列主键，各列数据不能全部重复（唯一性），允许部分重复</li></ul><p><strong>单列主键</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wch50elckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-wch50elckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在建表定义字段时添加主键约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user1(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表1&#x27;</span>;<br><br><span class="hljs-comment">-- 在建表定义字段后指定主键约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user2(<br>    id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key (id)<br>) comment <span class="hljs-string">&#x27;用户表2&#x27;</span>;<br><br><span class="hljs-comment">-- 在修改表时添加主键约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user3(<br>    id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表3&#x27;</span>;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user3 modify id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user3 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key(id);            <span class="hljs-comment">-- 与上一句等效</span><br><br><span class="hljs-comment">-- 删除主键约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user1 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key;<br></code></pre></td></tr></table></div></figure><p><strong>多列主键</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-go71selckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-go71selckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在建表定义字段后添加多列主键约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user1(<br>    id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key (id, name)<br>) comment <span class="hljs-string">&#x27;用户表1&#x27;</span>;<br><br><span class="hljs-comment">-- 在修改表时添加多列主键约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user2(<br>    id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表2&#x27;</span>;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user2 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key (id, name);<br><br><span class="hljs-comment">-- 删除多列主键约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user1 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key;<br></code></pre></td></tr></table></div></figure><h1 id="3-自增长约束"><a href="#3-自增长约束" class="headerlink" title="3. 自增长约束"></a>3. 自增长约束</h1><p><strong>关键字</strong></p><ul><li><p>自增长约束：<font class="code-word"><code>auto_increment</code></font></p><p>当主键定义为自增长后，这个主键的值就不再需要用户输入数据了，而由数据库系统自动赋值，实现主键自增长</p></li></ul><p><strong>注意</strong></p><ul><li><p>一个表中只能有一个字段使用 auto_increment 约束，且该字段必须有唯一索引，以避免序号重复（即为主键或主键的一部分）</p></li><li><p>auto_increment 约束的字段必须具备 <font class="code-word"><code>not null</code></font> 属性。</p></li><li><p>auto_increment 约束的字段只能是整数类型（tinyint、smallint、int、bigint 等）。</p></li><li><p>auto_increment 约束字段的最大值受该字段的数据类型约束，如果达到上限，auto_increment 就会失效。</p></li><li><p>初始值设定规则：</p><ul><li>未设置初始值的情况下，auto_increment 的初始值是1，每新增一条记录，字段值自动加1</li><li>如果第一条数值设置了 auto_increment 约束的字段的值，则该值作为初始值</li></ul></li><li><p>字段值设定规则：</p><ul><li>如果设定了字段的值，则以设定的值为准而非自增的值</li><li>未设置字段的值，或设置为 <font class="code-word"><code>null</code></font>，均取自动计算的自增的值</li><li>如果添加设定了自增字段值的数据后，又添加不指定字段值的数据，则取先前设定的值中最大的值加1</li></ul></li><li><p>删除数据后规则：</p><ul><li><font class="code-word"><code>delete</code></font> 数据之后，不影响自动增长的计数，仍然在原基础上继续加1 </li><li><font class="code-word"><code>truncate</code></font> 数据之后，无论先前设定的初始值是多少，自动增长重新从默认初始值1开始</li></ul></li><li><p>auto_increment 的实现在  <font class="code-word"><code>unique</code></font> 判定之前，当 unique 约束的字段出现重复，数据会添加失败，但 auto_increment 的字段会加1</p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-53ttujlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-53ttujlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加自增长约束，不设置初始值</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user1(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表1&#x27;</span>;<br><br><span class="hljs-comment">-- 添加自增长约束，在建表时并指定初始值</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user2(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span><br>) auto_increment <span class="hljs-operator">=</span> <span class="hljs-number">100</span> comment <span class="hljs-string">&#x27;用户表2&#x27;</span>;<br><br><span class="hljs-comment">-- 添加自增长约束，在修改表时并指定初始值</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user3(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表3&#x27;</span>;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user3 auto_increment <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 添加自增长约束，在添加数据时指定初始值</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user4(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表4&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> user4(id, name) <span class="hljs-keyword">values</span> (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;张三&#x27;</span>);<br><br><span class="hljs-comment">-- auto_increment 执行在 unique 的判定前</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user5(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">unique</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表5&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> user5(name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> user5(name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>);   <span class="hljs-comment">-- 报错，无法添加该数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> user5(name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;李四&#x27;</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> user5;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+</span><br></code></pre></td></tr></table></div></figure><h1 id="4-外键约束"><a href="#4-外键约束" class="headerlink" title="4. 外键约束"></a>4. 外键约束</h1><h2 id="4-1-创建和删除"><a href="#4-1-创建和删除" class="headerlink" title="4.1 创建和删除"></a>4.1 创建和删除</h2><p><strong>关键字</strong></p><ul><li><p>关键字：<font class="code-word"><code>foreign key 字段列表 references 主表名 主键字段列表</code></font></p><p>外键用来建立主表与从表的关联关系，为两个表的数据建立连接，约束两个表中数据的一致性和完整性</p></li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/03-1.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /><p><strong>注意</strong></p><ul><li>主表必须已经存在于数据库中，或者是当前正在创建的表。</li><li>必须为主表定义主键。</li><li>主键数据不能包含空值，但允许在外键数据中出现空值。只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。</li><li>字段列表要求：<ul><li>在主表的表名后面指定列名或列名的组合。这个列或列的组合必须是主表的主键或候选键。</li><li>外键中列的数目必须和主表的主键中列的数目相同。</li><li>外键中列的数据类型必须和主表主键中对应列的数据类型相同。</li></ul></li><li>删除数据要求：<ul><li>主表的数据被从表依赖时，不能删除；否则可以删除</li><li>从表的数据可以随便删除</li></ul></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8zsgkulckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-8zsgkulckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建主表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;部门ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;部门名称&#x27;</span><br>) comment <span class="hljs-string">&#x27;部门表&#x27;</span>;<br><br><span class="hljs-comment">-- 在创建表时添加外键约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>    eId <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;员工ID&#x27;</span>,<br>    eName <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;员工姓名&#x27;</span>,<br>    dId <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;部门ID&#x27;</span><br>    <span class="hljs-keyword">constraint</span> fk_dept_emp_id <span class="hljs-keyword">foreign</span> key (dId) <span class="hljs-keyword">references</span> dept (id)        <span class="hljs-comment">-- 指定约束名</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-comment">-- 在修改表时添加外键约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp2(<br>    eId <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;员工ID&#x27;</span>,<br>    eName <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;员工姓名&#x27;</span>,<br>    dId <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;部门ID&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp2 <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_dept_emp_id <span class="hljs-keyword">foreign</span> key (dId) <span class="hljs-keyword">references</span> dept (id);<br><br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept (id, name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;研发部&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;市场部&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;财务部&#x27;</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp (eId, eName, dId)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-keyword">null</span>);  <span class="hljs-comment">-- 设置了外键的字段数据可以为空，但不允许出现指定主表列以外的数据</span><br>       <br><span class="hljs-comment">-- 删除数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;    <span class="hljs-comment">-- 删除失败</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;    <span class="hljs-comment">-- 删除成功</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> eId <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;    <span class="hljs-comment">-- 删除成功</span><br>       <br><span class="hljs-comment">-- 删除外键约束</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> key fk_dept_emp_id;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-删除更新行为"><a href="#4-2-删除更新行为" class="headerlink" title="4.2 删除更新行为"></a>4.2 删除更新行为</h2><p><strong>关键字</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>行为</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">no action</td>             <td style="text-align: center;">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新</td>         </tr>        <tr>            <td style="text-align: center;">restrict</td>             <td style="text-align: center;">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新</td>         </tr>        <tr>            <td style="text-align: center;">cascade</td>             <td style="text-align: center;">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有,则也删除/更新外键在子表中的记录</td>         </tr>        <tr>            <td style="text-align: center;">set null</td>             <td style="text-align: center;">当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（要求该外键允许取 null）</td>         </tr>        <tr>            <td style="text-align: center;">set default</td>             <td style="text-align: center;">父表有变更时，子表将外键列设置成一个默认的值（lnnodb 不支持）</td>         </tr>    </body></table><p><strong>语法</strong></p><ul><li><p>指定外键删除更新行为</p><p><font class="code-word"><code>foreign key 字段列表 references 主表名 主键字段列表 on update 更新行为 on delete 删除行为</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-609djvlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-609djvlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建主表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;部门ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;部门名称&#x27;</span><br>) comment <span class="hljs-string">&#x27;部门表&#x27;</span>;<br><br><span class="hljs-comment">-- 创建从表，指定外键的删除更新行为</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>    eId <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key comment <span class="hljs-string">&#x27;员工ID&#x27;</span>,<br>    eName <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;员工姓名&#x27;</span>,<br>    dId <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;部门ID&#x27;</span>,<br>    <span class="hljs-keyword">constraint</span> fk_dept_emp_id <span class="hljs-keyword">foreign</span> key (dId) <span class="hljs-keyword">references</span> dept (id) <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> cascade <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> cascade<br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept (id, name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;研发部&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;市场部&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;财务部&#x27;</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp (eId, eName, dId)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">1</span>),<br>       (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">2</span>),<br>       (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">-- 修改与从表有关联的主表数据</span><br><span class="hljs-keyword">update</span> dept <span class="hljs-keyword">set</span> id <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+------+</span><br><span class="hljs-operator">|</span> eId <span class="hljs-operator">|</span> eName <span class="hljs-operator">|</span> dId  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三  <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四  <span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span>    <span class="hljs-comment">-- cascade：从表数据随主表更改</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王五  <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 洪六  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+------+</span><br><br><span class="hljs-comment">-- 删除与从表有关联的主表数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+------+</span><br><span class="hljs-operator">|</span> eId <span class="hljs-operator">|</span> eName <span class="hljs-operator">|</span> dId  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三  <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王五  <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 洪六  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+------+</span><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>04 MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础语句 - MySQL</title>
    <link href="/post/2461093548/"/>
    <url>/post/2461093548/</url>
    
    <content type="html"><![CDATA[<h1 id="1-DDL-语句"><a href="#1-DDL-语句" class="headerlink" title="1. DDL 语句"></a>1. DDL 语句</h1><h2 id="1-1-数据库操作"><a href="#1-1-数据库操作" class="headerlink" title="1.1 数据库操作"></a>1.1 数据库操作</h2><p><strong>查询</strong></p><ul><li><p>查询所有数据库</p><p><font class="code-sentence"><code>show databases;</code></font></p></li><li><p>查询当前数据库</p><p><font class="code-sentence"><code>select database();</code></font></p></li></ul><p><strong>创建</strong></p><ul><li><p>创建数据库 [数据库若不存在则创建，存在则不创建] [指定字符集] [指定排序规则]</p><p><font class="code-sentence"><code>create database [if not exists] 数据库名 [default charset 字符集] [collate 排序规则];</code></font></p></li></ul><p><strong>删除</strong></p><ul><li><p>删除数据库 [数据库若存在则删除，不存在则不删除]</p><p><font class="code-sentence"><code>drop database [if exists] 数据库名;</code></font></p></li></ul><p><strong>使用</strong></p><ul><li><p>使用数据库</p><p><font class="code-sentence"><code>use 数据库名;</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7agasclckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-7agasclckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询所有数据库</span><br><span class="hljs-keyword">show</span> databases;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> Database           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> information_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql              <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> performance_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sakila             <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sys                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> world              <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><br><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">create</span> database test01;                             <br><span class="hljs-keyword">create</span> database if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> test02;<br><span class="hljs-keyword">create</span> database test03 <span class="hljs-keyword">default</span> charset utf8mb4; <br><br><span class="hljs-comment">-- 删除数据库</span><br><span class="hljs-keyword">drop</span> database test03;<br><br><span class="hljs-comment">-- 使用并查询当前数据库</span><br>use test01;<br><span class="hljs-keyword">select</span> database();<br><span class="hljs-operator">+</span><span class="hljs-comment">------------+</span><br><span class="hljs-operator">|</span> database() <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------+</span><br><span class="hljs-operator">|</span> test01     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------+</span><br></code></pre></td></tr></table></div></figure><h2 id="1-2-表操作"><a href="#1-2-表操作" class="headerlink" title="1.2 表操作"></a>1.2 表操作</h2><p><strong>查询</strong></p><ul><li><p>查询当前数据库所有表</p><p><font class="code-sentence"><code>show tables;</code></font></p></li><li><p>查询表结构</p><p><font class="code-sentence"><code>desc 表名;</code></font></p></li><li><p>查询指定表的建表语句</p><p><font class="code-sentence"><code>show create table 表名;</code></font></p></li></ul><p><strong>创建</strong></p><ul><li><p>创建表</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ds2ea3lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ds2ea3lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名<br>(<br>    字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型 [comment 字段<span class="hljs-number">1</span>注释],<br>    字段<span class="hljs-number">2</span> 字段<span class="hljs-number">2</span>类型 [comment 字段<span class="hljs-number">2</span>注释],<br>    ...<br>    字段n 字段n类型 [comment 字段n注释]<br>) [comment 表注释];<br></code></pre></td></tr></table></div></figure></li></ul><p><strong>修改</strong></p><ul><li><p>添加字段</p><p><font class="code-sentence"><code>alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</code></font></p></li><li><p>修改字段数据类型</p><p><font class="code-sentence"><code>alter table 表名 modify 字段名 类型(长度);</code></font></p></li><li><p>修改字段名和字段类型</p><p><font class="code-sentence"><code>alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</code></font></p></li><li><p>删除字段</p><p><font class="code-sentence"><code>alter table 表名 drop 字段名;</code></font></p></li><li><p>修改表名</p><p><font class="code-sentence"><code>alter table 旧表名 rename to 新表名;</code></font></p></li></ul><p><strong>删除</strong></p><ul><li><p>删除表</p><p><font class="code-sentence"><code>drop table [if exists] 表名;</code></font></p></li><li><p>删除指定表，并重新创建该表（相当于清空数据）</p><p><font class="code-sentence"><code>truncate table 表名;</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nn5tk9lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-nn5tk9lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user<br>(<br>id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br><span class="hljs-comment">-- 查询当前数据库所有表</span><br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> Tables_in_test01 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> tb_user          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><br><span class="hljs-comment">-- 查询表结构</span><br><span class="hljs-keyword">desc</span> tb_user;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type        <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> id    <span class="hljs-operator">|</span> <span class="hljs-type">int</span>         <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> name  <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><br><span class="hljs-comment">-- 查询指定表的建表语句</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">Table</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">Create</span> <span class="hljs-keyword">Table</span>                                                           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> tb_user <span class="hljs-operator">|</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_user` (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;编号&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;用户表&#x27;</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+------------------------------------------------------------------------+</span><br><br><span class="hljs-comment">-- 添加字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_user <span class="hljs-keyword">add</span> age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>;<br><br><span class="hljs-comment">-- 修改字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_user modify age <span class="hljs-type">smallint</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_user change id newId <span class="hljs-type">bigint</span> comment <span class="hljs-string">&#x27;新工号&#x27;</span>;<br><span class="hljs-keyword">desc</span> tb_user;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type        <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> newId <span class="hljs-operator">|</span> <span class="hljs-type">bigint</span>      <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> name  <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> age   <span class="hljs-operator">|</span> <span class="hljs-type">smallint</span>    <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><br><span class="hljs-comment">-- 删除字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_user <span class="hljs-keyword">drop</span> newId;<br><br><span class="hljs-comment">-- 修改表名</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_user rename <span class="hljs-keyword">to</span> tb_employee;<br><br><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> tb_employee;<br><br><span class="hljs-comment">-- 删除并重新创建表</span><br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> tb_employee;<br><span class="hljs-keyword">desc</span> tb_employee;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type        <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> id    <span class="hljs-operator">|</span> <span class="hljs-type">int</span>         <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> name  <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br></code></pre></td></tr></table></div></figure><h1 id="2-DML-语句"><a href="#2-DML-语句" class="headerlink" title="2. DML 语句"></a>2. DML 语句</h1><h2 id="2-1-添加数据"><a href="#2-1-添加数据" class="headerlink" title="2.1 添加数据"></a>2.1 添加数据</h2><p><strong>语法</strong></p><ul><li><p>给指定字段添加数据</p><p><font class="code-sentence"><code>insert into 表名 (字段名1, 字段名2, ...) values (值1, 值2, ...);</code></font></p></li><li><p>给全部字段添加数据</p><p><font class="code-sentence"><code>insert into 表名 values (值1, 值2, ...);</code></font></p></li><li><p>批量添加数据</p><p><font class="code-sentence"><code>insert into 表名 (字段名1, 字段名2, ...) values (值1, 值2, ...), (值1, 值2, ...), ...;</code></font></p><p><font class="code-sentence"><code>insert into 表名 values (值1, 值2, ...), (值1, 值2, ...), ...;</code></font></p></li></ul><p><strong>注意</strong></p><ul><li>插入数据时，指定的字段顺序需要与值得顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1za1qvlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-1za1qvlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 表格employee</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type        <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> id    <span class="hljs-operator">|</span> <span class="hljs-type">int</span>         <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> name  <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> team  <span class="hljs-operator">|</span> <span class="hljs-type">int</span>         <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+------+-----+---------+-------+</span><br><br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employee(id, name, team) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employee <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employee(id, name,team) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> team <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 洪六 <span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br></code></pre></td></tr></table></div></figure><h2 id="2-2-修改数据"><a href="#2-2-修改数据" class="headerlink" title="2.2 修改数据"></a>2.2 修改数据</h2><p><strong>语法</strong></p><ul><li><p>修改指定数据</p><p><font class="code-sentence"><code>update 表名 set 字段名1 = 值1, 字段名2 = 值2, ... [where 条件];</code></font></p></li></ul><p><strong>注意</strong></p><ul><li>若有修改条件，则只修改符合条件的数据。如果没有条件，则会修改整张表的所有数据。</li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ctpti3lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ctpti3lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 表格employee</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> team <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 洪六 <span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><br><span class="hljs-comment">-- 修改数据</span><br><span class="hljs-keyword">update</span> employee <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;石二&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">update</span> employee <span class="hljs-keyword">set</span> team <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> team <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 石二 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 洪六 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br></code></pre></td></tr></table></div></figure><h2 id="2-3-删除数据"><a href="#2-3-删除数据" class="headerlink" title="2.3 删除数据"></a>2.3 删除数据</h2><p><strong>语法</strong></p><ul><li><p>删除指定数据</p><p><font class="code-sentence"><code>delete from 表名 [where 条件];</code></font></p></li><li><p>删除指定字段下的所有数据</p><p><font class="code-sentence"><code>updata 表名 set 字段名 = null;</code></font></p></li><li><p>删除指定表，并重新创建该表（相当于清空数据）</p><p><font class="code-sentence"><code>truncate table 表名;</code></font></p></li></ul><p><strong>注意</strong></p><ul><li>若有删除条件，则只删除符合条件的数据。如果没有条件，则会删除整张表的所有数据。</li><li><font class="code-word"><code>delete</code></font> 语句不能删除某一个字段的值，可以用 <font class="code-word"><code>update</code></font> 进行删除。</li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lqed7tlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-lqed7tlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 表格employee</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> team <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">null</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 洪六 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><br><span class="hljs-comment">-- 删除数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> name <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> team <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><br><span class="hljs-comment">-- 删除字段下的所有值</span><br><span class="hljs-keyword">update</span> employee <span class="hljs-keyword">set</span> team <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> team <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+------+</span><br><br><span class="hljs-comment">-- 删除所有数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> employee;<br></code></pre></td></tr></table></div></figure><h1 id="3-DQL-语句"><a href="#3-DQL-语句" class="headerlink" title="3. DQL 语句"></a>3. DQL 语句</h1><p><strong>语法</strong></p><p>DQL 是数据查询语言，用来查询数据库中表的记录。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xz93i1lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-xz93i1lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>字段列表            <span class="hljs-comment">-- 执行顺序5</span><br><span class="hljs-keyword">from</span><br>表名列表            <span class="hljs-comment">-- 执行顺序1</span><br>[<span class="hljs-keyword">where</span><br>条件列表]           <span class="hljs-comment">-- 执行顺序2</span><br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>分组字段列表]        <span class="hljs-comment">-- 执行顺序3，从此条开始后可以使用别名</span><br>[<span class="hljs-keyword">having</span><br>分组后条件列表]      <span class="hljs-comment">-- 执行顺序4</span><br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>排序字段列表]        <span class="hljs-comment">-- 执行顺序6    </span><br>[limit<br>分页参数]           <span class="hljs-comment">-- 执行顺序7</span><br></code></pre></td></tr></table></div></figure><p><strong>案例</strong></p><p>后续给出的所有查询案例中，所使用的数据库表格如下所示。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3z91hjlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-3z91hjlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表格</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee<br>(<br>    id              <span class="hljs-type">int</span>                 comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>    workNo          <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)         comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name            <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)         comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    gender          <span class="hljs-type">char</span>                comment <span class="hljs-string">&#x27;性别&#x27;</span>,<br>    age             tinyint unsigned    comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    idCard          <span class="hljs-type">char</span>(<span class="hljs-number">18</span>)            comment <span class="hljs-string">&#x27;身份证号&#x27;</span>,<br>    workAddress     <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>)         comment <span class="hljs-string">&#x27;工作地址&#x27;</span>,<br>    entryDate       <span class="hljs-type">date</span>                comment <span class="hljs-string">&#x27;入职时间&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employee (id, workNo, name, gender, age, idCard, workAddress, entryDate)<br><span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;老一&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;123456789012345678&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01&#x27;</span>),<br>       (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;老二&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;123456789012345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2005-09-01&#x27;</span>),<br>       (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;老三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;123456789712345670&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2005-08-01&#x27;</span>),<br>       (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;老四&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;123456757123845670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2009-12-01&#x27;</span>),<br>       (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;老五&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;123456769012345678&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2007-07-01&#x27;</span>),<br>       (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;老六&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;12345678931234567X&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2006-01-01&#x27;</span>),<br>       (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;老七&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;123456789212345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2005-05-01&#x27;</span>),<br>       (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;老八&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;123456157123645670&#x27;</span>, <span class="hljs-string">&#x27;天津&#x27;</span>, <span class="hljs-string">&#x27;2015-05-01&#x27;</span>),<br>       (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;老九&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;123156789012345678&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2010-04-01&#x27;</span>),<br>       (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;老十&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">53</span>, <span class="hljs-string">&#x27;123456789012345670&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2011-01-01&#x27;</span>),<br>       (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;老十一&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;123567897123465670&#x27;</span>, <span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-string">&#x27;2015-05-01&#x27;</span>),<br>       (<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27;老十二&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">32</span>, <span class="hljs-string">&#x27;123446757152345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2004-02-01&#x27;</span>),<br>       (<span class="hljs-number">13</span>, <span class="hljs-string">&#x27;13&#x27;</span>, <span class="hljs-string">&#x27;老十三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">88</span>, <span class="hljs-string">&#x27;123656789012345670&#x27;</span>, <span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-string">&#x27;2020-11-01&#x27;</span>),<br>       (<span class="hljs-number">14</span>, <span class="hljs-string">&#x27;14&#x27;</span>, <span class="hljs-string">&#x27;老十四&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">65</span>, <span class="hljs-string">&#x27;123456719012345670&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-string">&#x27;2019-05-01&#x27;</span>),<br>       (<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;15&#x27;</span>, <span class="hljs-string">&#x27;老十五&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">70</span>, <span class="hljs-string">&#x27;12345674971234567X&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-string">&#x27;2018-04-01&#x27;</span>),<br>       (<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-string">&#x27;老十六&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2012-06-01&#x27;</span>);<br></code></pre></td></tr></table></div></figure><h2 id="3-1-基础查询"><a href="#3-1-基础查询" class="headerlink" title="3.1 基础查询"></a>3.1 基础查询</h2><p><strong>语法</strong></p><ul><li><p>查询多个字段 [设置字段别名，其中as可以省略]</p><p><font class="code-sentence"><code>select 字段1 [as 别名1], 字段2 [as 别名2], ... from 表名;</code></font></p></li><li><p>查询所有字段</p><p><font class="code-sentence"><code>select * from 表名;</code></font></p></li><li><p>去除重复记录</p><p><font class="code-sentence"><code>select distinct 字段列表 from 表名;</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xj8r9ilckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-xj8r9ilckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询指定字段，并给所有人的工号加上100</span><br><span class="hljs-keyword">select</span> name, workNo <span class="hljs-operator">+</span> <span class="hljs-number">100</span>, age <span class="hljs-keyword">from</span> employee;<br><br><span class="hljs-comment">-- 查询所有字段</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee;<br><br><span class="hljs-comment">-- 查询所有员工的工作地址，起别名</span><br><span class="hljs-keyword">select</span> workAddress <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> employee;<br><br><span class="hljs-comment">-- 查询员工的工作地址，去除重复记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> workAddress <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> employee;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> 工作地址 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> 北京     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 上海     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 天津     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 江苏     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 西安     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br></code></pre></td></tr></table></div></figure><h2 id="3-2-条件查询"><a href="#3-2-条件查询" class="headerlink" title="3.2 条件查询"></a>3.2 条件查询</h2><p><strong>语法</strong></p><ul><li><p>根据指定条件查询</p><p><font class="code-sentence"><code>select 字段列表 from 表名 where 条件列表;</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uzujpblckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-uzujpblckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询年龄等于88的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br><br><span class="hljs-comment">-- 查询没有身份证号的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> idCard <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-comment">-- 查询性别为女且年龄小于25的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">25</span>;<br><br><span class="hljs-comment">-- 查询年龄在15-20的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">15</span> <span class="hljs-keyword">and</span> <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">-- 查询年龄等于18或20或40的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> age <span class="hljs-keyword">in</span>(<span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">40</span>);<br><br><span class="hljs-comment">-- 查询姓名为两个字的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;__&#x27;</span>;<br><br><span class="hljs-comment">-- 查询身份证号最后一位是X的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> idCard <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%X&#x27;</span>;<br></code></pre></td></tr></table></div></figure><h2 id="3-3-分组查询"><a href="#3-3-分组查询" class="headerlink" title="3.3 分组查询"></a>3.3 分组查询</h2><p><strong>语法</strong></p><ul><li><p>根据分组查询</p><p><font class="code-sentence"><code>select 字段列表 from 表名 [where 条件列表] group by 分组字段名 [having 分组后过滤条件];</code></font></p></li></ul><p><strong>注意</strong></p><ul><li><font class="code-word"><code>where</code></font> 和 <font class="code-word"><code>having</code></font> 的条件的区别如下：<ul><li>执行时机不同：where 是分组之前进行过滤，不满足 where 条件的不参与分组；而 having 是分组之后对结果进行过滤。</li><li>判读条件不同：where 不能对聚合函数进行判断，而 having 可以。</li></ul></li><li>分组查询的执行顺序为：<font class="word-stress">where → group by → 聚合函数 → having</font></li><li>分组后查询非分组字段，只会显示该组第一个数据</li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vawi7llckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-vawi7llckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 根据性别分组，分别统计男性员工和女性员工的数量</span><br><span class="hljs-keyword">select</span> gender, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><br><span class="hljs-comment">-- 根据性别分组，分别统计男性员工和女性员工的平均年龄</span><br><span class="hljs-keyword">select</span> gender, <span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><br><span class="hljs-comment">-- 查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="hljs-keyword">select</span> workAddress, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">45</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> workAddress <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">-- 使用别名</span><br><span class="hljs-keyword">select</span> workAddress, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> addCon <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">45</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> workAddress <span class="hljs-keyword">having</span> addCon <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">-- 根据性别分组，查询非分组字段name</span><br><span class="hljs-keyword">select</span> gender, name <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+------+</span><br><span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+------+</span><br><span class="hljs-operator">|</span> 女     <span class="hljs-operator">|</span> 老一 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 男     <span class="hljs-operator">|</span> 老二 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+------+</span><br></code></pre></td></tr></table></div></figure><h2 id="3-4-排序查询"><a href="#3-4-排序查询" class="headerlink" title="3.4 排序查询"></a>3.4 排序查询</h2><p><strong>语法</strong></p><ul><li><p>根据指定顺序查询</p><p><font class="code-sentence"><code>select 字段列表 from 表名 order by 字段1 排序方式1, 字段2 排序方式2...;</code></font></p></li></ul><p><strong>注意</strong></p><ul><li>排序方式：asc (升序，默认值)，desc (降序)</li><li>对于多字段排序，只有第一个字段值相同时，才会根据第二个字段进行排序</li><li><font class="code-word"><code>null</code></font> 值在排序时会默认为最小值</li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ddpw0klckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ddpw0klckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 根据年龄对员工进行升序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span>;<br><br><span class="hljs-comment">-- 根据年龄对员工进行升序排序，年龄相同再按照入职时间进行降序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span> , entryDate <span class="hljs-keyword">desc</span> ;<br></code></pre></td></tr></table></div></figure><h2 id="3-5-分页查询"><a href="#3-5-分页查询" class="headerlink" title="3.5 分页查询"></a>3.5 分页查询</h2><p><strong>语法</strong></p><ul><li><p>分页查询数据</p><p><font class="code-sentence"><code>select 字段列表 from 表名 limit 起始索引, 查询记录数;</code></font></p></li></ul><p><strong>注意</strong></p><ul><li>起始索引从0开始，起始索引 &#x3D; (查询页码 - 1) * 每页显示记录数</li><li>不同的数据库中分页查询的实现不一样，MySQL 中是 <font class="code-word"><code>limit</code></font></li><li>如果查询的是第一页的数据，起始索引可以省略，直接简写为<font class="code-sentence"><code>limit 查询记录数</code></font></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3oltk0lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-3oltk0lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询第1页员工数据，每页展示10条记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee limit <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">-- 查询第2页员工数据，每页展示10条记录 ---&gt; (2-1)*10</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee limit <span class="hljs-number">10</span>, <span class="hljs-number">10</span>;   <span class="hljs-comment">-- 只显示了最后6条数据</span><br></code></pre></td></tr></table></div></figure><h1 id="4-DCL-语句"><a href="#4-DCL-语句" class="headerlink" title="4. DCL 语句"></a>4. DCL 语句</h1><h2 id="4-1-管理用户"><a href="#4-1-管理用户" class="headerlink" title="4.1 管理用户"></a>4.1 管理用户</h2><p><strong>语法</strong></p><ul><li><p>查询用户</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9msi47lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-9msi47lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户数据均存储在 mysql 数据库的 user 表中</span><br>use mysql;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></div></figure></li><li><p>创建用户</p><p><font class="code-sentence"><code>creat user &#39;用户名&#39;@&#39;主机名&#39; identified by &#39;密码&#39;;</code></font></p></li><li><p>修改用户密码</p><p><font class="code-sentence"><code>alter user &#39;用户名&#39;@&#39;主机名&#39; indentified with mysql_native_password by &#39;新密码&#39;;</code></font></p></li><li><p>删除用户</p><p><font class="code-sentence"><code>drop user &#39;用户名&#39;@&#39;主机名&#39;;</code></font></p></li></ul><p><strong>注意</strong></p><ul><li>可以使用 <font class="code-word"><code>%</code></font> 通配符代表任意主机</li><li>同一个主机名下用户名不允许重复，不同主机名下用户名允许重复</li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-m88uw5lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-m88uw5lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建用户demoUser，只能够在当前主机localhost访问，密码123456</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;demoUser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">-- 创建用户kingUser，能在任意主机</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;kingUser&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">-- 修改用户demoUser的密码为1234</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;demoUser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified <span class="hljs-keyword">with</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;1234&#x27;</span>;<br><br><span class="hljs-comment">-- 删除kingUser用户</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;kingUser&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-权限控制"><a href="#4-2-权限控制" class="headerlink" title="4.2 权限控制"></a>4.2 权限控制</h2><p><strong>权限</strong></p><p>常用的权限如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>权限</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">all,all privileges</td>             <td style="text-align: center;">所有权限</td>         </tr>        <tr>            <td style="text-align: center;">select</td>             <td style="text-align: center;">查询权限</td>         </tr>        <tr>            <td style="text-align: center;">insert</td>             <td style="text-align: center;">插入数据</td>         </tr>        <tr>            <td style="text-align: center;">update</td>             <td style="text-align: center;">修改数据</td>         </tr>        <tr>            <td style="text-align: center;">delete</td>             <td style="text-align: center;">删除数据</td>         </tr>        <tr>            <td style="text-align: center;">alter</td>             <td style="text-align: center;">修改表</td>         </tr>        <tr>            <td style="text-align: center;">drop</td>             <td style="text-align: center;">删除数据库/表/视图</td>         </tr>        <tr>            <td style="text-align: center;">create</td>             <td style="text-align: center;">创建数据库/表</td>         </tr>    </body></table><p><strong>语法</strong></p><ul><li><p>查询权限</p><p><font class="code-sentence"><code>show grants for &#39;用户名&#39;@&#39;主机名&#39;;</code></font></p></li><li><p>授予权限</p><p><font class="code-sentence"><code>grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</code></font></p></li><li><p>撤销权限</p><p><font class="code-sentence"><code>revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gc9p85lckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-gc9p85lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询权限</span><br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;demoUser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-comment">-- 给demoUser授予数据库test01中employee表的增删权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">insert</span>, <span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> test01.employee <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;demoUser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-comment">-- 给demoUser授予数据库test02中所有表的所有权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> test02.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;demoUser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-comment">-- 撤销demoUser在所有数据库的所有表中的所有权限</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;demoUser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>04 MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础语法 - MySQL</title>
    <link href="/post/3722561613/"/>
    <url>/post/3722561613/</url>
    
    <content type="html"><![CDATA[<h1 id="1-通用语法"><a href="#1-通用语法" class="headerlink" title="1. 通用语法"></a>1. 通用语法</h1><p>SQL 语句可以分为以下四类：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>分类</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">DDL</td>             <td style="text-align: center;">数据定义语言，用来定义数据库对象（数据库、表、字段）</td>         </tr>        <tr>            <td style="text-align: center;">DML</td>             <td style="text-align: center;">数据操作语言，用来对数据库表中的数据进行增删改查</td>         </tr>        <tr>            <td style="text-align: center;">DQL</td>             <td style="text-align: center;">数据查询语言，用来查询数据库中表的记录</td>         </tr>        <tr>            <td style="text-align: center;">DCL</td>             <td style="text-align: center;">数据控制语言，用来创建数据库用户、控制数据库的访问权限</td>         </tr>    </body></table><p>SQL 的通用语法如下：</p><ul><li>SQL 语句可以单行或多行书写，以分号结尾。</li><li>SQL 语句可以使用空格&#x2F;缩进来增强语句的可读性。</li><li>注释：<ul><li>单行注释：<font class="code-sentence"><code>--注释内容</code></font>或<font class="code-sentence"><code>#注释内容</code></font></li><li>多行注释：<font class="code-sentence"><code>/*注释内容*/</code></font></li></ul></li><li>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写</li></ul><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h1><h2 id="2-1-数值类型"><a href="#2-1-数值类型" class="headerlink" title="2.1 数值类型"></a>2.1 数值类型</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=10%>类型</th>            <th style="text-align: center;" width=10%>大小</th>            <th style="text-align: center;" width=35%>有符号(signed)范围</th>            <th style="text-align: center;" width=35%>无符号(unsigned)范围</th>            <th style="text-align: center;" width=10%>描述</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">tinyint</td>             <td style="text-align: center;">1 byte</td>             <td style="text-align: center;">(-2<sup>7</sup>, 2<sup>7</sup>-1)</td>            <td style="text-align: center;">(0, 255)</td>             <td style="text-align: center;">小整数值</td>         </tr>        <tr>            <td style="text-align: center;">smallint</td>             <td style="text-align: center;">2 bytes</td>             <td style="text-align: center;">(-2<sup>15</sup>, 2<sup>15</sup>-1)</td>             <td style="text-align: center;">(0, 2<sup>16</sup>-1)</td>             <td style="text-align: center;">大整数值</td>         </tr>        <tr>            <td style="text-align: center;">mediumint</td>             <td style="text-align: center;">3 bytes</td>             <td style="text-align: center;">(-2<sup>23</sup>, 2<sup>23</sup>-1)</td>             <td style="text-align: center;">(0, 2<sup>24</sup>-1)</td>             <td style="text-align: center;">大整数值</td>         </tr>        <tr>            <td style="text-align: center;">int 或 integer</td>             <td style="text-align: center;">4 bytes</td>             <td style="text-align: center;">(-2<sup>31</sup>, 2<sup>31</sup>-1)</td>             <td style="text-align: center;">(0, 2<sup>32</sup>-1)</td>             <td style="text-align: center;">大整数值</td>         </tr>        <tr>            <td style="text-align: center;">bigint</td>             <td style="text-align: center;">8 bytes</td>             <td style="text-align: center;">(-2<sup>63</sup>, 2<sup>63</sup>-1)</td>             <td style="text-align: center;">(0, 2<sup>64</sup>-1)</td>             <td style="text-align: center;">极大整数值</td>         </tr>        <tr>            <td style="text-align: center;">float</td>             <td style="text-align: center;">4 bytes</td>             <td style="text-align: center;">(-3.402823466E+38, 3.402823466E+38) （IEEE 754）</td>             <td style="text-align: center;">0 和 (-1.175494351E-38, 3.402823466E+38)</td>             <td style="text-align: center;">单精度浮点数值</td>         </tr>        <tr>            <td style="text-align: center;">double</td>             <td style="text-align: center;">8 bytes</td>             <td style="text-align: center;">(-1.7976931348623157E+308, 1.7976931348623157E+308) （IEEE 754）</td>             <td style="text-align: center;">0 和 (2.2250738585072014E-308, 1.7976931348623157E+308)</td>             <td style="text-align: center;">双精度浮点值</td>         </tr>        <tr>            <td style="text-align: center;">decimal</td>             <td style="text-align: center;"></td>             <td style="text-align: center;">依赖于M(精度)和D(标度)的值</td>             <td style="text-align: center;">依赖于M(精度)和D(标度)的值</td>             <td style="text-align: center;">小数值(精确定点数)</td>         </tr>    </body></table><p>有符号类型在书写时可默认省略 <font class="code-word"><code>signed</code></font>，无符号类型在书写时采用 <font class="code-word"><code>类型 unsigned</code></font>。</p><p>浮点数通过括号内的数字限定总数字位数和小数位数：<font class="code-word"><code>double(总位数，小数位数)</code></font>。</p><h2 id="2-2-字符串类型"><a href="#2-2-字符串类型" class="headerlink" title="2.2 字符串类型"></a>2.2 字符串类型</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=30%>类型</th>            <th style="text-align: center;" width=30%>大小</th>            <th style="text-align: center;" width=40%>描述</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">char</td>             <td style="text-align: center;">0-255 bytes</td>             <td style="text-align: center;">定长字符串</td>        </tr>        <tr>            <td style="text-align: center;">varchar</td>             <td style="text-align: center;">0-65535 bytes</td>             <td style="text-align: center;">变长字符串</td>        </tr>        <tr>            <td style="text-align: center;">tinyblob</td>             <td style="text-align: center;">0-255 bytes</td>             <td style="text-align: center;">不超过 255 个字符的二进制字符串</td>        </tr>        <tr>            <td style="text-align: center;">tinytext</td>             <td style="text-align: center;">0-255 bytes</td>             <td style="text-align: center;">短文本字符串</td>        </tr>        <tr>            <td style="text-align: center;">blob</td>             <td style="text-align: center;">0-65535 bytes</td>             <td style="text-align: center;">二进制形式的长文本数据</td>        </tr>        <tr>            <td style="text-align: center;">text</td>             <td style="text-align: center;">0-65535 bytes</td>             <td style="text-align: center;">长文本数据</td>        </tr>        <tr>            <td style="text-align: center;">mediumblob</td>             <td style="text-align: center;">0-16777215 bytes</td>             <td style="text-align: center;">二进制形式的中等长度文本数据</td>        </tr>        <tr>            <td style="text-align: center;">mediumtext</td>             <td style="text-align: center;">0-16777215 bytes</td>             <td style="text-align: center;">中等长度文本数据</td>        </tr>        <tr>            <td style="text-align: center;">longblob</td>             <td style="text-align: center;">0-4294967295 bytes</td>             <td style="text-align: center;">二进制形式的极大文本数据</td>        </tr>        <tr>            <td style="text-align: center;">longtext</td>             <td style="text-align: center;">0-4294967295 bytes</td>             <td style="text-align: center;">极大文本数据</td>        </tr>    </body></table><p>定长字符串通过括号内的数字限定字符数：<font class="code-word"><code>char(字符数)</code></font>。固定占用指定大小的空间，性能优于变长字符串。</p><p>变长字符串通过括号内的数字限定字符数：<font class="code-word"><code>varchar(字符数)</code></font>。占用的空间由实际存储的字符数决定。</p><h2 id="2-3-日期时间类型"><a href="#2-3-日期时间类型" class="headerlink" title="2.3 日期时间类型"></a>2.3 日期时间类型</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=15%>类型</th>            <th style="text-align: center;" width=15%>大小</th>            <th style="text-align: center;" width=30%>范围</th>            <th style="text-align: center;" width=20%>格式</th>            <th style="text-align: center;" width=20%>描述</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">date</td>             <td style="text-align: center;">3 bytes</td>             <td style="text-align: center;">1000-01-01 至 9999-12-31</td>            <td style="text-align: center;">YYYY-MM-DD</td>            <td style="text-align: center;">日期值</td>        </tr>        <tr>            <td style="text-align: center;">time</td>             <td style="text-align: center;">3 bytes</td>             <td style="text-align: center;">838:59:59 至 838:59:59</td>            <td style="text-align: center;">HH:MM:SS</td>            <td style="text-align: center;">时间值或持续时间</td>        </tr>        <tr>            <td style="text-align: center;">year</td>             <td style="text-align: center;">1 bytes</td>             <td style="text-align: center;">1901 至 2155</td>            <td style="text-align: center;">YYYY</td>            <td style="text-align: center;">年份值</td>        </tr>        <tr>            <td style="text-align: center;">datetime</td>             <td style="text-align: center;">8 bytes</td>             <td style="text-align: center;">1000-01-01 00:00:00 至 9999-12-31 23:59:59</td>            <td style="text-align: center;">YYYY-MM-DD HH:MM:SS</td>            <td style="text-align: center;">混合日期和时间值</td>        </tr>        <tr>            <td style="text-align: center;">timestamp</td>             <td style="text-align: center;">4 bytes</td>             <td style="text-align: center;">1970-01-01 00:00:00 至 2038-1-19 03:14:07</td>            <td style="text-align: center;">YYYY-MM-DD HH:MM:SS</td>            <td style="text-align: center;">混合日期和时间值，时间戳</td>        </tr>    </body></table><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h1><h2 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">+</td>             <td style="text-align: center;">加</td>         </tr>        <tr>            <td style="text-align: center;">-</td>             <td style="text-align: center;">减</td>         </tr>        <tr>            <td style="text-align: center;">*</td>             <td style="text-align: center;">乘</td>         </tr>        <tr>            <td style="text-align: center;">/ 或 div</td>             <td style="text-align: center;">除</td>         </tr>        <tr>            <td style="text-align: center;">% 或 mod</td>             <td style="text-align: center;">取余</td>         </tr>    </body></table><h2 id="3-2-比较运算符"><a href="#3-2-比较运算符" class="headerlink" title="3.2 比较运算符"></a>3.2 比较运算符</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">&lt; 和 &lt;=</td>             <td style="text-align: center;">小于和小于等于</td>         </tr>        <tr>            <td style="text-align: center;">&gt; 和 &gt;=</td>             <td style="text-align: center;">大于和大于等于</td>         </tr>        <tr>            <td style="text-align: center;">=</td>             <td style="text-align: center;">等于</td>         </tr>        <tr>            <td style="text-align: center;">&lt;=&gt;</td>             <td style="text-align: center;">安全的等于，可以用来判断 null</td>         </tr>        <tr>            <td style="text-align: center;">!= 或 &lt;&gt;</td>             <td style="text-align: center;">不等于</td>         </tr>        <tr>            <td style="text-align: center;">is null 或 isnull</td>             <td style="text-align: center;">判断一个值是否为 null</td>         </tr>        <tr>            <td style="text-align: center;">is not null</td>             <td style="text-align: center;">判断一个值是否不为 null</td>         </tr>        <tr>            <td style="text-align: center;">least(...)</td>             <td style="text-align: center;">当有两个及以上参数时，返回最小值</td>         </tr>        <tr>            <td style="text-align: center;">greatest(...)</td>             <td style="text-align: center;">当有两个及以上参数时，返回最大值</td>         </tr>        <tr>            <td style="text-align: center;">between...(最小值) and...(最大值)</td>             <td style="text-align: center;">判断一个值是否落在两个值之间（包括两端）</td>         </tr>        <tr>            <td style="text-align: center;">in(...)</td>             <td style="text-align: center;">判断一个值是 in 列表中的任意一个值</td>         </tr>        <tr>            <td style="text-align: center;">not in(...)</td>             <td style="text-align: center;">判断一个值不是 in 列表中的任意一个值</td>         </tr>        <tr>            <td style="text-align: center;">like</td>             <td style="text-align: center;">模糊匹配，_ 匹配单个字符，% 匹配任意个字符</td>         </tr>        <tr>            <td style="text-align: center;">regexp</td>             <td style="text-align: center;">正则表达式匹配</td>         </tr>    </body></table><h2 id="3-3-逻辑运算符"><a href="#3-3-逻辑运算符" class="headerlink" title="3.3 逻辑运算符"></a>3.3 逻辑运算符</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">! 或 not</td>             <td style="text-align: center;">逻辑非</td>         </tr>        <tr>            <td style="text-align: center;">&& 或 and</td>             <td style="text-align: center;">逻辑与</td>         </tr>        <tr>            <td style="text-align: center;">|| 或 or</td>             <td style="text-align: center;">逻辑或</td>         </tr>        <tr>            <td style="text-align: center;">xor</td>             <td style="text-align: center;">逻辑异或</td>         </tr>    </body></table><h2 id="3-4-位运算符"><a href="#3-4-位运算符" class="headerlink" title="3.4 位运算符"></a>3.4 位运算符</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">~</td>             <td style="text-align: center;">按位取反</td>         </tr>        <tr>            <td style="text-align: center;">&</td>             <td style="text-align: center;">按位与</td>         </tr>        <tr>            <td style="text-align: center;">|</td>             <td style="text-align: center;">按位或</td>         </tr>        <tr>            <td style="text-align: center;">^</td>             <td style="text-align: center;">按位异或</td>         </tr>        <tr>            <td style="text-align: center;">&lt;&lt;</td>             <td style="text-align: center;">按位左移</td>         </tr>        <tr>            <td style="text-align: center;">&gt;&gt;</td>             <td style="text-align: center;">按位右移</td>         </tr>    </body></table><h1 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h1><h2 id="4-1-字符串函数"><a href="#4-1-字符串函数" class="headerlink" title="4.1 字符串函数"></a>4.1 字符串函数</h2><p><strong>函数</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>函数</th>            <th style="text-align: center;" width=50%>功能</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">concat(S1, S2, Sn)</td>             <td style="text-align: center;">字符串拼接，将 S1，S2，...Sn 拼接成一个字符串</td>         </tr>        <tr>            <td style="text-align: center;">lower(str)</td>             <td style="text-align: center;">将字符串 str 全部转为小写</td>         </tr>        <tr>            <td style="text-align: center;">upper(str)</td>             <td style="text-align: center;">将字符串 str 全部转为大写</td>         </tr>        <tr>            <td style="text-align: center;">lpad(str, n, pad)</td>             <td style="text-align: center;">左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度</td>         </tr>        <tr>            <td style="text-align: center;">rpad(str, n, pad)</td>             <td style="text-align: center;">右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符串长度</td>         </tr>        <tr>            <td style="text-align: center;">trim(str)</td>             <td style="text-align: center;">去掉字符串头部和尾部的空格</td>         </tr>        <tr>            <td style="text-align: center;">substring(str, start, len)</td>             <td style="text-align: center;">返回从字符串 str 从 start 位置起的 len 个长度的字符串</td>         </tr>    </body></table>**案例**<figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ykcsoqlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ykcsoqlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 直接使用函数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(<span class="hljs-string">&#x27; Hello MySQL &#x27;</span>);<br><span class="hljs-keyword">select</span> substr(<span class="hljs-string">&#x27;Hello MySQL&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>);<br><br><span class="hljs-comment">-- 创建案例表格</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp<br>(<br>    id   <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age  <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-comment">-- 添加表格数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp(id, name, age) <br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">23</span>), <br>       (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">22</span>), <br>       (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">24</span>);<br><br><span class="hljs-comment">-- 对工号不足五位的统一补充0</span><br><span class="hljs-keyword">update</span> emp <span class="hljs-keyword">set</span> id <span class="hljs-operator">=</span> lpad(id, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------+------+</span><br><span class="hljs-operator">|</span> id    <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> age  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------+------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">00001</span> <span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span>   <span class="hljs-number">23</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">00002</span> <span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span>   <span class="hljs-number">22</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">00003</span> <span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span>   <span class="hljs-number">24</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------+------+</span><br></code></pre></td></tr></table></div></figure><h2 id="4-2-数值函数"><a href="#4-2-数值函数" class="headerlink" title="4.2 数值函数"></a>4.2 数值函数</h2><p><strong>函数</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>函数</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">ceil(x)</td>             <td style="text-align: center;">向上取整</td>         </tr>        <tr>            <td style="text-align: center;">floor(x)</td>             <td style="text-align: center;">向下取整</td>         </tr>        <tr>            <td style="text-align: center;">mod(x, y)</td>             <td style="text-align: center;">返回 x % y</td>         </tr>        <tr>            <td style="text-align: center;">rand()</td>             <td style="text-align: center;">返回0(包含)~1(不包含)内的随机数</td>         </tr>        <tr>            <td style="text-align: center;">round(x, y)</td>             <td style="text-align: center;">求参数 x 的四舍五入的值，保留 y 位小数</td>         </tr>    </body></table>**案例**<figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-as8n2vlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-as8n2vlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 生成一个六位数的随机验证码</span><br><span class="hljs-keyword">select</span> lpad(round(rand() <span class="hljs-operator">*</span> <span class="hljs-number">1000000</span>, <span class="hljs-number">0</span>), <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br></code></pre></td></tr></table></div></figure><h2 id="4-3-日期函数"><a href="#4-3-日期函数" class="headerlink" title="4.3 日期函数"></a>4.3 日期函数</h2><p><strong>函数</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>函数</th>            <th style="text-align: center;" width=50%>功能</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">curdate()</td>             <td style="text-align: center;">返回当前日期</td>         </tr>        <tr>            <td style="text-align: center;">curtime()</td>             <td style="text-align: center;">返回当前时间</td>         </tr>        <tr>            <td style="text-align: center;">now()</td>             <td style="text-align: center;">返回当前日期和时间</td>         </tr>        <tr>            <td style="text-align: center;">year(date)</td>             <td style="text-align: center;">获取指定 date 的年份</td>         </tr>        <tr>            <td style="text-align: center;">month(date)</td>             <td style="text-align: center;">获取指定 date 的月份</td>         </tr>        <tr>            <td style="text-align: center;">day(date)</td>             <td style="text-align: center;">获取指定 date 的日期</td>         </tr>        <tr>            <td style="text-align: center;">date_add(date, interval expr type)</td>             <td style="text-align: center;">返回一个日期/时间值 date 加上一个时间间隔 expr 后的时间值</td>         </tr>        <tr>            <td style="text-align: center;">datediff(date1, date2)</td>             <td style="text-align: center;">返回起始时间 date1 和结束时间 date2 之间的天数，即 date1 - date2</td>         </tr>    </body></table>**案例**<figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-257wtelckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-257wtelckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 计算从当前往后推70个月的时间</span><br><span class="hljs-keyword">select</span> date_add(now(), <span class="hljs-type">interval</span> <span class="hljs-number">70</span> <span class="hljs-keyword">month</span>);<br><br><span class="hljs-comment">-- 创建案例表格</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp<br>(<br>    id        <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name      <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    entryDate <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>    idCard    <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) comment <span class="hljs-string">&#x27;身份证号&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-comment">-- 添加表格数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp(id, name, entryDate, idCard)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;2006-10-12&#x27;</span>, <span class="hljs-string">&#x27;123456789012345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;2000-01-02&#x27;</span>, <span class="hljs-string">&#x27;123156789012345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;2012-03-02&#x27;</span>, <span class="hljs-string">&#x27;12345674971234567X&#x27;</span>);<br>       <br><span class="hljs-comment">-- 查询所有员工的入职天数，并根据入职天数倒序排序</span><br><span class="hljs-keyword">select</span> name, datediff(curdate(), entryDate) <span class="hljs-keyword">as</span> entryDays <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> entryDays <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></div></figure><h2 id="4-4-流程函数"><a href="#4-4-流程函数" class="headerlink" title="4.4 流程函数"></a>4.4 流程函数</h2><p><strong>函数</strong></p><p>流程函数可以在 SQL 语句中实现条件筛选，从而提高语句的效率</p><ul><li><p>条件函数 if：如果 value 为 true，则返回 t，否则返回 f</p><p><font class="code-sentence"><code>if(value, t, f)</code></font></p></li><li><p>判断为空函数 ifnull：如果 value1 不为 null，返回 value1，否则返回 value2</p><p><font class="code-sentence"><code>ifnull(value1, value2)</code></font></p></li><li><p>分支选择函数 case when</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8puuvelckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-8puuvelckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 如果条件1为true，返回值1；...否则返回默认值</span><br><span class="hljs-keyword">case</span> <br><span class="hljs-keyword">when</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 值<span class="hljs-number">1</span><br><span class="hljs-keyword">when</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">then</span> 值<span class="hljs-number">2</span> <br>... <br><span class="hljs-keyword">else</span> 默认值<br><span class="hljs-keyword">end</span> <br> <br><span class="hljs-comment">-- 如果判断标准=判断值1，返回值1；...否则返回默认值 </span><br><span class="hljs-keyword">case</span> 判断标准 <br><span class="hljs-keyword">when</span> 判断值<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 值<span class="hljs-number">1</span> <br><span class="hljs-keyword">when</span> 判断值<span class="hljs-number">2</span> <span class="hljs-keyword">then</span> 值<span class="hljs-number">2</span> <br>... <br><span class="hljs-keyword">else</span> 默认值<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></div></figure></li></ul><p><strong>注意</strong></p><p>分支选择函数 case when 当一个条件满足，就返回对应的结果，不会继续下一条件判断。</p><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yinhdjlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-yinhdjlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建案例表格</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp<br>(<br>    id          <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name        <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age         <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    workAddress <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;工作地点&#x27;</span>,<br>    idCard      <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) comment <span class="hljs-string">&#x27;身份证号&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-comment">-- 添加表格数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp(id, name, age, workAddress, idCard)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;123456789012345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-string">&#x27;123156789012345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;洪六&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;123156789066345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">34</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">-- 查询员工姓名和工作地址，并区分一二线城市</span><br><span class="hljs-keyword">select</span><br>    name,<br>    (<span class="hljs-keyword">case</span> workAddress <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;北京&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;一线城市&#x27;</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;上海&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;一线城市&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;二线城市&#x27;</span> <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;工作地址&#x27;</span><br><span class="hljs-keyword">from</span> emp;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+</span><br><span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> 工作地址 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+</span><br><span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span> 一线城市 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span> 二线城市 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 洪六 <span class="hljs-operator">|</span> 一线城市 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span> 一线城市 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+----------+</span><br><br><span class="hljs-comment">-- 查询员工成年情况</span><br><span class="hljs-keyword">select</span><br>    name,<br>    (<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;未成年&#x27;</span> <span class="hljs-keyword">when</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">30</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;30以下成年人&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;30以上&#x27;</span> <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;成年情况&#x27;</span><br><span class="hljs-keyword">from</span> emp;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------+</span><br><span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> 成年情况     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------+</span><br><span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span> 未成年       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span> <span class="hljs-number">30</span>以下成年人 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 洪六 <span class="hljs-operator">|</span> <span class="hljs-number">30</span>以下成年人 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span> <span class="hljs-number">30</span>以上       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+--------------+</span><br><br><span class="hljs-comment">-- 查询员工身份证情况</span><br><span class="hljs-keyword">select</span><br>    name,<br>    (if (idCard <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;无身份证&#x27;</span>,<span class="hljs-string">&#x27;有身份证&#x27;</span>)) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;身份证情况&#x27;</span><br><span class="hljs-keyword">from</span> emp;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------------+</span><br><span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> 身份证情况 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------------+</span><br><span class="hljs-operator">|</span> 张三 <span class="hljs-operator">|</span> 有身份证   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 李四 <span class="hljs-operator">|</span> 有身份证   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 洪六 <span class="hljs-operator">|</span> 有身份证   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> 王五 <span class="hljs-operator">|</span> 无身份证   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------------+</span><br></code></pre></td></tr></table></div></figure><h2 id="4-5-聚合函数"><a href="#4-5-聚合函数" class="headerlink" title="4.5 聚合函数"></a>4.5 聚合函数</h2><p><strong>函数</strong></p><p>聚合函数是将一列数据作为一个整体，进行纵向统计（所有的 null 值不参与统计）：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>函数</th>            <th style="text-align: center;" width=50%>功能</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">count(字段)</td>             <td style="text-align: center;">统计数量</td>         </tr>        <tr>            <td style="text-align: center;">count(distinct 字段)</td>             <td style="text-align: center;">统计去重后的数量</td>         </tr>        <tr>            <td style="text-align: center;">max(字段)</td>             <td style="text-align: center;">最大值</td>         </tr>        <tr>            <td style="text-align: center;">min(字段)</td>             <td style="text-align: center;">最小值</td>         </tr>        <tr>            <td style="text-align: center;">avg(字段)</td>             <td style="text-align: center;">平均值</td>         </tr>        <tr>            <td style="text-align: center;">sum(字段)</td>             <td style="text-align: center;">求和</td>         </tr>    </body></table><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-f351unlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-f351unlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建案例表格</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp<br>(<br>    id          <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name        <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age         <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    workAddress <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;工作地点&#x27;</span>,<br>    idCard      <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) comment <span class="hljs-string">&#x27;身份证号&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-comment">-- 添加表格数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp(id, name, age, workAddress, idCard)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;123456789012345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-string">&#x27;123156789012345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">34</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">-- 统计企业员工数量</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-comment">-- 统计有身份证的员工数量</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(idCard) <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-comment">-- 统计企业员工的平均年龄</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> emp;<br><br><span class="hljs-comment">-- 统计北京的员工的年龄和</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> workAddress <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;北京&#x27;</span>;<br></code></pre></td></tr></table></div></figure><h1 id="5-正则表达式"><a href="#5-正则表达式" class="headerlink" title="5. 正则表达式"></a>5. 正则表达式</h1><p><strong>语法</strong></p><ul><li><p>指定正则表达式的字符匹配模式</p><p><font class="code-sentence"><code>字段 regexp &#39;正则表达式&#39;</code></font></p></li></ul><p><strong>格式</strong></p><p>MySQL 中的正则表达式与 <a href="/post/3799/#2-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">Java 中的正则表达式</a>基本一致，常用匹配方式如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>模式</th>            <th style="text-align: center;" width=50%>描述</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">^</td>             <td style="text-align: center;">匹配输入字符串的开始位置</td>         </tr>        <tr>            <td style="text-align: center;">$</td>             <td style="text-align: center;">匹配输入字符串的结束位置</td>         </tr>        <tr>            <td style="text-align: center;">.</td>             <td style="text-align: center;">匹配除"\n"之外的任何单个字符</td>         </tr>        <tr>            <td style="text-align: center;">[]</td>             <td style="text-align: center;">字符集合，匹配所包含的任意一个字符</td>         </tr>        <tr>            <td style="text-align: center;">[^]</td>             <td style="text-align: center;">负值字符集合，匹配未包含的任意字符</td>         </tr>        <tr>            <td style="text-align: center;">|</td>             <td style="text-align: center;">连接多个匹配条件表示逻辑或</td>         </tr>        <tr>            <td style="text-align: center;">*</td>             <td style="text-align: center;">其前导字符必须在目标对象中出现零次或连续多次</td>         </tr>        <tr>            <td style="text-align: center;">+</td>             <td style="text-align: center;">其前导字符必须在目标对象中连续出现一次或多次</td>         </tr>        <tr>            <td style="text-align: center;">{n}</td>              <td style="text-align: center;">其前导字符正好出现 n 次</td>         <tr>            <td style="text-align: center;">{n,m}</td>             <td style="text-align: center;">其前导字符至少出现 n 次，但不超过 m 次</td>         </tr>    </body></table>**注意**<ul><li><font class="code-word"><code>regexp</code></font> 和 <font class="code-word"><code>like</code></font> 的区别为：regexp 只需要匹配上列值中部分字符串，但 like 需要匹配上整个字符串。</li><li>Java 和 MySQL 的正则表达式的区别：Java 中 <font class="code-word"><code>matches()</code></font> 需要匹配上整个字符串，regexp 只需要匹配上列中部分字符串。</li><li>MySQL 中  <font class="code-word"><code>\</code></font> 为转义符，正则表达式中 <font class="code-word"><code>\</code></font> 也为转义符。</li><li>字符串中要输出特殊符号本身必须用 <font class="code-word"><code>\符号</code></font>，正则表达式中要输出特殊符号本身必须用 <font class="code-word"><code>\\符号</code></font>。</li><li>字符串中输出 \ 符号本身必须使用 <font class="code-word"><code>\\</code></font>，正则表示中输出 \ 符号本身必须使用 <font class="code-word"><code>\\\\</code></font></li></ul><p><strong>案例</strong></p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4xhd6flckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-4xhd6flckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建案例表格</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp<br>(<br>    id        <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>    name      <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    entryDate <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>    idCard    <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) comment <span class="hljs-string">&#x27;身份证号&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-comment">-- 添加表格数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp(id, name, entryDate, idCard)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;2006-10-12&#x27;</span>, <span class="hljs-string">&#x27;123456789012345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;2000-01-02&#x27;</span>, <span class="hljs-string">&#x27;123156789012345678&#x27;</span>),<br>       (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;2024-03-02&#x27;</span>, <span class="hljs-string">&#x27;12345674971234567X&#x27;</span>);<br><br><span class="hljs-comment">-- 查询2006年入职的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> entryDate regexp <span class="hljs-string">&#x27;2006&#x27;</span>;<br><br><span class="hljs-comment">-- 查询身份证号最后一位是X的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> idCard regexp <span class="hljs-string">&#x27;X&#x27;</span>;<br></code></pre></td></tr></table></div></figure><h1 id="6-性能分析"><a href="#6-性能分析" class="headerlink" title="6. 性能分析"></a>6. 性能分析</h1><p><strong>SQL 执行频率</strong></p><ul><li><p>查看服务器状态信息</p><p><font class="code-sentence"><code>show [session|global] status;</code></font></p></li><li><p>查看当前数据库增删改查语句的访问频次</p><p><font class="code-sentence"><code>show global status like &#39;Com_______&#39;;</code></font> （七个下划线）</p></li></ul><p><strong>慢查询日志</strong></p><p>慢查询日志（文件：主机名-slow.log）记录了所有执行时间超过指定参数（<font class="code-word"><code>long_query_time</code></font>，单位：秒，默认10秒）的所有 SQL 语句的日志。</p><p>MySQL 的慢查询日志默认没有开启，需要在 MySQL 的配置文件（&#x2F;MySQL Server 8.0&#x2F;my.ini）中配置如下信息：</p><figure class="highlight ini"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gn3rrylckj50kg"></i><span>ini</span><div class="collapse show" id="collapse-gn3rrylckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 开启MySQL慢查询日志开关</span><br><span class="hljs-attr">show_query_log</span>=<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 设置慢日志的时间为n秒，SQL语句执行时间超过n秒，就会视为慢查询，记录慢查询日志</span><br><span class="hljs-attr">long_query_time</span>=n<br></code></pre></td></tr></table></div></figure><p><strong>profile 详情</strong></p><p>show profiles 能够在做 SQL 优化时帮助我们了解时间都耗费到哪里去了。</p><ul><li><p>通过 have_profiling 参数，能够看到当前 MySQL 是否支持 profile 操作</p><p><font class="code-sentence"><code>select @@have_profiling;</code></font></p></li><li><p>默认 profiling 是关闭的，可以通过 set 语句在 session&#x2F;global 级别开启</p><p><font class="code-sentence"><code>set profiling = 1;</code></font></p></li></ul><p>在开启 profiling 之后可以通过如下语句进行查询：</p><ul><li><p>查看每一条 SQL 的耗时基本情况</p><p><font class="code-sentence"><code>show profiles;</code></font></p></li><li><p>查看指定 query id 的 SQL 语句各个阶段的耗时情况</p><p><font class="code-sentence"><code>show profile for query 指定id;</code></font></p></li><li><p>查看指定 query_id 的 SQL 语句 CPU 的使用情况</p><p><font class="code-sentence"><code>show profile cpu for query 指定id;</code></font></p></li></ul><p><strong>explain 执行计划</strong></p><p>直接在 select 语句前加上关键字 <font class="code-word"><code>explain</code></font> 或者 <font class="code-word"><code>desc</code></font> ，可以获取 MySQL 如何执行 select 语句的信息。</p><figure class="highlight sql"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ixrrbvlckj50kg"></i><span>sql</span><div class="collapse show" id="collapse-ixrrbvlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李四&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>获得的执行计划各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者是操作表的顺序（id 相同，顺序从上到下；id 不同，值越大，越先执行）</li><li>select_type：表示 select 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（union 中的第二个或者后面的查询语句）、SUBQUERY（select&#x2F;where 之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、rang、index、all</li><li>possible_key：可能用到的索引</li><li>key：实际使用的索引，如果为 NULL，则表示没有使用索引</li><li>key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下长度越短越好</li><li>rows：MySQL 认为必须要执行查询的行数，在 InnoDB 引擎的表中是一个估计值</li><li>filtered：表示返回结果的行数占需读取行数的百分比，该值越大越好</li></ul>]]></content>
    
    
    <categories>
      
      <category>04 MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Fluid 主题适配深浅两色</title>
    <link href="/post/4228881379/"/>
    <url>/post/4228881379/</url>
    
    <content type="html"><![CDATA[<p class="note note-info">现已关闭深色模式，该文章内容已经过时，仅留作备份</p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>Fluid 主题可以切换深色和浅色两种模式，所以为了适配这两种不同的模式，部分自定义的样式需要手动设置在两种模式下的切换和颜色，具体的代码格式可以从 Fluid 的源码中扒出来。</p><p>styl 文件都一律放在了 <code>Blog\source\css\fluid</code> 路径下，直接在主题中引入就行。</p><h1 id="2-文章页"><a href="#2-文章页" class="headerlink" title="2.  文章页"></a>2.  文章页</h1><h2 id="2-1-文字切换颜色"><a href="#2-1-文字切换颜色" class="headerlink" title="2.1 文字切换颜色"></a>2.1 文字切换颜色</h2><p> 为了适配 Fluid 主题的深浅色两种外观，自定一个 styl 文件加入以下内容来配置深浅两种外观下的不同代码块颜色。</p><figure class="highlight styl"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6we2celckj50kh"></i><span>styl</span><div class="collapse show" id="collapse-6we2celckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-pseudo">:root</span><br>  <span class="hljs-attr">--code-word-color</span>: <span class="hljs-number">#C72541</span>;<br>  <span class="hljs-attr">--code-sentence-color</span>: green;<br><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> &#123;     <br>    <span class="hljs-attr">--code-word-color</span>: <span class="hljs-number">#dd8888</span>;<br>    <span class="hljs-attr">--code-sentence-color</span>: <span class="hljs-number">#5be17b</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-表格切换颜色"><a href="#2-2-表格切换颜色" class="headerlink" title="2.2 表格切换颜色"></a>2.2 表格切换颜色</h2><p>同样颜色在深浅两种模式下有如下设置，这些都根据自己喜好弄就可以了。</p><figure class="highlight styl"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jtg1f9lckj50kh"></i><span>styl</span><div class="collapse show" id="collapse-jtg1f9lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-pseudo">:root</span><br>  <span class="hljs-attr">--form-color</span>: <span class="hljs-number">#f6f8fa</span>;<br>  <span class="hljs-attr">--form-border-color</span>: <span class="hljs-number">#e6ebf1</span>;<br>  <br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> &#123;      <br>    <span class="hljs-attr">--form-color</span>: <span class="hljs-number">#2d333b</span>;<br>    <span class="hljs-attr">--form-border-color</span>: <span class="hljs-number">#4a5360</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-3-文中折叠栏切换颜色"><a href="#2-3-文中折叠栏切换颜色" class="headerlink" title="2.3 文中折叠栏切换颜色"></a>2.3 文中折叠栏切换颜色</h2><p>为了适配深色模式，还要自己设定好颜色以及切换模式时动画的过度。这里颜色是直接用了和代码块一个颜色，就没有再单独加颜色了。</p><figure class="highlight styl"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7ejyxrlckj50kh"></i><span>styl</span><div class="collapse show" id="collapse-7ejyxrlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> &#123;   <br>    <br>    <span class="hljs-selector-class">.categoryinpost</span> &#123;<br>        <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br>    <br>    <span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-tag">button</span> &#123;<br>        <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br><br>    <span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-class">.dropdown-divider</span> &#123;<br>        <span class="hljs-attribute">transition</span>: border-top <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br>&#125;<br><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;light&#x27;</span>]</span> &#123;<br><br>    <span class="hljs-selector-class">.categoryinpost</span> &#123;<br>        <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br>    <br>    <span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-tag">button</span> &#123;<br>        <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br><br>    <span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-class">.dropdown-divider</span> &#123;<br>        <span class="hljs-attribute">transition</span>: border-top <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-4-代码块切换颜色"><a href="#2-4-代码块切换颜色" class="headerlink" title="2.4 代码块切换颜色"></a>2.4 代码块切换颜色</h2><p>代码块切换大部分参考了 <a href="https://kiyanyang.github.io/posts/c4dd4019/">Kiyan’s Blog</a> 的文章，设置好后从浅色切换到深色是平滑过度的，但是发现从深色到浅色动画不平滑，所以我自己又添了一小段，并修改了颜色。</p><figure class="highlight styl"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ea0zjilckj50kh"></i><span>styl</span><div class="collapse show" id="collapse-ea0zjilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-pseudo">:root</span><br>  <span class="hljs-attr">--highlight-title-bg-color</span>: <span class="hljs-number">#eff3f8</span>;<br><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> &#123;<br><br>  <span class="hljs-attr">--highlight-title-bg-color</span>: <span class="hljs-number">#343a43</span>;<br>  <span class="hljs-attr">--highlight-bg-color</span>: <span class="hljs-number">#2d333b</span>;<br><br>  <span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.highlight</span>,<br>  <span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.code-wrapper</span> &#123;<br><br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--highlight-title-bg-color);<br>    <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br><br>    &gt; <span class="hljs-selector-tag">i</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#c4c6c9</span>;<br>    &#125;<br><br>    &gt; <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#c4c6c9</span>;<br>      <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.copy-btn</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#c4c6c9</span>;<br>    <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> ease-in-out;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;light&#x27;</span>]</span> &#123;<br><br>  <span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.highlight</span>,<br>  <span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.code-wrapper</span> &#123;<br><br>    <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br><br>    &gt; <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-5-tabs-标签切换颜色"><a href="#2-5-tabs-标签切换颜色" class="headerlink" title="2.5 tabs 标签切换颜色"></a>2.5 tabs 标签切换颜色</h2><p>这里是在引入了 tabs 标签后对他颜色进行了一些设置。</p><figure class="highlight styl"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-r7jtcklckj50kh"></i><span>styl</span><div class="collapse show" id="collapse-r7jtcklckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-pseudo">:root</span><br>  <span class="hljs-attr">--tabs-color</span>: <span class="hljs-number">#0078e7</span>;<br><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> &#123;     <br>    <span class="hljs-attr">--tabs-color</span>: <span class="hljs-number">#61a8ebd7</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>01 博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Fluid 主题添加侧边栏切换</title>
    <link href="/post/1063853434/"/>
    <url>/post/1063853434/</url>
    
    <content type="html"><![CDATA[<p class="note note-info">本功能已进行迭代，该文章内容已经过时，仅留作备份</p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>因为经常会看一篇文章时需要跳到同分类下的其他文章去，尽管 Fluid 主题可以在侧边栏显示当前分类下的文章，但是和目录如果一左一右显示的话，不仅挤占了文章显示的空间，还很不美观。</p><p>所以后面就想到，能不能就在显示目录的位置也显示当前分类下的文章呢，可以做一个按钮在显示目录和显示当前分类下的文章之间切换，但关于这方面的知识我还没有学，基于 Fluid 主题的修改也完全找不到。到最后在网上查相关信息的时候偶然发现了一段通过 html 和 css 实现在登录和注册页面之间切换的代码，学习了一下，于是想办法在 Fluid 主题中实现了。</p><p>这部分代码以后还可以继续扩充，侧边栏除了目录和当前分类下的文章外，还可以加入其他内容来切换显示，不过我暂时没有太多需求，就先做到这里。</p><h1 id="2-添加按钮"><a href="#2-添加按钮" class="headerlink" title="2. 添加按钮"></a>2. 添加按钮</h1><p>我参考的是<a href="https://blog.csdn.net/weixin_43691879/article/details/104397599">这一篇文章</a>，这篇文章的 html 代码如下。</p><figure class="highlight html"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uinrxelckj50kh"></i><span>html</span><div class="collapse show" id="collapse-uinrxelckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--主体--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--头部--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-header clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javaScript:;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;current&quot;</span>&gt;</span>我要登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javaScript:;&quot;</span> &gt;</span>我要注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--内容--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-body&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dom&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>账号<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名/手机/邮箱&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s2&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>记住密码<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登<span class="hljs-symbol">&amp;nbsp;</span>录&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dom-footer&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-another&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>找回密码<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>还没有注册账号<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>立即注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-three&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第三方账号直接登录<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-icon&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/qq2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/wechat.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dom&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>手机号码<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;填写你的手机号码作为登录账号&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;中、英文均可，最长20个字符或10个汉字&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;6-30位英文、数字、符号、区分大小写&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s1 msg-code&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>短信验证码<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;msgcode&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;填写短信验证码&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bnt&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取短信验证码&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;s1&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>邀请码(<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:purple&quot;</span>&gt;</span>选填<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;如果有邀请码，请填写&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注<span class="hljs-symbol">&amp;nbsp;</span>册&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dom-footer&quot;</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-three&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第三方账号直接登录<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-icon&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/qq2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/wechat.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> <span class="hljs-keyword">as</span>=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;content-header&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> contents=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;dom&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">as</span>.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> a=<span class="hljs-keyword">as</span>[i];</span><br><span class="language-javascript">            a.<span class="hljs-property">id</span>=i;</span><br><span class="language-javascript">            <span class="hljs-comment">// 设置每个a标签的onclick事件</span></span><br><span class="language-javascript">            a.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 清楚所有标签的css设置，隐藏dom标签</span></span><br><span class="language-javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-keyword">as</span>.<span class="hljs-property">length</span>;j++)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">as</span>[j].<span class="hljs-property">className</span>=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                    contents[j].<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 设置当前标签样式及当前标签下的所有dom标签可见</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;current&#x27;</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 当前div可见</span></span><br><span class="language-javascript">                contents[<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>].<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>可以看到大致的实现思路就是设置每个头部标签的点击事件，点击到该标签时，就把所有标签下的内容的隐藏，再单独显示该标签的内容。弄清楚这个之后，其实在博客中就可以完全采用这种思路，只需要把 header 和 body 中显示的内容换成自己想要的就行了。</p><p>因为右侧同时放切换按钮和内容的话会显得很拥挤，所以我把切换按钮放在了左边的侧边栏，右边还是正常显示内容。</p><p>这里分别修改了 <code>Blog\themes\fluid\layout\_partials\post</code> 路径下的 <code>sidebar-left.ejs</code> 和 <code>sidebar-right.ejs</code> 文件，修改的内容如下，可以看到在右侧同时有目录和当前分类下的文章两部分内容了，然后通过左侧的按钮来切换之后只需在 Fluid 主题配置文件中开启右侧显示目录，左侧显示分类下的文章即可。</p><div class="tag-common tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a data-target="1-1">sidebar-left.ejs</a></li><li class="tab"><a data-target="1-2">sidebar-right.ejs</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><figure class="highlight plaintext"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ht9t7ulckj50kh"></i><span>ejs</span><div class="collapse show" id="collapse-ht9t7ulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;section id=&quot;mysidebar&quot; class=&quot;mysidebar-left&quot;&gt;<br>  &lt;!--头部--&gt;<br>  &lt;div class=&quot;content-header clearfix navbar-dark&quot;&gt;<br>    &lt;div class=&quot;barpack&quot;&gt;<br>      &lt;a class=&quot;current&quot;&gt;&lt;i class=&quot;iconfont icon-list&quot;&gt;&lt;/i&gt;&lt;/a&gt;<br>      &lt;a class=&quot;current&quot;&gt;&lt;i class=&quot;iconfont icon-category-fill&quot;&gt;&lt;/i&gt;&lt;/a&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;!-- 内容 --&gt;<br>  &lt;!-- 位于sidebar-right文件中 --&gt;<br>&lt;/section&gt;<br></code></pre></td></tr></table></div></figure></div><div class="tab-pane" id="1-2"><figure class="highlight plaintext"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ir93nvlckj50kh"></i><span>ejs</span><div class="collapse show" id="collapse-ir93nvlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!--主体--&gt;<br>&lt;section id=&quot;mysidebar&quot; class=&quot;mysidebar-right&quot;&gt;<br>&lt;!--头部--&gt;<br>  &lt;!-- 在sidebar-left文件中 --&gt;<br>  <br>&lt;!--内容--&gt;<br>  &lt;div class=&quot;content-body&quot;&gt;<br>      &lt;div class=&quot;dom&quot; style=&quot;display: block&quot;&gt;<br>        &lt;aside class=&quot;sidebar&quot; style=&quot;margin-left: -1rem&quot;&gt;<br>          &lt;%- partial(&#x27;_partials/post/toc&#x27;) %&gt;<br>        &lt;/aside&gt;            <br>      &lt;/div&gt;<br>        &lt;div class=&quot;dom&quot;&gt;<br>          &lt;aside class=&quot;sidebar category-bar&quot; style=&quot;margin-right: -1rem&quot;&gt;<br>            &lt;%- partial(&#x27;_partials/post/category-bar&#x27;) %&gt;<br>          &lt;/aside&gt;            <br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>&lt;/section&gt;<br>&lt;!-- 点击切换 --&gt;<br>&lt;script type=&quot;application/javascript&quot; &gt;<br>    window.onload=function () &#123;<br>        let as=document.getElementsByClassName(&#x27;content-header&#x27;)[0].getElementsByTagName(&#x27;a&#x27;);<br>        let contents=document.getElementsByClassName(&quot;dom&quot;);<br>        for (let i=0;i&lt;as.length;i++)&#123;<br>            let a=as[i];<br>            a.id=i;<br>            // 设置每个a标签的onclick事件<br>            a.onclick=function () &#123;<br>                // 清楚所有标签的css设置，隐藏dom标签<br>                for(let j=0;j&lt;as.length;j++)&#123;<br>                    as[j].className=&quot;&quot;;<br>                    contents[j].style.display=&quot;none&quot;;<br>                &#125;<br>                // 设置当前标签样式及当前标签下的所有dom标签可见<br>                this.className=&#x27;current&#x27;;<br>                // 当前div可见<br>                contents[this.id].style.display=&#x27;block&#x27;;<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></div></figure></div></div></div><h1 id="3-样式设置"><a href="#3-样式设置" class="headerlink" title="3. 样式设置"></a>3. 样式设置</h1><p>目录和当前分类下文章栏的样式我并未进行修改，均保留原主题样式，主要是设置了左边的切换按钮的样式。为了和主题样式统一，我就直接参考了返回文章顶部的按钮的样式，注意 <code>positon</code> 属性要设置成 <code>sticky</code>，不然一滑就没了。其他的大小和颜色就全看个人喜好了，我是和返回文章顶部按钮设置的完全一样。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-g1ru1zlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-g1ru1zlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 侧边栏样式设置 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-id">#mysidebar</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">position</span>: sticky;<br>  <span class="hljs-attribute">position</span>: -webkit-sticky;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">transition</span>: background-color .<span class="hljs-number">2s</span> ease-in-out, bottom .<span class="hljs-number">3s</span> ease;<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-id">#mysidebar</span><span class="hljs-selector-class">.mysidebar-left</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">5rem</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">58%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-header</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-header</span> <span class="hljs-selector-class">.barpack</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-header</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--sec-text-color);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5rem</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.7rem</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--board-bg-color);<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.16</span>), <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.12</span>);<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-动画设置"><a href="#4-动画设置" class="headerlink" title="4. 动画设置"></a>4. 动画设置</h1><h2 id="4-1-悬浮跳动"><a href="#4-1-悬浮跳动" class="headerlink" title="4.1 悬浮跳动"></a>4.1 悬浮跳动</h2><p>这里用了和返回顶部按钮一样的鼠标悬浮跳跃的动画，这部分代码直接参考主题源码中的写法即可。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vuh41vlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-vuh41vlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 鼠标悬浮动画 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-header</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-header</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--link-hover-color);<br>  <span class="hljs-attribute">animation-name</span>: bar-icon;<br>  <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">1s</span>;<br>  <span class="hljs-attribute">animation-delay</span>: .<span class="hljs-number">1s</span>;<br>  <span class="hljs-attribute">animation-timing-function</span>: ease-in-out;<br>  <span class="hljs-attribute">animation-iteration-count</span>: infinite;<br>  <span class="hljs-attribute">animation-fill-mode</span>: forwards;<br>  <span class="hljs-attribute">animation-direction</span>: alternate;<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-body</span> <span class="hljs-selector-class">.dom</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> bar-icon &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">0.3rem</span>);<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>左侧侧边栏切换按钮动画原方案是直接随文章进入，不过该动画现在已经弃用，换成了鼠标移动到左侧后侧边栏弹出的动画。</p><h2 id="4-2-目录切换"><a href="#4-2-目录切换" class="headerlink" title="4.2 目录切换"></a>4.2 目录切换</h2><p>由于进入页面时<a href="/post/2826041948/#5-2-%E7%9B%AE%E5%BD%95%E8%BF%9B%E5%9C%BA">目录进场动画</a>是设定了延迟的，但是在这里切换目录与分类时不希望动画有延迟，所以没办法使用同一个代码。</p><p>此处切换时进入动画的标签（<code>.container-fluid.nopadding-x aside.sidebar</code>）特地和进入页面时动画使用的标签（<code>.container-fluid.nopadding-x #mysidebar.mysidebar-right</code>）区分开来，前者中的动画是没有延迟的。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jxzvqmlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-jxzvqmlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 切换动画 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.container-fluid</span><span class="hljs-selector-class">.nopadding-x</span> <span class="hljs-selector-tag">aside</span><span class="hljs-selector-class">.sidebar</span> &#123;<br>  <span class="hljs-attribute">animation</span>: getright-post <span class="hljs-number">1s</span> ease;<br>  <span class="hljs-attribute">animation-fill-mode</span>: both;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-3-触顶显示"><a href="#4-3-触顶显示" class="headerlink" title="4.3 触顶显示"></a>4.3 触顶显示</h2><p>因为希望实现一个在页面窗口触顶时弹出侧边栏的动画，这里是考虑直接和顶部导航栏的触顶动画同步，所以就直接在顶部导航栏的相关事件中添加了代码。这里修改的是 <code>Blog\themes\fluid\source\js</code> 路径下的 <code>event.js</code> 文件。</p><p>这里的思路与导航栏动画是一致的，触顶则保留 <code>navbar-dark</code> 类 ，不触顶则换成 <code>mysidebar-collapse </code>类。</p><p>而后选择器找到不同的类，定义不同的动画，关于动画部分与<a href="#4-2-%E9%BC%A0%E6%A0%87%E8%A7%A6%E5%8F%91">鼠标触发</a>的动画合并在一起写了。</p><figure class="highlight javascript"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-07c5eulckj50kh"></i><span>javascript</span><div class="collapse show" id="collapse-07c5eulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Fluid</span>.<span class="hljs-property">events</span> = &#123;<br><span class="hljs-comment">// ————————————————————关于mysidebar的部分是自己加的——————————————————</span><br>  <span class="hljs-attr">registerNavbarEvent</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> navbar = <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#navbar&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (navbar.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> submenu = <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#navbar .dropdown-menu&#x27;</span>);<br>    <span class="hljs-keyword">var</span> mysidebar = <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#mysidebar .content-header&#x27;</span>);        <span class="hljs-comment">//自加代码</span><br>    <span class="hljs-keyword">if</span> (navbar.<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      navbar.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;navbar-dark&#x27;</span>);<br>      submenu.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;navbar-dark&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">listenScroll</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      navbar[navbar.<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span> &gt; <span class="hljs-number">50</span> ? <span class="hljs-string">&#x27;addClass&#x27;</span> : <span class="hljs-string">&#x27;removeClass&#x27;</span>](<span class="hljs-string">&#x27;top-nav-collapse&#x27;</span>);<br>      submenu[navbar.<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span> &gt; <span class="hljs-number">50</span> ? <span class="hljs-string">&#x27;addClass&#x27;</span> : <span class="hljs-string">&#x27;removeClass&#x27;</span>](<span class="hljs-string">&#x27;dropdown-collapse&#x27;</span>);<br>      mysidebar[navbar.<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span> &gt; <span class="hljs-number">50</span> ? <span class="hljs-string">&#x27;addClass&#x27;</span> : <span class="hljs-string">&#x27;removeClass&#x27;</span>](<span class="hljs-string">&#x27;mysidebar-collapse&#x27;</span>);    <span class="hljs-comment">//自加代码</span><br>      <span class="hljs-keyword">if</span> (navbar.<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        navbar.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;navbar-dark&#x27;</span>);<br>        submenu.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;navbar-dark&#x27;</span>);<br>        mysidebar.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;navbar-dark&#x27;</span>);       <span class="hljs-comment">//自加代码</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        navbar.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;navbar-dark&#x27;</span>);<br>        mysidebar.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;navbar-dark&#x27;</span>);<br>        submenu.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;navbar-dark&#x27;</span>);         <span class="hljs-comment">//自加代码</span><br>      &#125;<br>    &#125;);<br>    <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#navbar-toggler-btn&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;.animated-icon&#x27;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&#x27;open&#x27;</span>);<br>      <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;#navbar&#x27;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&#x27;navbar-col-show&#x27;</span>);<br>    &#125;);<br>  &#125;,<br><span class="hljs-comment">//————————————————————————————————————————————————————————————————————</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-4-鼠标触发"><a href="#4-4-鼠标触发" class="headerlink" title="4.4 鼠标触发"></a>4.4 鼠标触发</h2><p>左侧侧边栏切换按钮动画原方案是直接随文章进入，不过该动画现在已经弃用，换成了鼠标移动到左侧后侧边栏弹出的动画。</p><p>此处同时考虑了触顶显示和鼠标触发的两个动画，最基本的逻辑就是分找到触顶时的类 <code>.content-header.navbar-dark</code> 和代表鼠标滑动到上方的类 <code>.col-lg-2:hover .content-header.mysidebar-collapse</code> ，并设置了进场动画；然后再对于整个类 <code>.content-header</code> 设置一个出场动画，这代表不是上述两种进场情况的时候就播放出场动画。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qulkjmlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-qulkjmlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 按钮进入动画：随页面进入       该动画已弃用，替换成随鼠标出现的动画  */</span><br><span class="hljs-comment">/* .post #mysidebar.mysidebar-left&#123;</span><br><span class="hljs-comment">  animation: getnotedown 1s ease, getsolid 0.4s ease-in;</span><br><span class="hljs-comment">  animation-delay: 1s;</span><br><span class="hljs-comment">  animation-fill-mode: both;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-comment">/* 侧边栏整体进入动画 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.side-col</span><span class="hljs-selector-class">.d-none</span><span class="hljs-selector-class">.d-lg-block</span><span class="hljs-selector-class">.col-lg-2</span> <span class="hljs-selector-id">#mysidebar</span><span class="hljs-selector-class">.mysidebar-left</span> &#123;<br>  <span class="hljs-attribute">animation</span>: left-bar-come <span class="hljs-number">0.5s</span>;<br>  <span class="hljs-attribute">animation-fill-mode</span>: both;<br>  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1s</span>;<br>&#125;<br><br><span class="hljs-comment">/* 按钮进入动画：页面触顶后弹出 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.side-col</span><span class="hljs-selector-class">.d-none</span><span class="hljs-selector-class">.d-lg-block</span><span class="hljs-selector-class">.col-lg-2</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-header</span><span class="hljs-selector-class">.navbar-dark</span> &#123;<br>  <span class="hljs-attribute">animation</span>: left-bar-come <span class="hljs-number">0.5s</span>;<br>  <span class="hljs-attribute">animation-fill-mode</span>: both;<br>&#125;<br><br><span class="hljs-comment">/* 按钮进入动画：随鼠标移动出现 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.side-col</span><span class="hljs-selector-class">.d-none</span><span class="hljs-selector-class">.d-lg-block</span><span class="hljs-selector-class">.col-lg-2</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-header</span><span class="hljs-selector-class">.mysidebar-collapse</span> &#123;<br>  <span class="hljs-attribute">animation</span>: left-bar-come <span class="hljs-number">0.5s</span>;<br>  <span class="hljs-attribute">animation-fill-mode</span>: both;<br>&#125;<br><br><span class="hljs-comment">/* 按钮消失动画：鼠标移走或页面未触顶 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.side-col</span><span class="hljs-selector-class">.d-none</span><span class="hljs-selector-class">.d-lg-block</span><span class="hljs-selector-class">.col-lg-2</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-class">.content-header</span> &#123;<br>  <span class="hljs-attribute">animation</span>: left-bar-out <span class="hljs-number">0.5s</span>;<br>  <span class="hljs-attribute">animation-fill-mode</span>: both;<br>  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-comment">/* 进入动画 */</span><br><span class="hljs-keyword">@keyframes</span> left-bar-come &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">14%</span>, <span class="hljs-number">0em</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 出场动画 */</span><br><span class="hljs-keyword">@keyframes</span> left-bar-out &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0em</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">14%</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>01 博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>CSS</tag>
      
      <tag>JavaScript</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 Fluid 主题添加基础动画</title>
    <link href="/post/2826041948/"/>
    <url>/post/2826041948/</url>
    
    <content type="html"><![CDATA[<h1 id="1-所有页动画"><a href="#1-所有页动画" class="headerlink" title="1. 所有页动画"></a>1. 所有页动画</h1><h2 id="1-1-进场动画"><a href="#1-1-进场动画" class="headerlink" title="1.1 进场动画"></a>1.1 进场动画</h2><p>动画定义用到了 <code>@keyframes</code>。这里特地把透明度变化的动画单独写出来，是因为后面有不少地方想要做一个渐入效果，但是透明度变化与方位变化的时间并不统一，所以干脆就直接分成两个动画写，各自设置各自的时间。</p><p>为了使所有的页面进入时都更加平滑，所以添加了一个统一的页面进入动画，这里就用到了前面写的透明度变化的动画，然后再额外加了一个向上移动，同时设置了 <code>animation-fill-mode:both</code>，使页面渐入前不要显示出来，渐入后停在原位。同时有一个上方导航栏向下的渐入动画。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-synweqlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-synweqlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 页面进入动画 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-id">#board</span> &#123;<br>        <span class="hljs-attribute">animation</span>: getup-all <span class="hljs-number">1s</span> ease, getsolid-all <span class="hljs-number">0.4s</span> ease-in-out;<br>        <span class="hljs-attribute">animation-fill-mode</span>: both;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 上移动画 */</span><br><span class="hljs-keyword">@keyframes</span> getup-all &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4rem</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 渐入动画 */</span><br><span class="hljs-keyword">@keyframes</span> getsolid-all &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="2-主页动画"><a href="#2-主页动画" class="headerlink" title="2. 主页动画"></a>2. 主页动画</h1><h2 id="2-1-进场动画"><a href="#2-1-进场动画" class="headerlink" title="2.1 进场动画"></a>2.1 进场动画</h2><p>除去设置的通用进场动画以外，手机端为了流畅就没有设置页面进入等相关动画，取而代之的是增加了文字进入动画，通过 css 媒体查询 <code>@media</code> 来实现多端设置。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7722z0lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-7722z0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 手机端主页进入动画 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span> &#123;<br>        <span class="hljs-attribute">animation</span>: getnote-home <span class="hljs-number">1s</span> ease, getsolid-home <span class="hljs-number">0.4s</span> ease-in;<br>        <span class="hljs-attribute">animation-fill-mode</span>: both;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 文字上移动画 */</span><br><span class="hljs-keyword">@keyframes</span> getnote-home &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0rem</span>, <span class="hljs-number">3rem</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 渐入动画 */</span><br><span class="hljs-keyword">@keyframes</span> getsolid-home &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-交互动画"><a href="#2-2-交互动画" class="headerlink" title="2.2 交互动画"></a>2.2 交互动画</h2><p>因为想要在鼠标滑动的时候更有选择的感觉一些，所以设置了一个鼠标悬浮放大的动画，这里用到了伪类 <code>:hover</code> ，用于选择鼠标指针浮动在上面的元素。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-b9fg5wlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-b9fg5wlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 主页鼠标悬浮动画 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.row</span><span class="hljs-selector-class">.mx-auto</span><span class="hljs-selector-class">.index-card</span> &#123;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span> ease;<br>    &#125;<br><br>    <span class="hljs-selector-class">.row</span><span class="hljs-selector-class">.mx-auto</span><span class="hljs-selector-class">.index-card</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.05</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-归档页动画"><a href="#3-归档页动画" class="headerlink" title="3. 归档页动画"></a>3. 归档页动画</h1><h2 id="3-1-进场动画"><a href="#3-1-进场动画" class="headerlink" title="3.1 进场动画"></a>3.1 进场动画</h2><p>除去设置的通用进场动画以外，手机端为了流畅就没有设置页面进入等相关动画，取而代之的是增加了文字进入动画，通过 css 媒体查询 <code>@media</code> 来实现多端设置。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-r4lx9jlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-r4lx9jlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 手机端入场动画 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">424px</span>) &#123;<br><br>    <span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span>,<br>    <span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span>,<br>    <span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span>,<br>    <span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span>,<br>    <span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span> &#123;<br>        <span class="hljs-attribute">animation</span>: getnote-archive <span class="hljs-number">1s</span> ease, getsolid-archive <span class="hljs-number">0.4s</span> ease-in;<br>        <span class="hljs-attribute">animation-fill-mode</span>: both;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 文字上移动画 */</span><br><span class="hljs-keyword">@keyframes</span> getnote-archive &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0rem</span>, <span class="hljs-number">3rem</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 渐入动画 */</span><br><span class="hljs-keyword">@keyframes</span> getsolid-archive &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-2-交互动画"><a href="#3-2-交互动画" class="headerlink" title="3.2 交互动画"></a>3.2 交互动画</h2><p>归档页除了保留本身 Fluid 主题自带的鼠标悬浮换色的动画以外，还额外添加了鼠标悬浮放大，同样用到了伪类 <code>:hover</code> 。然后调大了一点字体，针对不同大小的设备又做了一些调整。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-doaz06lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-doaz06lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 归档页悬停动画 */</span><br><span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span> &#123;<br>    <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span> ease-out;<br>&#125;<br><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">424px</span>) &#123;<br><br>    <span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span><span class="hljs-selector-pseudo">:hover</span>,<br>    <span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span><span class="hljs-selector-pseudo">:hover</span>,<br>    <span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span><span class="hljs-selector-pseudo">:hover</span>,<br>    <span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span><span class="hljs-selector-pseudo">:hover</span>,<br>    <span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.02</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-分类页动画"><a href="#4-分类页动画" class="headerlink" title="4. 分类页动画"></a>4. 分类页动画</h1><h2 id="4-1-进场动画"><a href="#4-1-进场动画" class="headerlink" title="4.1 进场动画"></a>4.1 进场动画</h2><p>除去设置的通用进场动画以外，手机端为了流畅就没有设置页面进入等相关动画，取而代之的是增加了文字进入动画，通过 css 媒体查询 <code>@media</code> 来实现多端设置。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-y3ttm7lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-y3ttm7lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 手机端入场动画 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">424px</span>) &#123;<br><br>    <span class="hljs-selector-class">.categories</span> <span class="hljs-selector-class">.category-item</span>,<br>    <span class="hljs-selector-class">.categories</span> <span class="hljs-selector-class">.category-count</span> &#123;<br>        <span class="hljs-attribute">animation</span>: getnote-category <span class="hljs-number">1s</span> ease, getsolid-category <span class="hljs-number">0.4s</span> ease-in;<br>        <span class="hljs-attribute">animation-fill-mode</span>: both;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 文字上移动画 */</span><br><span class="hljs-keyword">@keyframes</span> getnote-category &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0rem</span>, <span class="hljs-number">3rem</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 渐入动画 */</span><br><span class="hljs-keyword">@keyframes</span> getsolid-category &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-交互动画"><a href="#4-2-交互动画" class="headerlink" title="4.2 交互动画"></a>4.2 交互动画</h2><p>分类页和归档页一样，除了保留本身 Fluid 主题自带的鼠标悬浮换色的动画以外，还额外添加了鼠标悬浮放大，同样用到了伪类 <code>:hover</code> 。然后调大了一点字体，针对不同大小的设备又做了一些调整。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h6d226lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-h6d226lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 分类页悬停动画 */</span><br><span class="hljs-selector-class">.categories</span> <span class="hljs-selector-id">#board</span> <span class="hljs-selector-class">.category-post-list</span> <span class="hljs-selector-class">.list-group-item</span> &#123;<br>    <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span> ease-out;<br>&#125;<br><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.categories</span> <span class="hljs-selector-class">.category-post-list</span> <span class="hljs-selector-class">.list-group-item</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.02</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="5-文章页动画"><a href="#5-文章页动画" class="headerlink" title="5. 文章页动画"></a>5. 文章页动画</h1><h2 id="5-1-页面进场"><a href="#5-1-页面进场" class="headerlink" title="5.1 页面进场"></a>5.1 页面进场</h2><p>除去设置的通用进场动画以外，手机端为了流畅就没有设置页面进入等相关动画，取而代之的是增加了文字进入动画，通过 css 媒体查询 <code>@media</code> 来实现多端设置。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-p54qwhlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-p54qwhlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 手机端文字进入 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.container-fluid</span><span class="hljs-selector-class">.nopadding-x</span> <span class="hljs-selector-class">.post-content</span> &#123;<br>        <span class="hljs-attribute">animation</span>: getnote-post <span class="hljs-number">1s</span> ease, getsolid-post <span class="hljs-number">0.4s</span> ease-in;<br>        <span class="hljs-attribute">animation-fill-mode</span>: both;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 文字上移动画 */</span><br><span class="hljs-keyword">@keyframes</span> getnote-post &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0rem</span>, <span class="hljs-number">3rem</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 渐入动画 */</span><br><span class="hljs-keyword">@keyframes</span> getsolid-post &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-2-目录进场"><a href="#5-2-目录进场" class="headerlink" title="5.2 目录进场"></a>5.2 目录进场</h2><p>文章页的目录设置了一个从左向右的入场动画，设置了 <code>animation-delay: 0.5s</code> ，会比文章页面整体进入要晚一点。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2m9lzwlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-2m9lzwlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*目录进入动画 */</span><br><span class="hljs-selector-class">.container-fluid</span><span class="hljs-selector-class">.nopadding-x</span> <span class="hljs-selector-id">#mysidebar</span> <span class="hljs-selector-id">#mysidebar-body</span> &#123;<br>    <span class="hljs-attribute">animation</span>: getright-post <span class="hljs-number">1s</span> ease;<br>    <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.5s</span>;<br>    <span class="hljs-attribute">animation-fill-mode</span>: both;<br><br>&#125;<br><br><span class="hljs-selector-class">.container-fluid</span><span class="hljs-selector-class">.nopadding-x</span> <span class="hljs-selector-tag">aside</span><span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-class">.category-list</span> &#123;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">1rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* 右移渐入动画 */</span><br><span class="hljs-keyword">@keyframes</span> getright-post &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">1.5em</span>, <span class="hljs-number">0em</span>);<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-3-标题进场"><a href="#5-3-标题进场" class="headerlink" title="5.3 标题进场"></a>5.3 标题进场</h2><p>文章页的标题没有使用打字机效果，所以增加了一个从上到下的入场动画，和页面整体入场是同时进行的。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nbiym1lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-nbiym1lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 文章页标题进入 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.banner-text</span><span class="hljs-selector-class">.text-center</span><span class="hljs-selector-class">.fade-in-up</span> &#123;<br>    <span class="hljs-attribute">animation</span>: getnotedown <span class="hljs-number">1s</span> ease, getsolid-post <span class="hljs-number">0.4s</span> ease-in;<br>    <span class="hljs-attribute">animation-fill-mode</span>: both;<br>&#125;<br><br><span class="hljs-comment">/* 文字下移动画 */</span><br><span class="hljs-keyword">@keyframes</span> getnotedown-post &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0rem</span>, -<span class="hljs-number">3rem</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="6-关于页动画"><a href="#6-关于页动画" class="headerlink" title="6. 关于页动画"></a>6. 关于页动画</h1><h2 id="6-1-进场动画"><a href="#6-1-进场动画" class="headerlink" title="6.1 进场动画"></a>6.1 进场动画</h2><p>除去设置的通用进场动画以外，关于页因为有头像，所以额外设置了一个头像的入场动画，这样显得比较有层次感。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-u0tsyblckj50kh"></i><span>css</span><div class="collapse show" id="collapse-u0tsyblckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 关于页图标动画 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.about</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.img-fluid</span> &#123;<br>        <span class="hljs-attribute">animation</span>: getdown-about <span class="hljs-number">0.5s</span> ease, getsolid-about <span class="hljs-number">0.4s</span> ease;<br>        <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.5s</span>;<br>        <span class="hljs-attribute">animation-fill-mode</span>: both;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 头像下移动画 */</span><br><span class="hljs-keyword">@keyframes</span> getdown-about &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0rem</span>, -<span class="hljs-number">2rem</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 渐入动画 */</span><br><span class="hljs-keyword">@keyframes</span> getsolid-about &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 手机端入场动画和字体修改 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">424px</span>) &#123;<br>    <span class="hljs-selector-class">.about</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span> &#123;<br>        <span class="hljs-attribute">animation</span>: getnote-about <span class="hljs-number">1s</span> ease, getsolid-about <span class="hljs-number">0.4s</span> ease-in;<br>        <span class="hljs-attribute">animation-fill-mode</span>: both;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 文字上移动画 */</span><br><span class="hljs-keyword">@keyframes</span> getnote-about &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0rem</span>, <span class="hljs-number">3rem</span>);<br>    &#125;<br><br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="7-自定页动画"><a href="#7-自定页动画" class="headerlink" title="7. 自定页动画"></a>7. 自定页动画</h1><p>自定义页并未再单独做动画，而是直接和<a href="#3-%E5%BD%92%E6%A1%A3%E9%A1%B5%E5%8A%A8%E7%94%BB">归档页动画</a>一起设置，这主要还是为了风格统一。</p>]]></content>
    
    
    <categories>
      
      <category>01 博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>CSS</tag>
      
      <tag>JavaScript</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 fluid 主题基础样式修改</title>
    <link href="/post/3433766775/"/>
    <url>/post/3433766775/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>从准备搭建个人博客到今天，陆陆续续也快过去接近一个月了。刚好现在正是国庆假期，于是给自己放个小假，做点自己想做的事情。</p><p>因为之前完全没有接触过前端的东西，所以除了按照 Fluid 主题官方的使用文档和官网提供的功能进行基本配置以外，基本上就是到处去看别人的页面源代码，大量阅读然后再自己复制一些看看效果，查一些标签的用法，等大致上能看懂后就根据自己的需求修改。整个过程确实艰难，如果不是我对于美观有着惊人的执著，大概我已经放弃了。</p><p>博客框架使用的是 <a href="https://hexo.io/zh-cn/">Hexo</a>，主题是 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>。代码大概还有很多不规范的地方，等以后正式学习前端知识后应该会再整理一遍。</p><p>css 文件都一律放在了 <code>Blog\source\css\fluid</code> 路径下，然后按照 Fluid 主题官方文档中的方式进行引入，不会修改源码。js 文件一部分是放在主题的文件夹下并会表明路径，除此之外还有一小部分就是直接修改主题的源码了。</p><h1 id="2-代码注入器"><a href="#2-代码注入器" class="headerlink" title="2. 代码注入器"></a>2. 代码注入器</h1><p><a href="https://hexo.io/zh-cn/api/injector.html">Hexo 注入器</a>是 Hexo 5 版本自身加入的一项新功能，Fluid 主题还提供了更细致的注入器，不过我用 Hexo 的注入器就已经能满足基本需求了。</p><p>这里主要是给不同的页面的 <code>&lt;body&gt;</code> 标签内部又包上了一层标签，这样就可以通过标签来实现修改特定页面的元素 css 样式。</p><p>代码如下，文件路径遵照官方使用文档放在了 <code>Blog\scripts</code> 。</p><figure class="highlight js"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2n283hlckj50kh"></i><span>js</span><div class="collapse show" id="collapse-2n283hlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;civilEngineeringBody&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;civileng&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;civileng&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;categories&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;categories&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;category&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;category&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;category&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;category&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;archive&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;archive&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;archive&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;about&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;about&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;about&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;home&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;home&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;home&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;post&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;tag&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;tag&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;tag&#x27;</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_begin&#x27;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;thesisReading&quot;&gt;&#x27;</span>, <span class="hljs-string">&#x27;thesisReading&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>, <span class="hljs-string">&#x27;thesisReading&#x27;</span>);<br></code></pre></td></tr></table></div></figure><p>像这样设置后，比如我之后只想针对文章页面的元素修改，只需要在 css 选择器的开头加上 <code>.post</code> 就可以了。</p><h1 id="3-主页样式"><a href="#3-主页样式" class="headerlink" title="3. 主页样式"></a>3. 主页样式</h1><p>暂无。</p><h1 id="4-归档页样式"><a href="#4-归档页样式" class="headerlink" title="4. 归档页样式"></a>4. 归档页样式</h1><h2 id="4-1-字体大小"><a href="#4-1-字体大小" class="headerlink" title="4.1 字体大小"></a>4.1 字体大小</h2><p>归档页针对不同端页面调整了字体的大小，通过 css 媒体查询 <code>@media</code> 来实现多端设置。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uce5dvlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-uce5dvlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 归档页字体修改 */</span><br><span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span>,<br><span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span>,<br><span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span>,<br><span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span>,<br><span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">2rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span>,<br><span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span>,<br><span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span>,<br><span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span>,<br><span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.1rem</span>;<br>&#125;<br><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">767px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">575px</span>) &#123;<br><br>    <span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span>,<br>    <span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span>,<br>    <span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span>,<br>    <span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span>,<br>    <span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> &#123;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">2rem</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 手机端字体修改 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">424px</span>) &#123;<br><br>    <span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br>    <span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br>    <span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br>    <span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br>    <span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span>,<br>    <span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span>,<br>    <span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span>,<br>    <span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span>,<br>    <span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h4</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span>,<br>    <span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span>,<br>    <span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span>,<br>    <span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span>,<br>    <span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.3rem</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group-item</span> <span class="hljs-selector-tag">time</span> &#123;<br>        <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-日期靠右"><a href="#4-2-日期靠右" class="headerlink" title="4.2 日期靠右"></a>4.2 日期靠右</h2><p>Fluid 主题原本的归档页日期和标题都是靠左显示的，导致右边看起来很空，所以我就想着把日期放到右边去。</p><p>这里直接修改了主题的源码，在 <code>Blog\themes\fluid\layout\_partials</code> 路径下的 <code>archive-list.ejs</code> 文件，修改的内容已经标注出来了，就是对换了div 和 time 标签的顺序，让先显示标题再显示时间。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-j3r3k5lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-j3r3k5lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;list-group&quot;&gt;<br>  &lt;<span class="hljs-selector-tag">p</span> class=&quot;<span class="hljs-selector-tag">h4</span>&quot;&gt;&lt;%= __(params<span class="hljs-selector-class">.key</span> + &#x27;<span class="hljs-selector-class">.post_total</span>&#x27;, params<span class="hljs-selector-class">.postTotal</span>) %&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;hr&gt;<br>  &lt;% <span class="hljs-selector-tag">var</span> dateCursor %&gt;<br>  &lt;% page<span class="hljs-selector-class">.posts</span><span class="hljs-selector-class">.each</span>(function (post) &#123; %&gt;<br>    &lt;% if(date(post<span class="hljs-selector-class">.date</span>, &quot;YYYY&quot;) !== dateCursor) &#123; %&gt;<br>      &lt;% dateCursor = date(post<span class="hljs-selector-class">.date</span>, &quot;YYYY&quot;) %&gt;<br>      &lt;<span class="hljs-selector-tag">p</span> class=&quot;<span class="hljs-selector-tag">h5</span>&quot;&gt;&lt;%= dateCursor %&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;% &#125; %&gt;<br>    &lt;<span class="hljs-selector-tag">a</span> href=&quot;&lt;%= url_for(post<span class="hljs-selector-class">.path</span>) %&gt;&quot; class=&quot;list-group-item list-group-item-action&quot;&gt;     <br>      &lt;!-- 此处自己修改了显示顺序 --&gt;<br>      &lt;<span class="hljs-selector-tag">div</span> class=&quot;list-group-item-title&quot;&gt;&lt;%= post<span class="hljs-selector-class">.title</span> %&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>      &lt;<span class="hljs-selector-tag">time</span>&gt;&lt;%= date(post<span class="hljs-selector-class">.date</span>, &quot;MM-<span class="hljs-selector-tag">DD</span>&quot;) %&gt;&lt;/<span class="hljs-selector-tag">time</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">a</span>&gt;<br>  &lt;% &#125;) %&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;%- partial(&#x27;_partials/paginator&#x27;) %&gt;<br></code></pre></td></tr></table></div></figure><p>然后要使时间靠右边显示，要设置一下 css 样式 <code>justify-content: space-between</code>，它会把子元素靠边对齐平均分剩余的空间，这样就达到想要的效果了。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qcn2ftlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-qcn2ftlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 设置日期在右侧显示 */</span><br><span class="hljs-selector-class">.archive</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.category</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.thesisReading</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span>,<br><span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span> &#123;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="5-分类页样式"><a href="#5-分类页样式" class="headerlink" title="5. 分类页样式"></a>5. 分类页样式</h1><h2 id="5-1-隐藏分类"><a href="#5-1-隐藏分类" class="headerlink" title="5.1 隐藏分类"></a>5.1 隐藏分类</h2><p class="note note-info">本功能已停止，该部分内容已经过时，仅留作备份</p><p>在文章中我添加了一个分类用来保存文献阅读的笔记，但是并不希望这个分类在分类页中显示出来，所以设置了不显示。</p><p>因为我分类在命名时都会加上序号，所以文献阅读笔记这个分类我没加序号，按照顺序是排在最后一个的，所以用 css 选择器找最后一元素即可。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-v5xnc8lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-v5xnc8lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 不显示文献阅读笔记*/</span><br><span class="hljs-selector-class">.categories</span> <span class="hljs-selector-class">.category-list</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.category</span><span class="hljs-selector-class">.row</span><span class="hljs-selector-class">.nomargin-x</span><span class="hljs-selector-pseudo">:last-child</span>&#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125; <br></code></pre></td></tr></table></div></figure><h2 id="5-2-字体大小"><a href="#5-2-字体大小" class="headerlink" title="5.2 字体大小"></a>5.2 字体大小</h2><p>分类页针对不同端页面调整了字体的大小，通过 css 媒体查询 <code>@media</code> 来实现多端设置。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kvdhamlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-kvdhamlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 分类页字体修改 */</span><br><span class="hljs-selector-class">.categories</span> <span class="hljs-selector-id">#board</span> <span class="hljs-selector-class">.category-post-list</span> <span class="hljs-selector-class">.list-group-item</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.1rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.categories</span> <span class="hljs-selector-id">#board</span> <span class="hljs-selector-class">.category-item</span>,<br><span class="hljs-selector-class">.categories</span> <span class="hljs-selector-id">#board</span> <span class="hljs-selector-class">.category-subitem</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.categories</span> <span class="hljs-selector-class">.category-count</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* 手机端字体修改 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">424px</span>) &#123;<br><br>    <span class="hljs-selector-class">.categories</span> <span class="hljs-selector-id">#board</span> <span class="hljs-selector-class">.category-post-list</span> <span class="hljs-selector-class">.list-group-item</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.categories</span> <span class="hljs-selector-id">#board</span> <span class="hljs-selector-class">.category-item</span>,<br>    <span class="hljs-selector-class">.categories</span> <span class="hljs-selector-id">#board</span> <span class="hljs-selector-class">.category-subitem</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.3rem</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.categories</span> <span class="hljs-selector-class">.category-count</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9rem</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="7-文章页样式"><a href="#7-文章页样式" class="headerlink" title="7. 文章页样式"></a>7. 文章页样式</h1><h2 id="7-1-页边距"><a href="#7-1-页边距" class="headerlink" title="7.1 页边距"></a>7.1 页边距</h2><p>Fluid 主题默认的页边距有点宽了两边空白很多，所以最后修改了页边距，并将整体文章宽度往左侧拉长了，这样能显示更多的内容。这里参考了 <a href="http://lzqlearn.com/blog/6560820db005/#2-%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98">Gilgamesh’s Blog</a> 的一篇文章。</p><p>左边有很大的空隙，所以把页面整体往左加宽了，后面换了高分屏之后又补充了修改。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w1ip2clckj50kh"></i><span>css</span><div class="collapse show" id="collapse-w1ip2clckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*修改文章页页边距*/</span><br><span class="hljs-selector-class">.post-content</span> &#123;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">8%</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">8%</span>;<br>&#125;<br><br><span class="hljs-comment">/* 修改页面宽度 */</span><br><span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-id">#board</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">120%</span>;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">18%</span>;<br>&#125;<br><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">993px</span>) &#123;<br>    <span class="hljs-selector-class">.col-lg-8</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.nopadding-x-md</span> <span class="hljs-selector-id">#board</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0%</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 解决高分屏下元素过宽的问题 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.row</span><span class="hljs-selector-class">.nomargin-x</span> &#123;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100rem</span>;<br>    <span class="hljs-attribute">margin-right</span>: auto <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">margin-left</span>: auto <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="7-2-图片居中"><a href="#7-2-图片居中" class="headerlink" title="7.2 图片居中"></a>7.2 图片居中</h2><p>这里不得不提 Fluid 主题很让强迫症难受的地方，那就是图片和表格没有居中。图片的处理就很简单粗暴了，我是直接在写笔记的时候给所有图片都设置一个 class，之后再设定样式。</p><p>这是 markdown 文章中插入图片后设置的部分：<code>&lt;img src=&quot;...&quot; class=&quot;img-center&quot; style=&quot;...&quot; /&gt;</code></p><p>然后 css 文件中代码如下，直接用选择器找设定的 img-center 就好。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-phepydlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-phepydlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*设置图片居中*/</span><br><span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.img-center</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="7-3-特殊文字"><a href="#7-3-特殊文字" class="headerlink" title="7.3 特殊文字"></a>7.3 特殊文字</h2><p>因为笔记中有一些想要重点强调的部分，代码块也不喜欢用灰扑扑的默认样式，所以自己设定了一下。</p><p>在 markdown 文章中用标签包裹住内容：<code>&lt;font class=&quot;word-stress&quot;&gt;内容&lt;/font&gt;</code> ，之后渲染成网页后就能看到效果了。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fwycc1lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-fwycc1lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 设置特殊文字样式 */</span><br><span class="hljs-attribute">font</span><span class="hljs-selector-class">.code-word</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--code-word-color);<br>&#125;<br><br><span class="hljs-attribute">font</span><span class="hljs-selector-class">.code-sentence</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--code-sentence-color);<br>&#125;<br><br><span class="hljs-attribute">font</span><span class="hljs-selector-class">.word-stress</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#008B8B</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="7-4-表格样式"><a href="#7-4-表格样式" class="headerlink" title="7.4 表格样式"></a>7.4 表格样式</h2><p>主题本身好像就不支持表格居中，所以一直没弄成。后面换了一种思路，就是把表格直接全部拉长到和页面齐宽。</p><p>为了实现这一点，需要在笔记中写表格的时候，先设置好了每一列的宽度，加起来等于100%。但这样设置好之后，网页上的表格仍然无法撑满整个页面宽度。最后试了各种各样的方式，找到了一个可行的办法，只是还没有弄懂是什么原理。</p><p>需要使用 html 创建表格，并多创建一列，将多的一列的 margin 和 padding 全部设置成0，相当于是完全隐身的。在文章中用这种形式写表格，也不会影响到我在本地 Typora 上的阅读。同时加上 <code>class=&quot;myform&quot;</code> 是为了防止后续修改样式时修改到代码块的样式。</p><figure class="highlight html"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-m2wsm3lckj50kh"></i><span>html</span><div class="collapse show" id="collapse-m2wsm3lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myform&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">50%</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">50%</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding:0; margin:0;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>我比较喜欢 Typora 主题中表格样式，所以照着它设置了表格样式，代码中注释掉的部分是之前写的无内框的留作备份，不过现在还是用有边框的样式了。</p><p>除此之外还设置表格在一行显示，显示外的部分可以拖动下方进度条看到，这样就避免了换行显示。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-otafmalckj50kh"></i><span>css</span><div class="collapse show" id="collapse-otafmalckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 设置表格样式 */</span><br><span class="hljs-selector-tag">table</span><span class="hljs-selector-class">.myform</span> <span class="hljs-selector-tag">tbody</span> &#123;<br>    <span class="hljs-attribute">border-spacing</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-collapse</span>: collapse;<br>    <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>    <span class="hljs-attribute">word-break</span>: keep-all;<br>    <span class="hljs-attribute">white-space</span>: nowrap;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-comment">/* 表格边框样式：有内框 */</span><br><span class="hljs-selector-tag">table</span><span class="hljs-selector-class">.myform</span> <span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">td</span> &#123;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    border-left-width: 0;</span><br><span class="hljs-comment">    border-right-width :0; */</span><br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">var</span>(--form-border-color);<br>&#125;<br><br><span class="hljs-selector-tag">table</span><span class="hljs-selector-class">.myform</span> <span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">th</span> &#123;<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">var</span>(--form-border-color);<br>&#125;<br><br><span class="hljs-selector-tag">table</span><span class="hljs-selector-class">.myform</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n+<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--form-color);<br>&#125;<br><br><span class="hljs-selector-tag">table</span><span class="hljs-selector-class">.myform</span> <span class="hljs-selector-tag">th</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* table.myform td:first-child &#123;</span><br><span class="hljs-comment">    border-left-width: 1px;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  table.myform th:first-child &#123;</span><br><span class="hljs-comment">    border-left-width: 1px;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  table.myform td:last-child &#123;</span><br><span class="hljs-comment">    border-right-width: 1px;</span><br><span class="hljs-comment">  &#125; */</span><br></code></pre></td></tr></table></div></figure><h2 id="7-5-文中折叠栏"><a href="#7-5-文中折叠栏" class="headerlink" title="7.5 文中折叠栏"></a>7.5 文中折叠栏</h2><p class="note note-info">本功能已停止，该部分内容已经过时，仅留作备份</p><p>这部分代码主要是之前在文章内部搞了一个分类折叠栏，现在因为找到了更好的方式，所以已经不用了，放在这作为备用。</p><p>这里用到了 bootstrap 工具包，参考了 <a href="https://kiyanyang.github.io/">Kiyan’s Blog</a>，但这位博主其实也没有教程，我是在阅读折叠代码块的相关内容时发现页面有这个功能，然后直接去看的页面源码并查了不少相关知识然后写出来的。</p><p>在 markdown 文章中可以用 html 像这样写一个目录栏。</p><figure class="highlight html"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wi0a6wlckj50kh"></i><span>html</span><div class="collapse show" id="collapse-wi0a6wlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;categoryinpost&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapsed&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;collapse&quot;</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-angle-down&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>分类名称<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapse titleblock&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;titleblock&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>标题一<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>标题二<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>这样文章中折叠栏就已经有了，然后再在 css 文件中设定样式并加一个图标动画。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-j1p72ilckj50kh"></i><span>css</span><div class="collapse show" id="collapse-j1p72ilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 文中分类折叠栏：现在已关闭 */</span><br><span class="hljs-selector-class">.categoryinpost</span> &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.15em</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--highlight-bg-color);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.15em</span>;<br>&#125;<br><br><span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-tag">button</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">border</span>: none;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--text-color);<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--highlight-bg-color);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-tag">button</span>&gt;<span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0.75rem</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0.5rem</span>;<br>    <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.35s</span> ease;<br>    -o-<span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.35s</span> ease;<br>    -moz-<span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.35s</span> ease;<br>    -webkit-<span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.35s</span> ease;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;<br>&#125;<br><br><span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.collapsed</span>&gt;<span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">90deg</span>);<br>&#125;<br><br><span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-class">.titleblock</span> &#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0.75em</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0.75em</span>;<br>&#125;<br><br><span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-class">.title</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--text-color);<br>&#125;<br><br><span class="hljs-selector-class">.categoryinpost</span> <span class="hljs-selector-class">.dropdown-divider</span> &#123;<br>    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--form-color);<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.15em</span>;<br>&#125;<br><br></code></pre></td></tr></table></div></figure><h2 id="7-6-代码块折叠"><a href="#7-6-代码块折叠" class="headerlink" title="7.6 代码块折叠"></a>7.6 代码块折叠</h2><p>这里基本上完全参考了 <a href="https://kiyanyang.github.io/posts/c4dd4019/">Kiyan’s Blog</a> 的文章，文章的大致思路就是自定义一个过滤器，在文章完成渲染后，通过替换掉部份代码，来增加折叠功能的代码。如果还想要实现一些功能的话，可以修改 js 文件中 replace 替换代码的部分。</p><p>js 文件需要放在 <code>Blog\themes\fluid\scripts</code> 路径下，代码如下。</p><figure class="highlight js"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-92nupulckj50kh"></i><span>js</span><div class="collapse show" id="collapse-92nupulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取唯一 ID</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUuid</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>) + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>);<br>&#125;<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<br>  <span class="hljs-string">&quot;after_post_render&quot;</span>,<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; line_number, lib &#125; = hexo.<span class="hljs-property">theme</span>.<span class="hljs-property">config</span>.<span class="hljs-property">code</span>.<span class="hljs-property">highlight</span>;<br><br>    <span class="hljs-keyword">let</span> reg;<br>    <span class="hljs-keyword">if</span> (lib === <span class="hljs-string">&quot;highlightjs&quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (line_number) &#123;<br>        reg = <span class="hljs-regexp">/(&lt;figure class=&quot;highlight.+?&gt;)(.+?hljs (.*?)&quot;.+?)(&lt;\/figure&gt;)/gim</span>s;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reg = <span class="hljs-regexp">/(&lt;div class=&quot;code-wrapper.+?&gt;)(.+?hljs (.*?)&quot;.+?)(&lt;\/div&gt;)/gim</span>s;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lib === <span class="hljs-string">&quot;prismjs&quot;</span>) &#123;<br>      reg = <span class="hljs-regexp">/(&lt;div class=&quot;code-wrapper.+?&gt;)(.+?data-language=&quot;(.*?)&quot;.+?)(&lt;\/div&gt;)/gim</span>s;<br>    &#125;<br><br>    data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(reg, <span class="hljs-function">(<span class="hljs-params">match, begin, inner, lang, end, offset, string</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> collapseId = <span class="hljs-string">`collapse-<span class="hljs-subst">$&#123;getUuid()&#125;</span>`</span>;<br>      <span class="hljs-comment">//                             ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 设置折叠按钮图标，此处使用 angle-down 图标</span><br>      <span class="hljs-keyword">const</span> collapseBtn = <span class="hljs-string">`&lt;i class=&quot;fa fa-angle-down&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#<span class="hljs-subst">$&#123;collapseId&#125;</span>&quot;&gt;&lt;/i&gt;`</span>;<br>      <span class="hljs-keyword">const</span> collapseDiv = <span class="hljs-string">`&lt;div class=&quot;collapse show&quot; id=&quot;<span class="hljs-subst">$&#123;collapseId&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;inner&#125;</span>&lt;/div&gt;`</span>;<br>      <span class="hljs-keyword">const</span> langSpan = <span class="hljs-string">`&lt;span&gt;<span class="hljs-subst">$&#123;lang&#125;</span>&lt;/span&gt;`</span>;<br>      <span class="hljs-keyword">return</span> begin + collapseBtn + langSpan + collapseDiv + end;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;,<br>  <span class="hljs-number">10000</span> <span class="hljs-comment">// 应该在完成其他渲染后执行，因此将优先级设大一点</span><br>);<br></code></pre></td></tr></table></div></figure><p>然后在 styl 文件设置相关的样式即可，我按照我自己的喜好修改了原文的一些设置。</p><figure class="highlight styl"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9sg9w2lckj50kh"></i><span>styl</span><div class="collapse show" id="collapse-9sg9w2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.highlight</span>,<br><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.code-wrapper</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--highlight-title-bg-color);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <br>  <span class="hljs-comment">// 折叠图标</span><br>  &gt; <span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0.6rem</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0.7rem</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2rem</span>;<br>    <span class="hljs-attribute">transform</span>: none;<br>    <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> ease-in-out, transform <span class="hljs-number">0.2s</span> ease-in-out;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br><br>    &amp;<span class="hljs-selector-class">.collapsed</span> &#123;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">90deg</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 代码语言</span><br>  &gt; <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Arial&quot;</span>;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 复制按钮</span><br><span class="hljs-selector-class">.copy-btn</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br><br>  &gt; <span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span> <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>由于发现代码块在 ios 端显示有一些不对劲，所以自己又在 css 文件中添加了样式。</p><p>主要是填充了背景，然后取消了行号的 sticky 属性，因为如果行号设置了 sticky，那么在 ios 端下面的滑动条会被覆盖住很不美观，暂时还未找到解决办法。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-e89ta0lckj50kh"></i><span>css</span><div class="collapse show" id="collapse-e89ta0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 代码块样式修改 */</span><br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> <span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--highlight-bg-color) <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br>    -o-<span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br>    -moz-<span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br>    -webkit-<span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span><span class="hljs-selector-class">.gutter</span> &#123;<br>    <span class="hljs-attribute">position</span>: static;<br>    <span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">figure</span><span class="hljs-selector-class">.highlight</span> <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span><span class="hljs-selector-class">.code</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="7-7-标题下方信息"><a href="#7-7-标题下方信息" class="headerlink" title="7.7 标题下方信息"></a>7.7 标题下方信息</h2><p>虽然 Fluid 主题自带了显示更新日期，但那是以标签的形式显示在文章中，我想实现的效果是在标题下方和文章时间这些信息一起显示。</p><p>这里需要修改主题的源码，在 <code>Blog\themes\fluid\layout\_partials\post</code> 路径下的 <code>meta-top.ejs</code> 文件，在结尾处添上一段。</p><p>这段代码本身不复杂，格式照着该文件的其他内容写就好。关于更新日期的获取，这部分代码是直接复制主题中 <code>post.ejs</code> 的内容，也就是原本主题自带的在文章中显示的代码内容。</p><figure class="highlight plaintext"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ht2ky2lckj50kh"></i><span>ejs</span><div class="collapse show" id="collapse-ht2ky2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% if (page.meta !== false) &#123; %&gt;<br><br>  &lt;!-- 这里是原本的代码部分，在这之后添加如下内容 --&gt;<br>  <br>  &lt;span class=&quot;myupdated&quot;&gt;<br>    &lt;% if (theme.post.updated &amp;&amp; compare_date(page.date, page.updated)) &#123; %&gt;<br>      &lt;i class=&quot;fa fa-repeat&quot; aria-hidden=&quot;true&quot; style=&quot;margin-right: 0.3rem;&quot;&gt;&lt;/i&gt;<br>      &lt;span class=&quot;post-meta &quot;&gt;<br>        &lt;% if (theme.post.updated.relative) &#123; %&gt;<br>          &lt;% if (theme.post.updated.content) &#123; %&gt;<br>            &lt;!-- compatible with older versions--&gt;<br>            &lt;%- theme.post.updated.content %&gt;&lt;%- relative_date(page.updated, theme.post.updated.date_format) %&gt;<br>          &lt;% &#125; else &#123; %&gt;<br>            &lt;%- __(&#x27;post.updated&#x27;, relative_date(page.updated, theme.post.updated.date_format)) %&gt;<br>          &lt;% &#125; %&gt;<br>        &lt;% &#125; else &#123; %&gt;<br>          &lt;% if (theme.post.updated.content) &#123; %&gt;<br>            &lt;!-- compatible with older versions--&gt;<br>            &lt;%- theme.post.updated.content %&gt;&lt;%- date(page.updated, theme.post.updated.date_format) %&gt;<br>          &lt;% &#125; else &#123; %&gt;<br>            &lt;%- __(&#x27;post.updated&#x27;, date(page.updated, theme.post.updated.date_format)) %&gt;<br>          &lt;% &#125; %&gt;<br>        &lt;% &#125; %&gt;<br>      &lt;/span&gt;<br>    &lt;% &#125; %&gt;<br>  &lt;/span&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></div></figure><p>如果想要修改具体的显示内容的话，还可以到 <code>Blog\themes\fluid\languages</code> 路径下去修改 <code>zh-CN.yml</code> 文件，找到以下内容换成自己想要显示的就好，我这里是直接去掉了全部文字。</p><figure class="highlight yml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uyhgfhlckj50kh"></i><span>yml</span><div class="collapse show" id="collapse-uyhgfhlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">toc:</span> <span class="hljs-string">&#x27;目录&#x27;</span><br>  <span class="hljs-attr">prev_post:</span> <span class="hljs-string">&#x27;上一篇&#x27;</span><br>  <span class="hljs-attr">next_post:</span> <span class="hljs-string">&#x27;下一篇&#x27;</span><br>  <span class="hljs-comment"># 此处自己修改了update的显示内容，去掉了文字。</span><br>  <span class="hljs-attr">updated:</span> <span class="hljs-string">&#x27;%s&#x27;</span>   <br></code></pre></td></tr></table></div></figure><h2 id="7-8-Tabs-标签"><a href="#7-8-Tabs-标签" class="headerlink" title="7.8 Tabs 标签"></a>7.8 Tabs 标签</h2><p>这里使用了插件 <a href="https://github.com/YunYouJun/hexo-tag-common">Hexo-tag-common</a> ，插件的使用教程按照官方给的来就行，这里针对该标签进行了样式适配。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bk8g7klckj50kh"></i><span>css</span><div class="collapse show" id="collapse-bk8g7klckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 修改tabs标签内边距 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.tag-common</span><span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-class">.tab-content</span> <span class="hljs-selector-class">.tab-pane</span>,<br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.tabs-comment</span> <span class="hljs-selector-class">.tab-content</span> <span class="hljs-selector-class">.tab-pane</span> &#123;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 修改tabs标签外边框 */</span><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.tag-common</span><span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-class">.tab-content</span>,<br><span class="hljs-selector-class">.tabs-comment</span> <span class="hljs-selector-class">.tab-content</span> &#123;<br>    <span class="hljs-attribute">border</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.tag-common</span><span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.nav-tabs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.tab</span>,<br><span class="hljs-selector-class">.tabs-comment</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.nav-tabs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.tab</span> &#123;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--line-color);<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.tag-common</span><span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.nav-tabs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.tab</span><span class="hljs-selector-class">.active</span>,<br><span class="hljs-selector-class">.tabs-comment</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.nav-tabs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.tab</span><span class="hljs-selector-class">.active</span> &#123;<br>    <span class="hljs-attribute">border-top-color</span>: <span class="hljs-built_in">var</span>(--tabs-color);<br>    <span class="hljs-attribute">border-left-color</span>: <span class="hljs-built_in">var</span>(--line-color);<br>    <span class="hljs-attribute">border-right-color</span>: <span class="hljs-built_in">var</span>(--line-color);<br>&#125;<br><br><span class="hljs-selector-class">.post</span> <span class="hljs-selector-class">.tag-common</span><span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.nav-tabs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.tab</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-tag">a</span>,<br><span class="hljs-selector-class">.tabs-comment</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.nav-tabs</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.tab</span><span class="hljs-selector-class">.active</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--tabs-color);<br>&#125;<br><br><span class="hljs-selector-class">.tag-common</span><span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.nav-tabs</span>,<br><span class="hljs-selector-class">.tabs-comment</span> <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.nav-tabs</span> &#123;<br>    <span class="hljs-attribute">border</span>: none;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="8-关于页样式"><a href="#8-关于页样式" class="headerlink" title="8. 关于页样式"></a>8. 关于页样式</h1><p>暂无。</p><h1 id="9-自定页样式"><a href="#9-自定页样式" class="headerlink" title="9. 自定页样式"></a>9. 自定页样式</h1><h2 id="9-1-内容样式"><a href="#9-1-内容样式" class="headerlink" title="9.1 内容样式"></a>9.1 内容样式</h2><p>创建自定义的页面直接查看 <a href="https://hexo.fluid-dev.com/docs/guide/">Fluid 官方文档</a>就好，如果希望自定义页面采用某些已有的样式，可以参考<a href="https://tothefor.com/DragonOne/1718922556.html">墨水记忆</a>的文章。如果还想进行更细致的修改，可以复制或自己创建一个 layout 文件，并在里面添加想要的格式。</p><p>由于我需要<a href="#2-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%99%A8">代码注入器</a>能单独为这一页添加标签，所以我将我自定义页的 layout 设置成了我指定的名字。</p><figure class="highlight yaml"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-onzp88lckj50kh"></i><span>yaml</span><div class="collapse show" id="collapse-onzp88lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">civileng</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">土木</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">你喜欢土木工程吗</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></div></figure><p>大部分元素的样式设置是跟着归档页一起设置了，详见<a href="#4-%E5%BD%92%E6%A1%A3%E9%A1%B5%E6%A0%B7%E5%BC%8F">归档页样式</a>。除此之外，我还将在手机上不需要显示的元素设置了 <code>display: none</code>，主要是一行确实放不下，分行又破坏美观了。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-te13zmlckj50kh"></i><span>css</span><div class="collapse show" id="collapse-te13zmlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 笔记目录设置 */</span><br><span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.h5</span> <span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span> <span class="hljs-selector-tag">time</span> &#123;<br>    <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>    <span class="hljs-attribute">white-space</span>: nowrap;<br>&#125;<br><br><span class="hljs-selector-class">.civilEngineeringBody</span> <span class="hljs-selector-class">.list-group</span> <span class="hljs-selector-class">.list-group-item</span> <span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* 土木分类下icon距离文字的距离 */</span><br><span class="hljs-selector-class">.nav-item</span> <span class="hljs-selector-class">.dropdown-menu</span><span class="hljs-selector-class">.dropdown-collapse</span> <span class="hljs-selector-class">.dropdown-item</span> <span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0.3rem</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="9-2-页边距"><a href="#9-2-页边距" class="headerlink" title="9.2 页边距"></a>9.2 页边距</h2><p>这里主要修改了土木页手机端的页边距，代码如下。</p><figure class="highlight css"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w8dohblckj50kh"></i><span>css</span><div class="collapse show" id="collapse-w8dohblckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*修改自定义页页边距*/</span><br><span class="hljs-selector-class">.markdown-body</span><span class="hljs-selector-class">.civil</span> &#123;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15%</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15%</span>;<br>&#125;<br><br><span class="hljs-comment">/* 修改手机端页边距 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">767px</span>) &#123;<br>    <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.col-12</span><span class="hljs-selector-class">.col-md-10</span><span class="hljs-selector-class">.m-auto</span> &#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>01 博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>CSS</tag>
      
      <tag>JavaScript</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射 - Java SE</title>
    <link href="/post/53772/"/>
    <url>/post/53772/</url>
    
    <content type="html"><![CDATA[<h1 id="1-反射的概念"><a href="#1-反射的概念" class="headerlink" title="1. 反射的概念"></a>1. 反射的概念</h1><p>反射是指对于任何一个 <font class="code-word"><code>Class</code></font> 类，在<font class="word-stress">运行的时候</font>都可以直接得到这个类全部成分：</p><ul><li>在运行时，可以直接得到这个类的构造器对象：<font class="code-sentence"><code>Constructor</code></font> 类</li><li>在运行时，可以直接得到这个类的成员变量对象：<font class="code-sentence"><code>Field</code></font> 类</li><li>在运行时，可以直接得到这个类的成员方法对象：<font class="code-sentence"><code>Method</code></font> 类</li></ul><p>反射的第一步都是先得到编译后的 Class 类对象，然后就可以得到 Class 的全部成分。</p><h1 id="2-获取类对象"><a href="#2-获取类对象" class="headerlink" title="2. 获取类对象"></a>2. 获取类对象</h1><p>获取 <font class="code-word"><code>Class</code></font> 对象共有三种方式：</p><ul><li>源码阶段：<font class="code-sentence"><code>Class c = forName(String 全限名) </code></font>，全限名：包名+类名</li><li>对象阶段：<font class="code-sentence"><code>Class c2 = 类名.class</code></font></li><li>运行阶段：创建对象后，<font class="code-sentence"><code>Class c3 = 对象.getClass()</code></font></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fwex1tlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-fwex1tlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8a218ylckj50ki"></i><span>java</span><div class="collapse show" id="collapse-8a218ylckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <br>    <span class="hljs-comment">//获取类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mycompany.test02.Students&quot;</span>);<br>        System.out.println(c1);     <span class="hljs-comment">//输出：class com.mycompany.test02.Students</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Students.class;<br>        System.out.println(c2);     <span class="hljs-comment">//输出：class com.mycompany.test02.Students</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>().getClass();<br>        System.out.println(c3);     <span class="hljs-comment">//输出：class com.mycompany.test02.Students</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-获取构造器对象"><a href="#3-获取构造器对象" class="headerlink" title="3. 获取构造器对象"></a>3. 获取构造器对象</h1><h2 id="3-1-获取构造器"><a href="#3-1-获取构造器" class="headerlink" title="3.1 获取构造器"></a>3.1 获取构造器</h2><p>先得到类对象，然后从类对象中获取类的构造器对象。<font class="code-word"><code>Class</code></font> 类中用于获取构造器 <font class="code-word"><code>Constructor</code></font> 的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Constructor<?>[] getConstructors()</td>             <td style="text-align: center;">返回所有构造器对象的数组（只能拿public的）</td>         </tr>        <tr>            <td style="text-align: center;">Constructor<?>[] getDeclaredConstructors()</td>             <td style="text-align: center;">返回所有构造器对象的数组，存在就能拿到</td>         </tr>        <tr>            <td style="text-align: center;">Constructor<T> getConstructor(Class<?>... parameterTypes)</td>             <td style="text-align: center;">返回单个构造器对象（只能拿public的）</td>         </tr>        <tr>            <td style="text-align: center;">Constructor<T> getDeclaredConstructor(Class<?>...parameterTypes)</td>             <td style="text-align: center;">返回单个构造器对象，存在就能拿到</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z87giglckj50ki"></i><span>java</span><div class="collapse show" id="collapse-z87giglckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Students</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yvrynclckj50ki"></i><span>java</span><div class="collapse show" id="collapse-yvrynclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudents</span> &#123;<br><br>    <span class="hljs-comment">//获取全部的构造器，只限public修饰的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCons</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        Constructor[] constructors = c.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor.getName() + <span class="hljs-string">&quot; &quot;</span> + constructor.getParameterCount());<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * com.mycompany.test02.Students 2</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取全部的构造器</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDCons</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        Constructor[] constructors = c.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor.getName() + <span class="hljs-string">&quot; &quot;</span> + constructor.getParameterCount());<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * com.mycompany.test02.Students 0</span><br><span class="hljs-comment">         * com.mycompany.test02.Students 2</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取指定的构造器，只限public修饰的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCon</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getConstructor(String.class, <span class="hljs-type">int</span>.class);  <span class="hljs-comment">//两参数构造器</span><br>        System.out.println(constructor.getName() + <span class="hljs-string">&quot; &quot;</span> + constructor.getParameterCount());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * com.mycompany.test02.Students 2</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取指定的构造器</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDCon</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor();  <span class="hljs-comment">//无参构造器</span><br>        System.out.println(constructor.getName() + <span class="hljs-string">&quot; &quot;</span> + constructor.getParameterCount());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * com.mycompany.test02.Students 0</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-2-使用构造器"><a href="#3-2-使用构造器" class="headerlink" title="3.2 使用构造器"></a>3.2 使用构造器</h2><p>获取构造器对象后，可以创建一个对象返回。<font class="code-word"><code>Constructor</code></font> 中用于创建对象的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">T newInstance(Object... initargs)</td>             <td style="text-align: center;">根据指定的构造器创建对象</td>         </tr>        <tr>            <td style="text-align: center;">public void  setAccessible(boolean flag)</td>             <td style="text-align: center;">设置为true，表示取消访问检查，进行暴力反射，可以使用私有的成员</td>         </tr>    </body></table><p>使用构造器创建对象的注意事项如下：</p><ul><li>对于私有构造器，必须先使用暴力反射打开权限，才能使用构造器创建对象。</li><li>使用 <font class="code-sentence"><code>newInstance</code></font> 创建对象的类型为 <font class="code-sentence"><code>Object</code></font>，可以将其强转成实际类型。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-s7v09rlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-s7v09rlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Students</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//toString()方法略</span><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ca56z4lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-ca56z4lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudents</span> &#123;<br><br>    <span class="hljs-comment">//获取指定的构造器</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCon</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <br>        <span class="hljs-comment">//得到类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br><br>        <span class="hljs-comment">//获取构造器</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">cons1</span> <span class="hljs-operator">=</span> c.getConstructor(String.class, <span class="hljs-type">int</span>.class); <span class="hljs-comment">//共有</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">cons2</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor();                <span class="hljs-comment">//私有</span><br>        <br>        <span class="hljs-comment">//使用构造器创建Students对象</span><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">students1</span> <span class="hljs-operator">=</span> (Students) cons1.newInstance(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-comment">//打开权限，再创建Students对象</span><br>        cons2.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Students</span> <span class="hljs-variable">students2</span> <span class="hljs-operator">=</span> (Students) cons2.newInstance();<br>        <br>        System.out.println(students1);             <span class="hljs-comment">//输出：Students&#123;name=&#x27;李四&#x27;, age=23&#125;   </span><br>        System.out.println(students2);             <span class="hljs-comment">//输出：Students&#123;name=&#x27;null&#x27;, age=0&#125;</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-获取成员变量对象"><a href="#4-获取成员变量对象" class="headerlink" title="4. 获取成员变量对象"></a>4. 获取成员变量对象</h1><h2 id="4-1-获取成员变量"><a href="#4-1-获取成员变量" class="headerlink" title="4.1 获取成员变量"></a>4.1 获取成员变量</h2><p>先得到类对象，然后从类对象中获取类的成员变量对象。<font class="code-word"><code>Class</code></font> 类中用于获取成员变量 <font class="code-word"><code>Filed</code></font> 的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Field[] getFields()</td>             <td style="text-align: center;">返回所有成员变量对象的数组（只能拿public的）</td>         </tr>        <tr>            <td style="text-align: center;">Field[] getDeclaredFields()</td>             <td style="text-align: center;">返回所有成员变量对象的数组，存在就能拿到</td>         </tr>        <tr>            <td style="text-align: center;">Field getField(String name)</td>             <td style="text-align: center;">返回单个成员变量对象（只能拿public的）</td>         </tr>        <tr>            <td style="text-align: center;">Field getDeclaredField(String name)</td>             <td style="text-align: center;">返回单个成员变量对象，存在就能拿到</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-97lsw2lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-97lsw2lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String teacherName;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCHOOL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;希望小学&quot;</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-npajtxlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-npajtxlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudents</span> &#123;<br><br>    <span class="hljs-comment">//获取全部成员变量，只限public修饰的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getFids</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        Field[] fields = c.getFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field.getName() + <span class="hljs-string">&quot; &quot;</span> + field.getType());<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * teacherName class java.lang.String</span><br><span class="hljs-comment">         * SCHOOL class java.lang.String</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取全部成员变量</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDFids</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        Field[] fields = c.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field.getName() + <span class="hljs-string">&quot; &quot;</span> + field.getType());<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * name class java.lang.String</span><br><span class="hljs-comment">         * age int</span><br><span class="hljs-comment">         * teacherName class java.lang.String</span><br><span class="hljs-comment">         * SCHOOL class java.lang.String</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取指定成员变量，只限public修饰的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getFid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getField(<span class="hljs-string">&quot;teacherName&quot;</span>);<br>        System.out.println(field.getName() + <span class="hljs-string">&quot; &quot;</span> + field.getType());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * teacherName class java.lang.String</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取指定成员变量</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDCon</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(field.getName() + <span class="hljs-string">&quot; &quot;</span> + field.getType());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * name class java.lang.String</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-使用成员变量"><a href="#4-2-使用成员变量" class="headerlink" title="4.2 使用成员变量"></a>4.2 使用成员变量</h2><p>获取成员变量对象后，可以创建对象并在该对象中取值、赋值。<font class="code-sentence"><code>Field</code></font> 中用于取值和赋值的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void set(Object obj, Object value)</td>             <td style="text-align: center;">赋值</td>         </tr>        <tr>            <td style="text-align: center;">Object get(Object obj)</td>             <td style="text-align: center;">获取值</td>         </tr>        <tr>            <td style="text-align: center;">public void  setAccessible(boolean flag)</td>             <td style="text-align: center;">设置为true，表示取消访问检查，进行暴力反射，可以使用私有的成员</td>         </tr>    </body></table><p>对成员变量赋值和取值的注意事项如下：</p><ul><li>需要先创建对象，然后再在该对象中操作取值和赋值。</li><li>对于私有成员变量，必须先使用暴力反射打开权限，才能赋值和取值。</li><li>使用 <font class="code-sentence"><code>get</code></font> 获取值时返回类型为 <font class="code-sentence"><code>Object</code></font> 类型，可以将其强转成实际类型。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-n306d3lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-n306d3lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String teacherName;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCHOOL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;希望小学&quot;</span>;<br><br>    <span class="hljs-comment">//toString()方法略</span><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-iqtai2lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-iqtai2lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudents</span> &#123;<br><br>    <span class="hljs-comment">//获取指定成员变量，只限public修饰的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getFid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-comment">//获取类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br><br>        <span class="hljs-comment">//获取成员变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tNameF</span> <span class="hljs-operator">=</span> c.getField(<span class="hljs-string">&quot;teacherName&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameF</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">//创建Students对象</span><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>();<br><br>        <span class="hljs-comment">//为对象的成员变量赋值</span><br>        tNameF.set(student, <span class="hljs-string">&quot;李四&quot;</span>);<br>        <span class="hljs-comment">//打开权限，再为私有成员变量赋值</span><br>        nameF.setAccessible(<span class="hljs-literal">true</span>);<br>        nameF.set(student,<span class="hljs-string">&quot;张三&quot;</span>);<br><br>        System.out.println(student.teacherName);      <span class="hljs-comment">//输出：李四</span><br>        System.out.println(student);                  <span class="hljs-comment">//输出：Students&#123;name=&#x27;张三&#x27;, age=0&#125;</span><br><br>        <span class="hljs-comment">//获取对象的成员变量值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">tName</span> <span class="hljs-operator">=</span> (String) tNameF.get(student);<br>        <span class="hljs-comment">//需要打开权限，再获取对象的私有成员变量值，前面已经打开过了这里就不用再打开了</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) nameF.get(student);<br><br>        System.out.println(tName);                    <span class="hljs-comment">//输出：李四</span><br>        System.out.println(name);                     <span class="hljs-comment">//输出：张三</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="5-获取方法对象"><a href="#5-获取方法对象" class="headerlink" title="5. 获取方法对象"></a>5. 获取方法对象</h1><h2 id="5-1-获取方法"><a href="#5-1-获取方法" class="headerlink" title="5.1 获取方法"></a>5.1 获取方法</h2><p>先得到类对象，然后从类对象中获取类的方法对象。<font class="code-word"><code>Class</code></font> 类中用于获取方法 <font class="code-sentence"><code>Method</code></font> 的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Method[] getMethods()</td>             <td style="text-align: center;">返回所有成员方法对象的数组（只能拿public的）</td>         </tr>        <tr>            <td style="text-align: center;">Method[] getDeclaredMethods()</td>             <td style="text-align: center;">返回所有成员方法对象的数组，存在就能拿到</td>         </tr>        <tr>            <td style="text-align: center;">Method getMethod(String name, Class<?>... parameterTypes) </td>             <td style="text-align: center;">返回单个成员方法对象（只能拿public的）</td>         </tr>        <tr>            <td style="text-align: center;">Method getDeclaredMethod(String name, Class<?>... parameterTypes)</td>             <td style="text-align: center;">返回单个成员方法对象，存在就能拿到</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rqc7vnlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-rqc7vnlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3y8wzzlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-3y8wzzlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudents</span> &#123;<br><br>    <span class="hljs-comment">//获取全部方法，只限public修饰的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMeths</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        Method[] methods = c.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method.getName() + <span class="hljs-string">&quot; &quot;</span> + method.getReturnType() + <span class="hljs-string">&quot; &quot;</span> + method.getParameterCount());<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * setName void 1</span><br><span class="hljs-comment">         * ...</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取全部方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDMeths</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        Method[] methods = c.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method.getName() + <span class="hljs-string">&quot; &quot;</span> + method.getReturnType() + <span class="hljs-string">&quot; &quot;</span> + method.getParameterCount());<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * getName class java.lang.String 0</span><br><span class="hljs-comment">         * setName void 1</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取指定方法，只限public修饰的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMeth</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>        System.out.println(method.getName() + <span class="hljs-string">&quot; &quot;</span> + method.getReturnType() + <span class="hljs-string">&quot; &quot;</span> + method.getParameterCount());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * setName void 1</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取指定方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDMeth</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br>        System.out.println(method.getName() + <span class="hljs-string">&quot; &quot;</span> + method.getReturnType() + <span class="hljs-string">&quot; &quot;</span> + method.getParameterCount());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 输出结果：</span><br><span class="hljs-comment">         * getName class java.lang.String 0</span><br><span class="hljs-comment">         */</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-2-使用方法"><a href="#5-2-使用方法" class="headerlink" title="5.2 使用方法"></a>5.2 使用方法</h2><p>获取方法对象后，可以创建对象并在该对象中执行方法。<font class="code-sentence"><code>Method</code></font> 中用于除法执行的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Object invoke(Object obj, Object... args)</td>             <td style="margin-left: 1rem;">运行方法</br>参数一：调用该方法的对象</br>参数二：调用方法的传递的参数（如果没有就不写）</br>返回值：方法的返回值（如果没有就不写）</td>         </tr>        <tr>            <td style="text-align: center;">public void  setAccessible(boolean flag)</td>             <td style="text-align: center;">设置为true，表示取消访问检查，进行暴力反射，可以使用私有的成员</td>         </tr>    </body></table><p>使用方法的注意事项如下：</p><ul><li>需要先创建对象，然后再在该对象中执行方法。</li><li>对于私有方法，必须先使用暴力反射打开权限，才能触发执行。</li><li>使用 <font class="code-sentence"><code>invoke</code></font> 执行方法，对于有返回值的方法，返回类型为 <font class="code-sentence"><code>Object</code></font> 类型，可以将其强转成实际类型。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lomt4klckj50ki"></i><span>java</span><div class="collapse show" id="collapse-lomt4klckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//toString()方法略</span><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-55sx4clckj50ki"></i><span>java</span><div class="collapse show" id="collapse-55sx4clckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudents</span> &#123;<br><br>    <span class="hljs-comment">//获取指定方法，只限public修饰的</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMeth</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//创建类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Students.class;<br><br>        <span class="hljs-comment">//获取方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">setNameM</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);   <span class="hljs-comment">//公有</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getNameM</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>);         <span class="hljs-comment">//私有</span><br><br>        <span class="hljs-comment">//创建Students对象</span><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>();<br><br>        <span class="hljs-comment">//执行对象的方法</span><br>        setNameM.invoke(student,<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-comment">//打开权限，再执行对象私有方法</span><br>        getNameM.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) getNameM.invoke(student);<br><br>        System.out.println(student);             <span class="hljs-comment">//输出：Students&#123;name=&#x27;张三&#x27;, age=0&#125;</span><br>        System.out.println(name);                <span class="hljs-comment">//输出：张三</span><br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="6-反射的应用举例"><a href="#6-反射的应用举例" class="headerlink" title="6. 反射的应用举例"></a>6. 反射的应用举例</h1><h2 id="6-1-绕过集合泛型添加数据"><a href="#6-1-绕过集合泛型添加数据" class="headerlink" title="6.1 绕过集合泛型添加数据"></a>6.1 绕过集合泛型添加数据</h2><p>泛型只是在<font class="word-stress">编译阶段</font>可以约束集合只能操作某种数据类型，在<font class="word-stress">编译成 Class 文件进入运行阶段</font>的时候，其真实类型都是 ArrayList 了，泛型相当于被擦除了。</p><p>反射是作用在<font class="word-stress">运行时</font>的技术，此时集合的泛型将不能产生约束了，此时是可以为集合<font class="word-stress">存入其他任意类型的元素</font>的。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tpk2vzlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-tpk2vzlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        ArrayList&lt;Integer&gt;  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">23</span>);<br><span class="hljs-comment">//      list.add(&quot;你好&quot;);           //无法直接添加Integer以外的类型，该语句编译阶段会直接报错</span><br><br>        <span class="hljs-comment">//获取ArrayList.class，该类实际未收到泛型约束</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> list.getClass();    <br>        <span class="hljs-comment">//采用反射获取add方法并调用，成功添加String类型</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">addM</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br>        addM.invoke(list,<span class="hljs-string">&quot;你好&quot;</span>);<br>        System.out.println(list);         <span class="hljs-comment">//输出：[23, 你好]</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="6-2-通用框架的底层原理"><a href="#6-2-通用框架的底层原理" class="headerlink" title="6.2 通用框架的底层原理"></a>6.2 通用框架的底层原理</h2><p>通过反射可以实现：对任意一个对象，在不清楚对象字段的情况可以，可以把对象的字段名称和对应值存储到文件中去。</p><p>实现步骤如下：</p><ul><li><p>定义一个方法，可以接收任意类的对象。</p></li><li><p>每次收到一个对象后，使用反射获取对象的Class类对象，然后获取全部成员变量信息。</p></li><li><p>遍历成员变量信息，然后提取本成员变量在对象中的具体值。</p></li><li><p>存入成员变量名称和值到文件中去。</p></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-cs1vlulckj50ki"></i><span>java</span><div class="collapse show" id="collapse-cs1vlulckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义类一</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String className;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> sex, <span class="hljs-type">int</span> age, String className)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.className = className;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8jh7shlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-8jh7shlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义类二</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teachers</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ID;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teachers</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teachers</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> sex, <span class="hljs-type">int</span> ID)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.ID = ID;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uqe4e4lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-uqe4e4lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">//定义框架以及存储方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Object obj)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-literal">true</span>);<br>                <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>        ) &#123;<br>            <span class="hljs-comment">//获取类对象</span><br>            <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> obj.getClass();<br><br>            <span class="hljs-comment">//在文件中打印类名</span><br>            ps.println(<span class="hljs-string">&quot;class: &quot;</span> + c.getSimpleName());<br><br>            <span class="hljs-comment">//获取全部成员变量</span><br>            Field[] fields = c.getDeclaredFields();<br><br>            <span class="hljs-comment">//在文件中打印成员变量的信息</span><br>            <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> field.getName();<br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> field.get(obj);<br>                ps.println(name + <span class="hljs-string">&quot;=&quot;</span> + value);<br>            &#125;<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hbewdulckj50ki"></i><span>java</span><div class="collapse show" id="collapse-hbewdulckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;普通班&quot;</span>);<br>        <span class="hljs-type">Teachers</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teachers</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">10001</span>);<br><br>        MyBatisUtil.save(student);<br>        MyBatisUtil.save(teacher);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  ——————data.txt中的内容——————</span><br><span class="hljs-comment"> *  class: Students</span><br><span class="hljs-comment"> *  name=张三</span><br><span class="hljs-comment"> *  sex=男</span><br><span class="hljs-comment"> *  age=23</span><br><span class="hljs-comment"> *  className=普通班</span><br><span class="hljs-comment"> *  class: Teachers</span><br><span class="hljs-comment"> *  name=李四</span><br><span class="hljs-comment"> *  sex=男</span><br><span class="hljs-comment"> *  ID=10001</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注解 - Java SE</title>
    <link href="/post/49545/"/>
    <url>/post/49545/</url>
    
    <content type="html"><![CDATA[<h1 id="1-注解概述"><a href="#1-注解概述" class="headerlink" title="1. 注解概述"></a>1. 注解概述</h1><p>Java 注解又称 Java 标注，是 JDK5.0 引入的一种注释机制。Java 语言中的类、构造器、方法、成员变量、参数等都可以被注解进行标注，然后进行特殊处理。</p><h1 id="2-自带注解"><a href="#2-自带注解" class="headerlink" title="2. 自带注解"></a>2. 自带注解</h1><p>Java 中自带了一些注解，其中作用在代码中的常见注解有：</p><ul><li><font class="code-word"><code>@Override</code></font>：重写标记，一般在子类继承父类后，标注在重写过后的子类方法上。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li><li><font class="code-word"><code>@Deprecated</code></font>：用此注解注释的代码已经过时，不再推荐使用。</li><li><font class="code-word"><code>@SuppressWarnings</code></font>：这个注解起到忽略编译器的警告作用。</li><li><font class="code-word"><code>@FunctionalInterface</code></font>：表明这个方法是一个函数式接口。</li></ul><h1 id="3-自定义注解"><a href="#3-自定义注解" class="headerlink" title="3. 自定义注解"></a>3. 自定义注解</h1><p><strong>自定义注解格式</strong></p><p>自定义注解就是自己做一个注解来使用，注解使用 <font class="code-word"><code>@interface</code></font> 关键字来定义。注解内的属性定义格式如下：<font class="code-sentence"><code>public 属性类型 属性名() default 默认值;</code></font> </p><p>在使用自定义注解时，括号内必须采用 <font class="code-word"><code>名称=值</code></font> 的形式，对于有默认值的属性，可以不写出来而直接取默认值。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8pk1urlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-8pk1urlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyBook &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;默认书本&quot;</span>;  <br>    <span class="hljs-type">double</span> <span class="hljs-title function_">price</span><span class="hljs-params">()</span>;                            <br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5q06ndlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-5q06ndlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-comment">//使用注解标记方法</span><br>    <span class="hljs-meta">@MyBook(price = 500)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用注解标记变量</span><br>        <span class="hljs-meta">@MyBook(name = &quot;书本&quot;, price = 128)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;第一本书&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>注解类的特殊属性</strong></p><p><font class="code-word"><code>value</code></font> 属性：如果只有一个 value 属性或有多个属性但除了 value 均有默认值的情况下，若只设定 value 属性的值，可以省略 value 的名称不写。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4x8higlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-4x8higlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyBook &#123;<br><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;                  <span class="hljs-comment">//value属性</span><br>    <span class="hljs-type">double</span> <span class="hljs-title function_">price</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">100</span>;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-btn9gclckj50ki"></i><span>java</span><div class="collapse show" id="collapse-btn9gclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-meta">@MyBook(&quot;书本&quot;)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;第一本书&quot;</span>;<br>       <br>        <span class="hljs-meta">@MyBook(value = &quot;书本&quot;, price = 100)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;第二本书&quot;</span>;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-元注解"><a href="#4-元注解" class="headerlink" title="4. 元注解"></a>4. 元注解</h1><p>元注解即是<font class="word-stress">注解的注解</font>，用于注释注解定义的代码。常见的两个元注解如下：</p><ul><li><p><font class="code-word"><code>@Target</code></font>：约束自定义注解只能在哪些地方使用。其中常用的值定义在 <font class="code-word"><code>ElementType</code></font> 枚举类中，常用值如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>常用值</th>            <th style="text-align: center;" width=50%>值说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">TYPE</td>             <td style="text-align: center;">类，接口</td>          </tr>          <tr>            <td style="text-align: center;">FIELD</td>             <td style="text-align: center;">成员变量</td>          </tr>        <tr>            <td style="text-align: center;">METHOD</td>             <td style="text-align: center;">成员方法</td>          </tr>        <tr>            <td style="text-align: center;">PARAMETER</td>             <td style="text-align: center;">方法参数</td>          </tr>        <tr>            <td style="text-align: center;">/td>             <td style="text-align: center;">构造器</td>          </tr>        <tr>            <td style="text-align: center;">LE</td>             <td style="text-align: center;">局部变量</td>          </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-m5hphzlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-m5hphzlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span>    <span class="hljs-comment">//设定MyBook注解只可以在方法中使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyBook &#123;<br><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">price</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">100</span>;<br><br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><font class="code-word"><code>@Retention</code></font>：声明注解的生命周期。其中使用的值定义在 <font class="code-word"><code>RetentionPolicy</code></font> 枚举类中，常用值如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>常用值</th>            <th style="text-align: center;" width=50%>值说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">SOURCE</td>             <td style="text-align: center;">注解只作用在源码阶段，生成的字节码文件中不存在</td>          </tr>          <tr>            <td style="text-align: center;">CLASS</td>             <td style="text-align: center;">注解作用在源码阶段，字节码文件阶段，运行阶段不存在</td>          </tr>        <tr>            <td style="text-align: center;">RUNTIME</td>             <td style="text-align: center;">注解作用在源码阶、字节码文件阶段、运行阶段</td>          </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5wvur9lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-5wvur9lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>   <span class="hljs-comment">//设定MyBook注解在源码阶段、字节码文件阶段、运行阶段均存在</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyBook &#123;<br><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">price</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">100</span>;<br><br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h1 id="5-注解解析"><a href="#5-注解解析" class="headerlink" title="5. 注解解析"></a>5. 注解解析</h1><p>注解的操作中经常需要进行解析，注解的解析就是判断是否存在注解，存在注解就解析出内容。</p><p>与注解解析相关的接口如下：</p><ul><li><p><font class="code-word"><code>Annotation</code></font>：注解的顶级接口，注解都是 Annotation 类型的对象。</p></li><li><p><font class="code-word"><code>AnnotatedElement</code></font>：注解的元素接口，该接口定义了与注解解析相关的解析方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Annotation[] getDeclaredAnnotations()</td>             <td style="text-align: center;">获得当前对象上使用的所有注解，返回注解数组</td>          </tr>          <tr>            <td style="text-align: center;">Annotation getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</td>             <td style="text-align: center;">获取指定的注解</td>          </tr>          <tr>            <td style="text-align: center;">T getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</td>             <td style="text-align: center;">清空集合中所有的元素</td>          </tr>        <tr>            <td style="text-align: center;">boolean isAnnotationPresent(Class&lt;Annotation&gt; annotationClass)</td>             <td style="text-align: center;">判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false</td>          </tr>    </body></table></li></ul><p>所有的类成分 Class、Method 、 Field 、 Constructor 都实现了 AnnotatedElement 接口，他们都拥有解析注解的能力。</p><p>注解解析的注意事项如下：</p><ul><li>使用 <font class="code-sentence"><code>getDeclaredAnnotation</code></font> 获取值时返回类型为 <font class="code-sentence"><code>Annotation</code></font> 类型，可以将其强转成实际的注解类型。</li><li>注解作用成员方法，则要获得该成员方法对应的 Method 对象，再来拿上面的注解。</li><li>注解作用在类上，则要该类的 Class 对象，再来拿上面的注解。</li><li>注解作用在成员变量上，则要获得该成员变量对应的 Field 对象，再来拿上面的注解。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qcp2y3lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-qcp2y3lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">//定义注解</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyBook &#123;<br><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">price</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">100</span>;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ukzzmalckj50ki"></i><span>java</span><div class="collapse show" id="collapse-ukzzmalckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类并使用注解</span><br><span class="hljs-meta">@MyBook(name = &quot;书库&quot;, price = 500)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookStore</span> &#123;<br><br>    <span class="hljs-meta">@MyBook(name = &quot;第一本书&quot;, price = 128)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9z3bxalckj50ki"></i><span>java</span><div class="collapse show" id="collapse-9z3bxalckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseClass</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br><br>        <span class="hljs-comment">//获取类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> BookStore.class;<br><br>        <span class="hljs-comment">//判断类上是否存在注解</span><br>        <span class="hljs-keyword">if</span> (c.isAnnotationPresent(MyBook.class)) &#123;<br>            <span class="hljs-comment">//获取类的注解对象</span><br>            <span class="hljs-type">MyBook</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> (MyBook) c.getAnnotation(MyBook.class);<br>            System.out.println(book.name());         <span class="hljs-comment">//输出：书库</span><br>            System.out.println(book.price());        <span class="hljs-comment">//输出：500.0</span><br>        &#125;<br><br>        <span class="hljs-comment">//获取方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-comment">//判断方法上是都存在注解</span><br>        <span class="hljs-keyword">if</span> (m.isAnnotationPresent(MyBook.class)) &#123;<br>            <span class="hljs-comment">//获取方法的注解对象</span><br>            <span class="hljs-type">MyBook</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> (MyBook) m.getAnnotation(MyBook.class);<br>            System.out.println(book.name());         <span class="hljs-comment">//输出：第一本书</span><br>            System.out.println(book.price());        <span class="hljs-comment">//输出：128.0</span><br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Junit - 单元测试</title>
    <link href="/post/949470425/"/>
    <url>/post/949470425/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><p>单元测试就是针对最小的功能单元编写测试代码，Java 程序最小的功能单元是方法，因此，单元测试就是针对方法的测试，进而检查方法的正确性。</p><p>JUnit 是使用 Java 语言实现的单元测试框架，其有以下的优点：</p><ul><li>JUnit可以灵活的选择执行哪些测试方法，可以一键执行全部测试方法。</li><li>Junit可以生成全部方法的测试报告。</li><li>单元测试中的某个方法测试失败了，不会影响其他测试方法的测试。</li></ul><h1 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h1><p>通过如下步骤来进行单元测试：</p><ul><li><p>将 JUnit 的 jar 包导入到项目中，如下图所示。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-44.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /></li><li><p>编写测试方法，该测试方法必须是<font class="word-stress">公共的无参数无返回值的非静态方法</font>。</p></li><li><p>在测试方法上使用 <font class="code-word"><code>@Test</code></font> 注解：标注该方法是一个测试方法。</p></li><li><p>在测试方法中使用 <font class="code-word"><code>assertEquals</code></font> 等方法完成预期正确性测试，即把结果和预期值比较看是否一致。</p></li><li><p>选中测试方法并运行：如果选择为方法内的行，则仅运行该测试方法。如果选择为方法外的行，则运行整个类里的测试方法。</p></li><li><p>如果测试良好则是绿色；如果测试失败，则是红色。</p></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qilbkylckj50ki"></i><span>java</span><div class="collapse show" id="collapse-qilbkylckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//等待测试的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-comment">//等待测试的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;年龄为&quot;</span> + <span class="hljs-built_in">this</span>.age);<br>        System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-icx5s5lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-icx5s5lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudents</span> &#123;<br><br>    <span class="hljs-comment">//该测试标绿，测试良好</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>).getName();<br>        System.out.println(str);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 进行预期结果的正确性测试</span><br><span class="hljs-comment">         * 三个参数依次是：出现错误后的提示词，预期值，实际值。</span><br><span class="hljs-comment">         */</span><br>        Assert.assertEquals(<span class="hljs-string">&quot;方法可能出现问题&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, str);<br>    &#125;<br><br>    <span class="hljs-comment">//该测试运行后会标红，并抛出异常</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShowAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>).showAge();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-常用注解"><a href="#3-常用注解" class="headerlink" title="3. 常用注解"></a>3. 常用注解</h1><p><strong>注解</strong></p><p>通过不同的注解可以实现不同的功能：以下为 JUnit4 中的注解，JUnit5 版本中将 Before 改成了 BeforeEach，After 改成了 AfterEach。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>注解名称</th>            <th style="text-align: center;" width=50%>注解说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">@Test </td>             <td style="text-align: center;">测试方法</td>         </tr>        <tr>            <td style="text-align: center;">@Before</td>             <td style="text-align: center;">用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次</td>         </tr>        <tr>            <td style="text-align: center;">@After</td>             <td style="text-align: center;">用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次</td>         </tr>        <tr>            <td style="text-align: center;">@BeforeClass</td>             <td style="text-align: center;">用来静态修饰方法，该方法会在所有测试方法之前只执行一次</td>         </tr>        <tr>            <td style="text-align: center;">@AfterClass</td>             <td style="text-align: center;">用来静态修饰方法，该方法会在所有测试方法之后只执行一次</td>         </tr>    </body></table><p><strong>案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6ebkoklckj50ki"></i><span>java</span><div class="collapse show" id="collapse-6ebkoklckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//待测试方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-comment">//待测试方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;年龄为&quot;</span> + <span class="hljs-built_in">this</span>.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-n8kb1dlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-n8kb1dlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudents</span> &#123;<br><br>    <span class="hljs-comment">//在每个测试方法执行前会执行一次</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>).getName();<br>        System.out.println(str);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShowAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>).showAge();<br>    &#125;<br><br>    <span class="hljs-comment">//在每个测试方法执行后会执行一次</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;after&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出结果：</span><br><span class="hljs-comment"> * before</span><br><span class="hljs-comment"> * 张三</span><br><span class="hljs-comment"> * after</span><br><span class="hljs-comment"> * before</span><br><span class="hljs-comment"> * 张三年龄为23</span><br><span class="hljs-comment"> * after  </span><br><span class="hljs-comment"> */</span> <br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>08 单元测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>单元测试</tag>
      
      <tag>JUnit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发 - Java SE</title>
    <link href="/post/52505/"/>
    <url>/post/52505/</url>
    
    <content type="html"><![CDATA[<h1 id="1-创建多线程"><a href="#1-创建多线程" class="headerlink" title="1. 创建多线程"></a>1. 创建多线程</h1><p>线程是一个程序内部的一条执行路径。程序中如果<font class="word-stress">只有一条执行路径</font>，那么这个程序就是单线程的程序，<font class="code-word"><code>main</code></font> 方法的执行就是一条单独的执行路径。</p><p>多线程是指从软硬件上实现<font class="word-stress">多条执行流程</font>的技术。Java 是通过 <font class="code-word"><code>java.lang</code></font> 包下的 <font class="code-word"><code>Thread</code></font> 类来代表线程的，Thread 类应该提供了实现多线程的方式。</p><h2 id="1-1-继承-Thread-类"><a href="#1-1-继承-Thread-类" class="headerlink" title="1.1 继承 Thread 类"></a>1.1 继承 Thread 类</h2><p>通过继承 <font class="code-word"><code>java.lang</code></font> 包下的 <font class="code-word"><code>Thread</code></font> 类可以实现多线程，步骤如下：</p><ul><li>定义一个线程类继承 Thread 类，重写 <font class="code-word"><code>run()</code></font> 方法，定义线程内部干嘛。</li><li>创建线程类的线程对象。</li><li>调用线程对象的 <font class="code-word"><code>start()</code></font> 方法启动线程（启动后还是执行 run 方法的）。</li></ul><p>该方法的注意事项如下：</p><ul><li>线程类已经继承 Thread，无法继承其他类，不利于扩展。</li><li>run 方法为 <font class="code-word"><code>void</code></font>，不能定义有返回值的操作。</li><li>直接调用 run 方法会当成普通方法执行，此时相当于还是单线程执行。只有调用 start 方法才是启动一个新的线程执行。</li><li>若把主线程放在子线程 start 方法之前，这样主线程一直是先跑完的，相当于是一个单线程的效果了。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4t3a4dlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-4t3a4dlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义线程类继承Thread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w1tcf4lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-w1tcf4lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//定义子类对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br>        <span class="hljs-comment">//子线程加入，实现多线程</span><br>        t.start();<br><br>        <span class="hljs-comment">//主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程：&quot;</span> + i);<br>        &#125;<br><br>        <span class="hljs-comment">//实际运行为主线程与子线程交替输出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-2-实现-Runnable-接口"><a href="#1-2-实现-Runnable-接口" class="headerlink" title="1.2 实现 Runnable 接口"></a>1.2 实现 Runnable 接口</h2><p>在 <font class="code-word"><code>java.lang</code></font> 包下的 <font class="code-word"><code>Runnable</code></font> 类提供了实现多线程的方式，步骤如下：</p><ul><li><p>定义一个线程任务类实现 Runnable 接口，重写 <font class="code-word"><code>run()</code></font> 方法。</p></li><li><p>创建线程任务对象。</p></li><li><p>使用构造方法创建 <font class="code-word"><code>Thread</code></font> 对象，把任务对象交给 Thread 处理。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>构造方法</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public Thread(String name)</td>             <td style="text-align: center;">可以为当前线程指定名称</td>         </tr>        <tr>            <td style="text-align: center;">public Thread(Runnable target)</td>             <td style="text-align: center;">封装 Runnable 对象成为线程对象</td>         </tr>        <tr>            <td style="text-align: center;">public Thread(Runnable target, String name)</td>             <td style="text-align: center;">封装 Runnable 对象成为线程对象，并指定线程名称</td>         </tr>    </body></table></li><li><p>调用 Thread 线程对象的 <font class="code-word"><code>start()</code></font> 方法启动线程。</p></li></ul><p>该方法注意事项如下：</p><ul><li>线程任务类只是实现接口，可以继续继承类和实现接口，扩展性强。</li><li>run 方法为 <font class="code-word"><code>void</code></font>，不能定义有返回值的操作。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h4j2qrlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-h4j2qrlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义线程任务类继承Runnable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程1：&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tmm7czlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-tmm7czlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//定义子类对象并包装成线程对象</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target);<br><br>        <span class="hljs-comment">//匿名内部类和lambda表达式简化，直接得到线程对象，可以不用定义子类</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;子线程2：&quot;</span> + i);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//子线程加入，实现多线程</span><br>        t1.start();<br>        t2.start();<br><br>        <span class="hljs-comment">//主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程：&quot;</span> + i);<br>        &#125;<br><br>        <span class="hljs-comment">//实际运行为主线程与子线程1和2交替输出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-3-实现-Callable-接口"><a href="#1-3-实现-Callable-接口" class="headerlink" title="1.3 实现 Callable 接口"></a>1.3 实现 Callable 接口</h2><p>JDK5 新增了 <font class="code-word"><code>Callable</code></font> 接口和 <font class="code-word"><code>FutureTask</code></font> 类（从 <font class="code-word"><code>Runnable</code></font> 逐层继承下来的）来实现多线程，步骤如下：</p><ul><li><p>定义类实现 <font class="code-word"><code>Callable&lt;V&gt;</code></font> 接口并指定泛型（设定为返回值类型），重写 <font class="code-word"><code>call</code></font> 方法，封装要做的事情。</p></li><li><p>使用 FutureTask 的构造方法，把 Callable 对象封装成线程任务对象。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>构造方法</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public FutureTask<>(Callable call)</td>             <td style="text-align: center;">把 Callable 对象封装成 FutureTask 对象</td>         </tr>    </body></table></li><li><p>使用 Thread 的构造方法，把线程任务对象交给 <font class="code-word"><code>Thread</code></font> 处理，包装成线程对象。</p></li><li><p>调用 Thread 的 <font class="code-word"><code>start</code></font> 方法启动线程，执行任务。</p></li><li><p>线程执行完毕后，通过 FutureTask 的 <font class="code-word"><code>get</code></font> 方法去获取任务执行的结果。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public V get() throws Exception</td>             <td style="text-align: center;">获取线程执行 call 方法返回的结果。</td>         </tr>    </body></table></li></ul><p>该方法注意事项如下：</p><ul><li>线程任务类只是实现接口，可以继续继承类和实现接口，扩展性强，但是编码麻烦。</li><li>可以在线程执行完毕后去获取线程执行的结果。</li><li>通过 <font class="code-word"><code>get</code></font> 方法去获取任务执行的结果，虽然该语句所在线程与子线程是并行的，但是会等到子线程执行完毕有返回值后才执行。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nqvnlrlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-nqvnlrlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-comment">//定义线程任务类实现Callable接口并指定泛型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>            System.out.println(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;子线程运行完毕！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-okt5inlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-okt5inlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建Callable任务对象，并包装成FutureTask类</span><br>        Callable&lt;String&gt; call = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">5</span>);<br>        FutureTask&lt;String&gt; f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call);<br><br>        <span class="hljs-comment">//交给Thread处理</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(f);<br><br>        <span class="hljs-comment">//子线程加入，实现多线程</span><br>        t.start();<br><br>        <span class="hljs-comment">//获取子线程的返回值</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> f.get();<br>            System.out.println(result);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="2-Thread-方法"><a href="#2-Thread-方法" class="headerlink" title="2. Thread 方法"></a>2. Thread 方法</h1><p><strong>构造方法</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>构造方法</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public Thread(String name)</td>             <td style="text-align: center;">可以为当前线程指定名称</td>         </tr>        <tr>            <td style="text-align: center;">public Thread(Runnable target)</td>             <td style="text-align: center;">封装 Runnable 对象成为线程对象</td>         </tr>        <tr>            <td style="text-align: center;">public Thread(Runnable target, String name)</td>             <td style="text-align: center;">封装 Runnable 对象成为线程对象，并指定线程名称</td>         </tr>    </body></table><p><strong>获取和设置线程名称的方法</strong></p><p>除下述 Thread 方法之外，其构造方法也可以直接指定名称。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">String getName()</td>             <td style="text-align: center;">获取当前线程的名称，默认线程名称是"Thread-索引"</td>         </tr>        <tr>            <td style="text-align: center;">void setName(String name)</td>             <td style="text-align: center;">将此线程的名称更改为指定的名称，通过构造器也可以设置线程名称</td>         </tr>    </body></table><p><strong>获得当前线程的对象的方法</strong></p><p>此方法是 Thread 类的静态方法，可以直接使用 Thread 类调用。该方法是在哪个线程执行中调用的，就会得到哪个线程对象。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static Thread currentThread()</td>             <td style="text-align: center;">返回对当前正在执行的线程对象的引用</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-y8gsitlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-y8gsitlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义线程类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <br>    <span class="hljs-comment">//定义构造方法，用于命名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//获取当前线程和名字</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> m.getName();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rntncclckj50ki"></i><span>java</span><div class="collapse show" id="collapse-rntncclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建子线程对象1，使用setName方法命名</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        t1.setName(<span class="hljs-string">&quot;子线程1&quot;</span>);<br>        t1.start();<br><br>        <span class="hljs-comment">//创建子线程对象2，使用构造方法命名</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;子线程2&quot;</span>);<br>        t2.start();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(m + <span class="hljs-string">&quot;在执行&quot;</span>);      <span class="hljs-comment">//输出：Thread[main,5,main]在执行</span><br>        <br>        <span class="hljs-comment">//结果为各线程交替输出</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>线程休眠的方法</strong></p><p>Thread 可以通过如下方法让线程休眠：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static void sleep(long time)</td>             <td style="text-align: center;">让当前线程休眠指定的时间后再继续执行，单位为毫秒</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-v5uttylckj50ki"></i><span>java</span><div class="collapse show" id="collapse-v5uttylckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(i);<br>            <span class="hljs-comment">//暂停线程3秒</span><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-线程安全"><a href="#3-线程安全" class="headerlink" title="3. 线程安全"></a>3. 线程安全</h1><p><strong>概念</strong></p><p>多个线程同时操作同一个共享资源的时候可能会出现业务安全问题，称为线程安全问题。</p><p>线程安全问题出现的原因是：存在多线程并发、同时访问共享资源、存在修改共享资源，以下图为例：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-41.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><p><strong>案例</strong></p><p>以下案例展示了线程安全问题，账户类用于存储账户信息以及提供取钱方法，取钱线程类提供了一个用户取钱的线程。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-sw0cdllckj50ki"></i><span>java</span><div class="collapse show" id="collapse-sw0cdllckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义账户类(出现线程安全问题)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String cardID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardID, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardID = cardID;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">//判断用户余额是否足够</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>            <span class="hljs-comment">//取钱</span><br>            System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money + <span class="hljs-string">&quot;元&quot;</span>);<br>            <span class="hljs-comment">//更新余额</span><br>            <span class="hljs-built_in">this</span>.money -= money;<br>            System.out.println(name + <span class="hljs-string">&quot;取钱后，账户余额&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;余额不足&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jk70golckj50ki"></i><span>java</span><div class="collapse show" id="collapse-jk70golckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义取钱线程类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Account account;<br><br>    <span class="hljs-comment">//构造方法：用于接收取钱的账户和用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account account, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.account = account;<br>    &#125;<br><br>    <span class="hljs-comment">//取钱的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        account.drawMoney(<span class="hljs-number">100000</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-cof26jlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-cof26jlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建一个公共账户</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;ID-123&quot;</span>, <span class="hljs-number">100000</span>);<br><br>        <span class="hljs-comment">//创建两个线程对象，代表用户A和用户B</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(account, <span class="hljs-string">&quot;用户A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(account, <span class="hljs-string">&quot;用户B&quot;</span>).start();<br>        <br>        <span class="hljs-comment">//出现线程安全问题！</span><br>        <span class="hljs-comment">//输出：用户A取出100000.0元</span><br>        <span class="hljs-comment">//     用户B取出100000.0元</span><br>        <span class="hljs-comment">//     用户A取钱后，账户余额0.0</span><br>        <span class="hljs-comment">//     用户B取钱后，账户余额-100000.0</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-线程同步"><a href="#4-线程同步" class="headerlink" title="4. 线程同步"></a>4. 线程同步</h1><p>线程同步是为了解决线程安全问题，通过 <font class="code-word"><code>synchronized</code></font> 把共享资源进行<font class="word-stress">上锁</font>，每次只能一个线程进入访问完毕以后解锁，然后其他线程才能进来。JDK5 以后提供了一个新的锁对象 <font class="code-word"><code>Lock</code></font>，更加灵活、方便。</p><h2 id="4-1-同步代码块"><a href="#4-1-同步代码块" class="headerlink" title="4.1 同步代码块"></a>4.1 同步代码块</h2><p><strong>概述</strong></p><p>同步代码块即使用 <font class="code-word"><code>synchronized</code></font> 修饰代码块，包括实例方法中的代码块和静态方法中的代码块。</p><p>格式为：<font class="code-sentence"><code>synchronized(同步锁对象) &#123; 操作共享资源的代码(核心代码) &#125;</code></font>。</p><p>对于当前同时执行的线程来说，当锁对象是同一个对象，则只允许一个线程进入，若为不同对象，则不设限。</p><p><strong>使用</strong></p><p>规范上建议使用共享资源作为锁对象：</p><ul><li><strong>实例方法中的代码块</strong>：建议使用 <font class="code-word"><code>this</code></font> 作为锁对象。</li><li><strong>静态方法中的代码块</strong>：建议使用<font class="code-word"><code>类名.class</code></font> 对象作为锁对象。</li></ul><p>针对线程安全中给出的例子进行加锁，得到如下代码，其余代码与<a href="#3-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">线程安全</a>中给出的相同。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jsl8hilckj50ki"></i><span>java</span><div class="collapse show" id="collapse-jsl8hilckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义账户类(同步代码块)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String cardID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardID, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardID = cardID;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">//实例方法中同步代码块：建议使用this作为锁对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">//对于相同的this(account)同时只允许一个线程进入</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>                System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money + <span class="hljs-string">&quot;元&quot;</span>);<br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;取钱后，账户余额&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(name + <span class="hljs-string">&quot;余额不足&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//静态方法中同步代码块，建议使用类名.class做锁对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//对于所有调用该方法的同时只允许一个线程进入</span><br>        <span class="hljs-keyword">synchronized</span> (Account.class) &#123;<br>            System.out.println(<span class="hljs-string">&quot;现在有一个账户正在取钱&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//最终输出：用户A取出100000.0元</span><br><span class="hljs-comment">//        用户A取钱后，账户余额0.0</span><br><span class="hljs-comment">//        用户B余额不足</span><br></code></pre></td></tr></table></div></figure><h2 id="4-2-同步方法"><a href="#4-2-同步方法" class="headerlink" title="4.2 同步方法"></a>4.2 同步方法</h2><p><strong>概述</strong></p><p>同步方法即使用 <font class="code-word"><code>synchronized</code></font> 修饰方法，包括实例方法和静态方法。</p><p>格式为：<font class="code-sentence"><code>修饰符 synchronized 返回值类型 方法名称(形参列表) &#123; 操作共享资源的代码(核心代码) &#125;</code></font>。</p><p>对于当前同时执行的线程来说，当锁对象是同一个对象，则只允许一个线程进入，若为不同对象，则不设限。锁是可以锁多个方法的，只要这些方法中锁对象一样。</p><p><strong>使用</strong></p><p>同步方法其实底层也是有<font class="word-stress">隐式锁对象</font>的，只是锁的范围是整个方法代码：</p><ul><li><strong>实例方法</strong>：同步方法默认使用 <font class="code-word"><code>this</code></font> 作为锁对象。</li><li><strong>静态方法</strong>：同步方法默认使用<font class="code-word"><code>类名.class</code></font> 对象作为锁对象。</li></ul><p>针对线程安全中给出的例子进行加锁，得到如下代码，其余代码与<a href="#3-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">线程安全</a>中给出的相同。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-44pu56lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-44pu56lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义账户类(同步方法)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String cardID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardID, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardID = cardID;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">//同步实例方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">//同步代码块，对于相同的this(account)只允许一个线程进入</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money + <span class="hljs-string">&quot;元&quot;</span>);<br><br>            <span class="hljs-built_in">this</span>.money -= money;<br>            System.out.println(name + <span class="hljs-string">&quot;取钱后，账户余额&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;余额不足&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//同步静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;现在有一个账户正在取钱&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//最终输出：用户B取出100000.0元</span><br><span class="hljs-comment">//        用户A取钱后，账户余额0.0</span><br><span class="hljs-comment">//        用户A余额不足</span><br></code></pre></td></tr></table></div></figure><h2 id="4-3-Lock-锁"><a href="#4-3-Lock-锁" class="headerlink" title="4.3 Lock 锁"></a>4.3 Lock 锁</h2><p><strong>概述</strong></p><p>JDK5 以后提供了一个新的锁对象 <font class="code-word"><code>Lock</code></font>，更加灵活、方便。</p><p>Lock是接口不能直接实例化，可以采用它的实现类 <font class="code-word"><code>ReentrantLock</code></font> 来构建 Lock 锁对象，并建议用 <font class="code-word"><code>final</code></font> 修饰，防止被更改替换：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>构造方法</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public ReentrantLock()</td>             <td style="text-align: center;">获得 Lock 锁的实现类对象</td>         </tr>    </body></table>**分类**<p>Lock 可以通过 <font class="code-word"><code>static</code></font> 关键字定义成静态成员也可以定义成非静态成员：</p><ul><li>非静态锁：加锁后的内容，对于同一实例的不同线程，同时只允许一个线程进入。</li><li>静态锁：加锁后的内容，对于该类，同时只允许一个线程进入。静态方法中只允许用静态锁来上锁。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zxthaqlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-zxthaqlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//非静态锁：只针对同一个实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-comment">//静态锁：针对整个类</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br></code></pre></td></tr></table></div></figure><p><strong>方法</strong></p><p>Lock 提供了加锁和解锁的 API ：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void lock()</td>             <td style="text-align: center;">获得锁</td>         </tr>        <tr>            <td style="text-align: center;">void unlock()</td>             <td style="text-align: center;">释放锁</td>         </tr>    </body></table><p>针对线程安全中给出的例子进行加锁，得到如下代码，其余代码与<a href="#3-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">线程安全</a>中给出的相同。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kbxhrtlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-kbxhrtlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String cardID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br>    <span class="hljs-comment">//非静态锁：只针对同一个实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">//静态锁：针对整个类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardID, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardID = cardID;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">//实例方法中上锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money + <span class="hljs-string">&quot;元&quot;</span>);<br>            <span class="hljs-built_in">this</span>.money -= money;<br>            System.out.println(name + <span class="hljs-string">&quot;取钱后，账户余额&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;余额不足&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//实例方法中解锁</span><br>        lock.unlock();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//静态方法中上锁</span><br>        mainLock.lock();<br>        System.out.println(<span class="hljs-string">&quot;现在有一个账户正在取钱&quot;</span>);<br>        <span class="hljs-comment">//静态方法中解锁</span><br>        mainLock.unlock();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">//最终输出：用户B取出100000.0元</span><br><span class="hljs-comment">//        用户A取钱后，账户余额0.0</span><br><span class="hljs-comment">//        用户A余额不足</span><br></code></pre></td></tr></table></div></figure><h1 id="5-线程通信"><a href="#5-线程通信" class="headerlink" title="5. 线程通信"></a>5. 线程通信</h1><p><strong>概述</strong></p><p>所谓线程通信就是线程间相互发送数据，通常通过共享一个数据的方式实现线程通信，根据共享数据的情况决定自己该怎么做，以及通知其他线程怎么做。</p><p><font class="code-word"><code>Object</code></font> 类提供了线程唤醒和等待的方法：这些方法必须<font class="word-stress">使用<font class="word-stress">同步锁对象</font>进行调用</font>。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void wait()</td>             <td style="text-align: center;">让当前线程等待并释放所占锁，直到另一个线程调用 notify() 方法或 notifyAll() 方法</td>         </tr>        <tr>            <td style="text-align: center;">void notify()</td>             <td style="text-align: center;">唤醒正在等待的单个线程</td>         </tr>        <tr>            <td style="text-align: center;">void notifyAll()</td>             <td style="text-align: center;">唤醒正在等待的所有线程</td>         </tr>    </body></table>**案例**<p>以下案例展示了线程通信，账户类用于存储账户信息以及提供取钱和存钱方法，分别有2个取钱线程和3个存钱线程在进行操作，只允许一存一取。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dvmapvlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-dvmapvlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义账户类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String cardID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardID, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardID = cardID;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">//取钱方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>                <span class="hljs-comment">//钱足够，可以取钱</span><br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;取出&quot;</span> + money + <span class="hljs-string">&quot;元，余额&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125;<br>            <span class="hljs-comment">//使用锁对象唤醒所有5个线程，再让自己的线程进入等待</span><br>            <span class="hljs-built_in">this</span>.notifyAll();<br>            <span class="hljs-built_in">this</span>.wait();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//存钱方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depositMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//钱没了，可以存钱</span><br>                <span class="hljs-built_in">this</span>.money += money;<br>                System.out.println(name + <span class="hljs-string">&quot;存入&quot;</span> + money + <span class="hljs-string">&quot;元，余额&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125;<br>            <span class="hljs-comment">//使用锁对象唤醒所有5个线程，再让自己的线程进入等待</span><br>            <span class="hljs-built_in">this</span>.notifyAll();<br>            <span class="hljs-built_in">this</span>.wait();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bb7ok8lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-bb7ok8lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义取钱线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Account account;<br><br>    <span class="hljs-comment">//构造方法：用于接收取钱的账户和用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account account, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.account = account;<br>    &#125;<br><br>    <span class="hljs-comment">//取钱线程</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//模拟不断取钱，每次取钱间断3秒</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            account.drawMoney(<span class="hljs-number">100000</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wd25rmlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-wd25rmlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义存钱线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepositThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Account account;<br><br>    <span class="hljs-comment">//构造方法：用于接收存钱的账户和用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DepositThread</span><span class="hljs-params">(Account account, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.account = account;<br>    &#125;<br><br>    <span class="hljs-comment">//存钱线程</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//模拟不断存钱，每次取钱间断3秒</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            account.depositMoney(<span class="hljs-number">100000</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ndmkn5lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-ndmkn5lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建公共账户对象，之后5个用户使用的是同一把锁</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;IDCard-001&quot;</span>, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//创建2个取钱线程代表取钱用户A和B</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(account, <span class="hljs-string">&quot;取钱用户A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(account, <span class="hljs-string">&quot;取钱用户B&quot;</span>).start();<br><br>        <span class="hljs-comment">//创建3个存钱线程代表存钱用户A和B和C</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(account, <span class="hljs-string">&quot;存钱用户A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(account, <span class="hljs-string">&quot;存钱用户B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(account, <span class="hljs-string">&quot;存钱用户C&quot;</span>).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="6-线程池"><a href="#6-线程池" class="headerlink" title="6. 线程池"></a>6. 线程池</h1><p>线程池就是一个可以<font class="word-stress">复用线程</font>的技术。如果用户每发起一个请求，后台就创建一个新线程来处理，下次新任务来了又要创建新线程，而创建新线程的开销是很大的，这样会严重影响系统的性能。</p><p>复用线程如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-42.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h2 id="6-1-创建线程池"><a href="#6-1-创建线程池" class="headerlink" title="6.1 创建线程池"></a>6.1 创建线程池</h2><p><strong>创建</strong></p><p>JDK5 起提供了代表线程池的接口 <font class="code-word"><code>ExecutorService</code></font>。</p><p>得到线程池有以下两种方式：</p><ul><li><p><strong>方式一</strong>：使用 ExecutorService 的实现类 <font class="code-word"><code>ThreadPoolExecutor</code></font> 自创建一个线程池对象。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gjfce5lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-gjfce5lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ThreadPoolExecutor构造方法（除此之外还有参数少一点的）</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">int</span> corePoolSize,                    //指定线程池的线程数量（核心线程）：不能小于<span class="hljs-number">0</span>                    </span><br><span class="hljs-params">    <span class="hljs-type">int</span> maximumPoolSize,                 //指定线程池可支持的最大线程数：最大数量 &gt;= 核心线程数量         </span><br><span class="hljs-params">    <span class="hljs-type">long</span> keepAliveTime,                  //指定临时线程的最大存活时间：不能小于<span class="hljs-number">0</span>    </span><br><span class="hljs-params">    TimeUnit unit,                       //指定存活时间的单位(秒、分、时、天)</span>：时间单位<br>    BlockingQueue&lt;Runnable&gt; workQueue,   <span class="hljs-comment">//指定任务队列：不能为null               </span><br>    ThreadFactory threadFactory,         <span class="hljs-comment">//指定用哪个线程工厂创建线程：不能为null             </span><br>    RejectedExecutionHandler handler     <span class="hljs-comment">//指定线程忙，任务队列满的时候，新任务来了怎么办：不能为null </span><br>) <br></code></pre></td></tr></table></div></figure></li><li><p><strong>方式二</strong>：使用 <font class="code-word"><code>Executors</code></font>（线程池的工具类）调用方法返回不同特点的线程池对象。</p></li></ul><p><strong>特点</strong></p><p>线程池中的两个关键的时间点如下：</p><ul><li>创建临时线程：新任务提交时发现核心线程都在忙，任务队列也满了，并且还可以创建临时线程，此时才会创建临时线程。</li><li>开始拒绝任务：核心线程和临时线程都在忙，任务队列也满了，新的任务过来的时候才会开始任务拒绝。</li></ul><h2 id="6-2-线程池方法"><a href="#6-2-线程池方法" class="headerlink" title="6.2 线程池方法"></a>6.2 线程池方法</h2><h3 id="6-2-1-ExecutorService"><a href="#6-2-1-ExecutorService" class="headerlink" title="6.2.1 ExecutorService"></a>6.2.1 ExecutorService</h3><p><strong>类的方法</strong></p><p><font class="code-word"><code>ExecutorService</code></font> 的常用方法如下：同一个任务多次递交给线程池，会开启多个线程。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void execute(Runnable command)</td>             <td style="text-align: center;">执行任务/命令，没有返回值，一般用来执行 Runnable 任务</td>         </tr>        <tr>            <td style="text-align: center;">Future&lt;T&gt; submit(Callable&lt;T&gt; task)</td>             <td style="text-align: center;">执行任务，返回未来任务对象获取线程结果，一般拿来执行 Callable 任务</td>         </tr>        <tr>            <td style="text-align: center;">void shutdown()</td>             <td style="text-align: center;">等任务执行完毕后关闭线程池</td>         </tr>        <tr>            <td style="text-align: center;">List&lt;Runnable&gt; shutdownNow()</td>             <td style="text-align: center;">立刻关闭，停止正在执行的任务，并返回队列中未执行的任务</td>         </tr>    </body></table><p>新任务的拒绝策略有如下几种：默认策略是 <font class="code-word"><code>ThreadPoolExecutor.AbortPolicy</code></font>。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">ThreadPoolExecutor.AbortPolicy</td>             <td style="text-align: center;">丢弃任务并抛出 RejectedExecutionException 异常</td>         </tr>        <tr>            <td style="text-align: center;">ThreadPoolExecutor.DiscardPolicy</td>             <td style="text-align: center;">丢弃任务，但是不抛出异常。不推荐</td>         </tr>        <tr>            <td style="text-align: center;">ThreadPoolExecutor.DiscardOldestPolicy</td>             <td style="text-align: center;">抛弃队列中等待最久的任务，然后把当前任务加入队列中</td>         </tr>        <tr>            <td style="text-align: center;">ThreadPoolExecutor.CallerRunsPolicy</td>             <td style="text-align: center;">由主线程负责调用任务的run()方法从而绕过线程池直接执行</td>         </tr>    </body></table>**线程池处理 Runnable 任务**<figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nv3f24lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-nv3f24lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义线程任务类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行&quot;</span> + num);<br>        <span class="hljs-comment">//让线程长期不结束，便于观察线程池结果</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程开始休眠&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jm0yvylckj50ki"></i><span>java</span><div class="collapse show" id="collapse-jm0yvylckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-comment">//交给线程池中核心线程</span><br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">1</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">2</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">//线程进了队列</span><br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">4</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">5</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">6</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">7</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">8</span>));<br><br>        <span class="hljs-comment">//创建临时线程</span><br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">9</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">10</span>));<br><br>        <span class="hljs-comment">//开始拒绝任务</span><br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">11</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>线程池处理 Callable 任务</strong></p><p><font class="code-word"><code>submit</code></font> 方法的返回值 <font class="code-word"><code>Future</code></font> 类型实际为 <font class="code-word"><code>FutureTask</code></font> 的父类，获取线程的返回值即调用 <a href="#1-3-%E5%AE%9E%E7%8E%B0-Callable-%E6%8E%A5%E5%8F%A3">FutureTask</a> 的 <font class="code-word"><code>get</code></font> 方法。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-m1l1r4lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-m1l1r4lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-comment">//定义线程任务类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> Thread.currentThread().getName() + <span class="hljs-string">&quot;执行&quot;</span> + num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-eu4lujlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-eu4lujlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><br>        <span class="hljs-comment">//创建线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-comment">//把线程交给线程池</span><br>        Future&lt;String&gt; f1 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">1</span>));<br>        Future&lt;String&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">2</span>));<br>        Future&lt;String&gt; f3 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">3</span>));<br>        Future&lt;String&gt; f4 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">4</span>));<br><br>        <span class="hljs-comment">//获取线程的返回值</span><br>        System.out.println(f1.get());     <span class="hljs-comment">//输出：pool-1-thread-1执行1</span><br>        System.out.println(f2.get());     <span class="hljs-comment">//输出：pool-1-thread-2执行2</span><br>        System.out.println(f3.get());     <span class="hljs-comment">//输出：pool-1-thread-3执行3</span><br>        System.out.println(f4.get());     <span class="hljs-comment">//输出：pool-1-thread-3执行4</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="6-2-2-Executors-工具类"><a href="#6-2-2-Executors-工具类" class="headerlink" title="6.2.2 Executors 工具类"></a>6.2.2 Executors 工具类</h3><p><strong>类的方法</strong></p><p>线程池的工具类 <font class="code-word"><code>Executors</code></font> 可以通过调用方法返回不同类型的线程池对象。</p><p>Executors 得到线程池对象常用方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static ExecutorService newCachedThreadPool()</td>             <td style="text-align: center;">线程数量随着任务增加而增加</br>如果线程任务执行完毕且空闲了一段时间则会被回收掉</td>         </tr>        <tr>            <td style="text-align: center;">public static ExecutorService newFixedThreadPool(int nThreads)</td>             <td style="text-align: center;">创建固定线程数量的线程池</br>如果某个线程因为执行异常而结束，那么线程池会补充一个新线程替代它。</td>         </tr>        <tr>            <td style="text-align: center;">public static ExecutorService newSingleThreadExecutor()</td>             <td style="text-align: center;">创建只有一个线程的线程池对象</br>如果该线程出现异常而结束，那么线程池会补充一个新线程。</td>         </tr>        <tr>            <td style="text-align: center;">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</td>             <td style="text-align: center;">创建一个线程池</br>可以实现在给定的延迟后运行任务，或者定期执行任务</td>         </tr>    </body></table><p>Executors 的底层其实也是基于线程池的实现类 <font class="code-word"><code>ThreadPoolExecutor</code></font> 创建线程池对象的。</p><p><strong>类的案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vh5flblckj50ki"></i><span>java</span><div class="collapse show" id="collapse-vh5flblckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义线程任务类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行&quot;</span> + num);<br>        <span class="hljs-comment">//让线程长期不结束，便于观察线程池结果</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程开始休眠&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tktn6plckj50ki"></i><span>java</span><div class="collapse show" id="collapse-tktn6plckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">//交给线程池中核心线程</span><br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">1</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">2</span>));<br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">//线程进了队列</span><br>        pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>(<span class="hljs-number">4</span>));<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>使用风险</strong></p><p>大型并发系统环境中使用 Executors 如果不注意可能会出现系统风险：</p><ul><li><p><font class="code-word"><code>newSingleThreadExecutor()</code></font> 和 <font class="code-word"><code>newFixedThreadPool(int nThreads) </code></font>：</p><p>允许请求的任务队列长度是 <font class="code-word"><code>Integer.MAX_VALUE</code></font>，可能出现 OOM 错误，即队列中任务太多，内存溢出（ java.lang.OutOfMemoryError）。</p></li><li><p><font class="code-word"><code>newCachedThreadPool()</code></font> 和 <font class="code-word"><code>newScheduledThreadPool(int corePoolSize)</code></font>：</p><p>创建的线程数量最大上限是 <font class="code-word"><code>Integer.MAX_VALUE</code></font>，线程数可能会随着任务1:1增长，也可能出现OOM错误，内存溢出（ java.lang.OutOfMemoryError ）</p></li></ul><h1 id="7-定时器"><a href="#7-定时器" class="headerlink" title="7. 定时器"></a>7. 定时器</h1><h2 id="7-1-Timer"><a href="#7-1-Timer" class="headerlink" title="7.1 Timer"></a>7.1 Timer</h2><p><strong>类的概述</strong></p><p><font class="code-word"><code>Timer</code></font> 可以创建定时器线程，并按照计划处理任务，构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>构造方法</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public Timer()</td>             <td style="text-align: center;">创建Timer定时器对象</td>         </tr>    </body></table>**类的方法**<p>Timer 按照计划处理任务要调用 <font class="code-word"><code>schedule</code></font> 方法：</p><p>第一个参数 <font class="code-word"><code>TimerTask</code></font> 是 <font class="code-word"><code>Runnable</code></font> 的抽象实现类，需要重写 <font class="code-word"><code>run</code></font> 方法，后两个参数为延迟开启时间和执行间隔时间。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public void schedule(TimerTask task, long delay, long period)</td>             <td style="text-align: center;">开启一个定时器，按照计划处理 TimerTask 任务</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wg30o1lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-wg30o1lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br><span class="hljs-comment">//创建定时器线程</span><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br><br>        <span class="hljs-comment">//任务A交给定时器线程</span><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行A  &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>);<br><br>        <span class="hljs-comment">//任务B交给定时器线程</span><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行B  &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">3000</span>);<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出结果：</span><br><span class="hljs-comment">//Timer-0执行B  Mon Sep 26 22:14:05 CST 2022</span><br><span class="hljs-comment">//Timer-0执行A  Mon Sep 26 22:14:07 CST 2022</span><br><span class="hljs-comment">//Timer-0执行B  Mon Sep 26 22:14:08 CST 2022</span><br><span class="hljs-comment">//Timer-0执行A  Mon Sep 26 22:14:09 CST 2022</span><br><span class="hljs-comment">//Timer-0执行B  Mon Sep 26 22:14:11 CST 2022</span><br><span class="hljs-comment">//Timer-0执行A  Mon Sep 26 22:14:11 CST 2022</span><br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></div></figure><p><strong>注意事项</strong></p><p>Timer 使用时注意事项如下：</p><ul><li><p>Timer 是<font class="word-stress">单线程</font>，处理多个任务按照顺序依次执行，可能存在延时与设置定时器的时间有出入。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hujsw3lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-hujsw3lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建定时器线程</span><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br><br>        <span class="hljs-comment">//任务A交给定时器线程</span><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行A  &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>                <span class="hljs-comment">//让该线程休眠5秒，由于是单线程，会在休眠结束后再继续任务，会直接导致A和B的计时与设定有出入</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">5000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>);<br><br>        <span class="hljs-comment">//任务B交给定时器线程</span><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行B  &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">3000</span>);<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出结果：</span><br><span class="hljs-comment">//Timer-0执行A  Mon Sep 26 22:15:58 CST 2022</span><br><span class="hljs-comment">//Timer-0执行B  Mon Sep 26 22:16:03 CST 2022    实际间隔：5s</span><br><span class="hljs-comment">//Timer-0执行A  Mon Sep 26 22:16:03 CST 2022    实际间隔：5s</span><br></code></pre></td></tr></table></div></figure></li><li><p>可能因为其中的某个任务的异常使 Timer 线程即刻终止，从而影响后续任务执行。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hmpr5slckj50ki"></i><span>java</span><div class="collapse show" id="collapse-hmpr5slckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建定时器线程</span><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br><br>        <span class="hljs-comment">//任务A交给定时器线程</span><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行A  &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">2000</span>);<br><br>        <span class="hljs-comment">//任务B交给定时器线程</span><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行B  &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>                <span class="hljs-comment">//此处会直接抛出异常，终止整个线程，任务A也无法执行</span><br>                System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">3000</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出结果：</span><br><span class="hljs-comment">//Timer-0执行A  Mon Sep 26 22:20:40 CST 2022</span><br><span class="hljs-comment">//Timer-0执行B  Mon Sep 26 22:20:40 CST 2022</span><br><span class="hljs-comment">//异常抛出</span><br></code></pre></td></tr></table></div></figure></li></ul><h2 id="7-2-ScheduledExecutorService"><a href="#7-2-ScheduledExecutorService" class="headerlink" title="7.2 ScheduledExecutorService"></a>7.2 ScheduledExecutorService</h2><p><strong>类的概述</strong></p><p><font class="code-word"><code>ScheduledExecutorService</code></font> 是 JDK1.5 中引入了并发包，目的是为了弥补 Timer 的缺陷。ScheduledExecutorService 内部为线程池，不存在 Timer 中存在的问题，某个任务的执行情况不会影响其他定时任务的执行。</p><p>ScheduledExecutorService 为接口，创建其对象需要调用 <font class="code-word"><code>Executors</code></font> 中的方法 <font class="code-word"><code>newScheduledThreadPool</code></font>。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body        <tr>            <td style="text-align: center;">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</td>             <td style="text-align: center;">创建一个线程池</br>可以实现在给定的延迟后运行任务，或者定期执行任务</td>         </tr>    </body></table><p><strong>类的方法</strong></p><p>类中按照计划时间处理任务的方法如下：</p><p>第一个参数使用是 <font class="code-word"><code>Runnable</code></font> 的抽象实现类 <font class="code-word"><code>TimerTask</code></font> ，并重写 <font class="code-word"><code>run</code></font> 方法，后三个参数为延迟开启时间、执行间隔时间、时间单位。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</td>             <td style="text-align: center;">周期调度方法</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dyafablckj50ki"></i><span>java</span><div class="collapse show" id="collapse-dyafablckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ScheduledExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建线程池对象</span><br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">//将任务A交给线程池</span><br>        pool.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行A&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, TimeUnit.SECONDS);<br><br>        <span class="hljs-comment">//将任务B交给线程池</span><br>        pool.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行B&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>                <span class="hljs-comment">//该线程休眠，会影响该任务后续计时，与设定时间会有出入，但不会影响到其他任务的计时</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">5000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, TimeUnit.SECONDS);<br><br>        <span class="hljs-comment">//将任务C交给线程池</span><br>        pool.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;执行C&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>                <span class="hljs-comment">//会抛出异常，该线程会被处理，但不会导致线程池终止，其他任务正常进行</span><br>                System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, TimeUnit.SECONDS);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出结果：</span><br><span class="hljs-comment">//pool-1-thread-2执行BMon Sep 26 23:31:33 CST 2022    任务A始终按照设定正常执行</span><br><span class="hljs-comment">//pool-1-thread-1执行AMon Sep 26 23:31:33 CST 2022</span><br><span class="hljs-comment">//pool-1-thread-3执行CMon Sep 26 23:31:33 CST 2022    任务C因异常结束了</span><br><span class="hljs-comment">//pool-1-thread-1执行AMon Sep 26 23:31:35 CST 2022</span><br><span class="hljs-comment">//pool-1-thread-1执行AMon Sep 26 23:31:37 CST 2022</span><br><span class="hljs-comment">//pool-1-thread-2执行BMon Sep 26 23:31:38 CST 2022    任务B自身休眠了5秒</span><br><span class="hljs-comment">//pool-1-thread-1执行AMon Sep 26 23:31:39 CST 2022</span><br></code></pre></td></tr></table></div></figure><h1 id="8-并发与并行"><a href="#8-并发与并行" class="headerlink" title="8. 并发与并行"></a>8. 并发与并行</h1><p>正在运行的程序就是一个独立的进程， 线程是属于进程的，多个线程其实是并发与并行同时进行的。</p><p><strong>并发</strong></p><p>CPU 同时处理线程的数量有限，CPU 会轮询为系统的每个线程服务，<font class="word-stress">每个时刻都只执行着一个线程</font>，但由于 CPU 切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发。类似于三体里锁死人类基础科学的智子。</p><p><strong>并行</strong></p><p>在同一个时刻上，<font class="word-stress">同时有多个线程</font>在被 CPU 处理并执行。</p><h1 id="9-线程生命周期"><a href="#9-线程生命周期" class="headerlink" title="9. 线程生命周期"></a>9. 线程生命周期</h1><p>Java 总共定义了六种线程状态，六种状态都定义在 <font class="code-word"><code>Thread</code></font> 类的内部枚举类中，如下所示：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>线程状态</th>            <th style="text-align: center;" width=50%>状态说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">New(新建)</td>             <td style="text-align: center;">线程刚被创建，但是并未启动</td>         </tr>        <tr>            <td style="text-align: center;">Runnable(可运行)</td>             <td style="text-align: center;">线程已经调用了 start() 等待 CPU 调度</td>         </tr>        <tr>            <td style="text-align: center;">Blocked(锁阻塞)</td>             <td style="text-align: center;">线程在执行的时候未竞争到锁对象，则该线程进入 Blocked 状态</td>         </tr>        <tr>            <td style="text-align: center;">Waiting(无限等待)</td>             <td style="text-align: center;">一个线程进入 Waiting 状态，</br>另一个线程调用 notify 或者 notifyAll 方法才能够唤醒</td>         </tr>        <tr>            <td style="text-align: center;">Timed Waiting(计时等待)</td>             <td style="text-align: center;">同 waiting 状态，有几个方法有超时参数，调用他们将进入 Timed Waiting 状态。</br>带有超时参数的常用方法有 Thread.sleep, Object.wait</td>         </tr><tr>            <td style="text-align: center;">Teminated(被终止)</td>             <td style="text-align: center;">因为 run 方法正常退出而终止，或者因为没有捕获的异常终止了 run 方法而终止</td>         </tr>    </body></table><p>六种线程之间相互转换关系如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-43.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用 API - Java SE</title>
    <link href="/post/45824/"/>
    <url>/post/45824/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Object-类"><a href="#1-Object-类" class="headerlink" title="1. Object 类"></a>1. Object 类</h1><p>Java 中一个类要么默认继承了 Object 类，要么间接继承了 Object 类。</p><p><font class="code-word"><code>Object</code></font> 作为所有类的父类，提供了很多常用的方法给每个子类对象拿来使用，其中常用的两个方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>构造方法</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public String toString()</td>             <td style="text-align: center;">默认是返回当前对象在堆内存中的地址信息:类的全限名@内存地址</td>         </tr>        <tr>            <td style="text-align: center;">public boolean equals(Object o)</td>             <td style="text-align: center;">默认是比较当前对象与另一个对象的地址是否相同，相同返回 true，不同返回 false</td>         </tr>    </body></table><h2 id="1-1-toString-重写"><a href="#1-1-toString-重写" class="headerlink" title="1.1 toString 重写"></a>1.1 toString 重写</h2><p>Object 中 <font class="code-word"><code>toString()</code></font> 方法<font class="word-stress">默认返回地址</font>，但通过被子类重写，则可以返回对象的内容信息。</p><p>在用 <font class="code-sentence"><code>System.out</code></font> 打印对象时，会默认调用对象的 toString() 方法，所以此时可以省略该方法，只写对象。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ad00i2lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ad00i2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//重写toString()方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Students&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-q0jobilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-q0jobilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>);<br>        <br>        System.out.println(student.toString());        <span class="hljs-comment">//输出：Students&#123;name=&#x27;张三&#x27;, age=23&#125;</span><br>        <span class="hljs-comment">//toString()可不写，会默认调用</span><br>        System.out.println(student);                   <span class="hljs-comment">//输出：Students&#123;name=&#x27;张三&#x27;, age=23&#125;</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-2-equals-重写"><a href="#1-2-equals-重写" class="headerlink" title="1.2 equals 重写"></a>1.2 equals 重写</h2><p>Object 中 <font class="code-word"><code>equals</code></font> 方法<font class="word-stress">默认比较地址</font>，比较地址时与 <font class="code-word"><code>==</code></font> 效果相同。但通过被子类重写，则可以比较对象的内容信息是否一致。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-d08ul0lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-d08ul0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//重写equals方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-comment">//若地址相同则直接认为相同</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;                                         <br>        <span class="hljs-comment">//若比较对象为空指针或类型不同则直接认为不同</span><br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>        <span class="hljs-comment">//不属于上面两种情况时，所有信息相同则认为相同</span><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">students</span> <span class="hljs-operator">=</span> (Students) o;<br>        <span class="hljs-keyword">return</span> age == students.age &amp;&amp; Objects.equals(name, students.name);  <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hff08jlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-hff08jlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>);<br><br>        System.out.println(student1 == student2);          <span class="hljs-comment">//输出：false</span><br>        System.out.println(student1.equals(student2));   <span class="hljs-comment">//输出：true</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="2-Objects-类"><a href="#2-Objects-类" class="headerlink" title="2. Objects 类"></a>2. Objects 类</h1><p><font class="code-word"><code>Objects</code></font> 是一个工具类，继承于 <font class="code-word"><code>Object</code></font> 类，提供了一些方法去完成一些功能：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static boolean equals(Object a, Object b)</td>             <td style="text-align: center;">比较两个对象的，底层会先进行非空判断，从而可以避免空指针异常，再进行 equals 比较</td>         </tr>        <tr>            <td style="text-align: center;">public static boolean isNull(Object obj)</td>             <td style="text-align: center;">判断变量是否为 null，为 null 返回 true，反之返回 false</td>         </tr>    </body></table><p>Objects 中 <font class="code-word"><code>equals</code></font> 其内部仍然是调用了类自身的 equals 方法，但在调用前会先进行非空判断，<font class="word-stress">避免了空指针异常</font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-a34va3lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-a34va3lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Objects的equals的源代码：</span><br><span class="hljs-comment"> * public static boolean equals(Object a, Object b) &#123;</span><br><span class="hljs-comment"> *     return (a == b) || (a != null &amp;&amp; a.equals(b));</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>);<br><br>        System.out.println(Objects.equals(student1,student2));   <span class="hljs-comment">//输出：false</span><br>        System.out.println(student1.equals(student2));           <span class="hljs-comment">//空指针异常：NullPointerException</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-String-类"><a href="#3-String-类" class="headerlink" title="3. String 类"></a>3. String 类</h1><h2 id="3-1-创建对象"><a href="#3-1-创建对象" class="headerlink" title="3.1 创建对象"></a>3.1 创建对象</h2><p><strong>类的概述</strong></p><p><font class="code-word"><code>java.lang.String</code></font> 类代表字符串，<font class="code-word"><code>String</code></font> 类定义的变量可以用于指向字符串对象，为<font class="word-stress">引用类型</font>。</p><p>String 被称为<font class="word-stress">不可变字符串</font>类型，它的对象在创建后不能被更改，String 变量每次的修改其实都是产生并指向了新的字符串对象。</p><p><strong>创建类对象</strong></p><ul><li><p>可以通过直接赋值来创建 String 对象：</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ph99hllckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ph99hllckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>System.out.println(s1 == s2);   <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></div></figure><p>直接定义字符串对象，在字符串常量池中存储，而且相同内容只会在其中存储一份。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-27.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li><li><p>通过 String 类中构造方法创建对象：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>构造方法</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public String()</td>             <td style="text-align: center;">创建一个空白字符串对象，不含有任何内容</td>         </tr>        <tr>            <td style="text-align: center;">public String(String original)</td>             <td style="text-align: center;">根据传入的字符串内容，来创建字符串对象</td>         </tr>        <tr>            <td style="text-align: center;">public String(char[] chs)</td>             <td style="text-align: center;">根据字符数组的内容，来创建字符串对象</td>         </tr>        <tr>            <td style="text-align: center;">public String(byte[] chs)</td>             <td style="text-align: center;">根据字节数组的内容，来创建字符串对象</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-mwf3jflckj50kh"></i><span>java</span><div class="collapse show" id="collapse-mwf3jflckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs);<br>System.out.println(s1 == s2);     <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></div></figure><p>通过构造方法创建对象，每一次都会产生一个新对象，放在堆内存中。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-28.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li></ul><p><strong>字符集解码</strong></p><p>字符串的构造方法同时可以用于<a href="/post/5808/#2-2-%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81">字符集的解码</a>。</p><h2 id="3-2-比较对象"><a href="#3-2-比较对象" class="headerlink" title="3.2 比较对象"></a>3.2 比较对象</h2><p>引用类型用 <font class="code-word"><code>==</code></font> 比较是比较的<font class="word-stress">地址值</font>，若是比较内容，需要调用 <font class="code-word"><code>String</code></font> 类中的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public boolean equals (Object anObject)</td>             <td style="text-align: center;">将此字符串与指定对象进行比较。只关心字符内容是否一致</td>         </tr>        <tr>            <td style="text-align: center;">public boolean equalsIgnoreCase (String anotherString)</td>             <td style="text-align: center;">将此字符串与指定对象进行比较，忽略大小写比较字符串。只关心字符内容是否一致</td>         </tr>    </body></table><h2 id="3-3-常用方法"><a href="#3-3-常用方法" class="headerlink" title="3.3 常用方法"></a>3.3 常用方法</h2><p><strong>字符串拼接</strong></p><p><font class="code-word"><code>String</code></font> 和 <font class="code-word"><code>char</code></font> 字符拼接：可以直接采用 <font class="code-word"><code>+</code></font> 号拼接，参见<a href="/post/28534/#2-1-%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6">算数运算符</a>。</p><p><strong>查询方法</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public int length()</td>             <td style="text-align: center;">返回此字符串的长度</td>         </tr>        <tr>            <td style="text-align: center;">public char charAt(int index)</td>             <td style="text-align: center;">获取某个索引位置处的字符</td>         </tr>        <tr>            <td style="text-align: center;">public int indexOf(int ch)</td>             <td style="text-align: center;">返回指定字符在此字符串中第一次出现的索引</td>         </tr>        <tr>            <td style="text-align: center;">public boolean contains(CharSequence s)</td>             <td style="text-align: center;">判断字符串中是否包含指定字符</td>         </tr>        <tr>            <td style="text-align: center;">public boolean startWiths(String prefix)</td>             <td style="text-align: center;">判断字符串中是否以指定字符串开始</td>         </tr>    </body></table><p><strong>截取方法</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public String substring(int beginIndex, int endIndex)</td>             <td style="text-align: center;">根据开始和结束索引进行截取，得到新的字符串（包前不包后）</td>         </tr>        <tr>            <td style="text-align: center;">public String substring(int beginIndex)</td>             <td style="text-align: center;">从传入的索引处截取，截取到末尾，得到新的字符串</td>         </tr>    </body></table><p><strong>替换和分割方法</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public char[] toCharArray()</td>             <td style="text-align: center;">将当前字符串转换成字符数组返回</td>         </tr>         <tr>            <td style="text-align: center;">public String replace(CharSequence target, </br>CharSequence replacement)</td>             <td style="text-align: center;">使用新值，将字符串中的旧值替换，得到新的字符串</td>         </tr>        <tr>            <td style="text-align: center;">public String[] split(String regex)</td>             <td style="text-align: center;">根据传入的规则切割字符串，得到字符串数组返回</td>         </tr>    </body></table><p>字符串指定规则切割可以参照<a href="/post/3799/#2-2-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BA%94%E7%94%A8">正则表达式</a>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z2restlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-z2restlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字符串替换</span><br><span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三最棒！&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> rs1.replace(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);   <span class="hljs-comment">//输出：&quot;李四最棒！&quot;</span><br><br><span class="hljs-comment">//字符串指定规则切割</span><br><span class="hljs-type">String</span> <span class="hljs-variable">names</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三。李四。王五&quot;</span>;                          <br>String[] arr = names.split(<span class="hljs-string">&quot;。&quot;</span>);                           <br>System.out.println(Arrays.toString(arr));    <span class="hljs-comment">//输出：[张三, 李四, 王五]      </span><br></code></pre></td></tr></table></div></figure><h1 id="4-StringBuilder-类"><a href="#4-StringBuilder-类" class="headerlink" title="4. StringBuilder 类"></a>4. StringBuilder 类</h1><p><strong>类的概述</strong></p><p><font class="code-word"><code>StringBuilder</code></font> 是一个可变的字符串的操作类，操作字符串的性能比 <font class="code-word"><code>String</code></font> 要更高（如拼接、修改等）。</p><p>StringBuilder 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public StringBuilder()</td>             <td style="text-align: center;">创建一个空白的可变的字符串对象，不包含任何内容</td>         </tr>        <tr>            <td style="text-align: center;">public StringBuilder(String str)</td>             <td style="text-align: center;">创建一个指定字符串内容的可变字符串对象</td>         </tr>    </body></table>**类的方法**<table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public StringBuilder append(E e)</td>             <td style="text-align: center;">添加数据并返回 StringBuilder 对象本身</td>         </tr>        <tr>            <td style="text-align: center;">public StringBuilder reverse()</td>             <td style="text-align: center;">将对象的内容反转并返回 StringBuilder 对象本身</td>         </tr>        <tr>            <td style="text-align: center;">public int length()</td>             <td style="text-align: center;">返回对象内容长度</td>         </tr>        <tr>            <td style="text-align: center;">public String toString()</td>             <td style="text-align: center;">把 StringBuilder 转换为 String </td>         </tr>    </body></table><p>对于 <font class="code-word"><code>append</code></font> 方法和 <font class="code-word"><code>reverse</code></font> 方法支持链式编程。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rjtwi7lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-rjtwi7lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>sb.append(<span class="hljs-string">&quot;你&quot;</span>).append(<span class="hljs-number">23</span>).append(<span class="hljs-string">&#x27;4&#x27;</span>);<br><br>System.out.println(sb);              <span class="hljs-comment">//输出：你234</span><br>System.out.println(sb.reverse());    <span class="hljs-comment">//输出：432你</span><br>System.out.println(sb.length());     <span class="hljs-comment">//输出：4</span><br></code></pre></td></tr></table></div></figure><p><strong>类的拼接性能</strong></p><p><font class="code-word"><code>StringBuilder</code></font> 拼接字符串时性能要优于 <font class="code-word"><code>String</code></font>，可以通过内存来具体解释：</p><ul><li><p>String 中直接使用 <font class="code-word"><code>+</code></font> 拼接字符串，其内存如下图所示：可见每一次拼接都要创建一个 StringBuilder 对象和一个 String 对象。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-36.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li><li><p>StringBuilder 中使用 <font class="code-word"><code>append</code></font> 方法拼接，只创建了一个对象。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-37.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li></ul><h1 id="5-Math-类"><a href="#5-Math-类" class="headerlink" title="5. Math 类"></a>5. Math 类</h1><p><font class="code-word"><code>Math</code></font> 类包含执行基本数字运算的方法，Math 类没有提供公开的构造器，<font class="word-stress">不能被实例化</font>。</p><p>Math 类中的常用方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static int abs(int a)</td>             <td style="text-align: center;">获取参数绝对值</td>         </tr>        <tr>            <td style="text-align: center;">public static double ceil(double a)</td>             <td style="text-align: center;">向上取整</td>         </tr>        <tr>            <td style="text-align: center;">public static double floor(double a)</td>             <td style="text-align: center;">向下取整</td>         </tr>        <tr>            <td style="text-align: center;">public static int round(float a)</td>             <td style="text-align: center;">四舍五入</td>         </tr>        <tr>            <td style="text-align: center;">public static int max(int a, int b)</td>             <td style="text-align: center;">获取两个 int 值中的较大值</td>         </tr>        <tr>            <td style="text-align: center;">public static double pow(double a, double b)</td>             <td style="text-align: center;">返回 a 的 b 次幂</td>         </tr>        <tr>            <td style="text-align: center;">public static double random()</td>             <td style="text-align: center;">返回 [0.0, 1.0) 之间的 double 类型随机值</td>         </tr>    </body></table><p>关于 <font class="code-word"><code>random()</code></font> 方法有如下注意事项：</p><ul><li>使用 random() 方法还可以生成指定范围 [a, b) 的随机数，语法格式如下：<font class="code-sentence"><code>Math.random() * (b - a) + a</code></font> 。</li><li>也可以生成指定范围 [a, b) 的 int 类型随机数，语法格式如下：<font class="code-sentence"><code>(int)(Math.random() * (b + 1 - a) + a)</code></font> 。</li></ul><h1 id="6-Random-类"><a href="#6-Random-类" class="headerlink" title="6. Random 类"></a>6. Random 类</h1><p><strong>类的概述</strong></p><p><font class="code-word"><code>Random</code></font> 类用于生成伪随机数流，并提供了生成不同类型随机数的方法。</p><p>Random 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public Random()</td>             <td style="text-align: center;">以系统自身的时间为种子来构造 Random 对象</td>         </tr>        <tr>            <td style="text-align: center;">public Random(long seed)</td>             <td style="text-align: center;">以自己来选定具体的种子来构造 Random 对象</td>         </tr>    </body></table><p>种子设定的注意事项如下：</p><ul><li>如果不给定种子，就使用系统当前时间戳作为种子，因此每次运行时种子不同，得到的随机数序列就不同。</li><li>但若自己给定相同的种子（seed），则得到的随机数序列是完全确定的。</li></ul><p><strong>类的方法</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public int nextInt()</td>             <td style="text-align: center;">返回值为整数，范围是 int 类型范围</td>         </tr>        <tr>            <td style="text-align: center;">public long nextLong()</td>             <td style="text-align: center;">返回值为长整型，范围是 long 类型的范围</td>         </tr>        <tr>            <td style="text-align: center;">public float nextFloat()</td>             <td style="text-align: center;">返回值为 float 小数，范围是 [0.0, 1.0)</td>         </tr>        <tr>            <td style="text-align: center;">public double nextDouble()</td>             <td style="text-align: center;">返回值为 double 小数，范围是 [0.0, 1.0)</td>         </tr>        <tr>            <td style="text-align: center;">public double nextGaussian()</td>             <td style="text-align: center;">返回值为呈高斯（正态）分布的 double 值，其平均值是 0.0，标准差是 1.0</td>         </tr>        <tr>            <td style="text-align: center;">public boolean nextBoolean()</td>             <td style="text-align: center;">返回值为 boolean 值，true 和 false 概率相同</td>         </tr>    </body></table><h1 id="7-System-类"><a href="#7-System-类" class="headerlink" title="7. System 类"></a>7. System 类</h1><p><font class="code-word"><code>System</code></font> 类包含了系统级的很多属性和控制方法，System 类没有提供公开的构造器，<font class="word-stress">不能被实例化</font>。</p><p>System 类中的常用方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static void exit(int status)</td>             <td style="text-align: center;">终止当前运行的 Java 虚拟机，参数非零则表示异常终止</td>         </tr>        <tr>            <td style="text-align: center;">public static long currentTimeMillis()</td>             <td style="text-align: center;">返回当前系统的时间毫秒值形式</td>         </tr>        <tr>            <td style="text-align: center;">public static void arraycopy(Object src, int srcPos, </br>Object dest, int destPos, int length)</td>             <td style="text-align: center;">数组拷贝，里面参数依次是数据源数组，起始索引，目的地数组，起始索引，拷贝个数</td>         </tr>    </body></table><p>方法使用的注意事项如下：</p><ul><li><p>使用 <font class="code-sentence"><code>System.exit(0)</code></font> 可以直接正常终止 JVM，在其之后的代码均不会运行。 </p></li><li><p>时间毫秒值：指的是从1970年1月1日 00:00:00（C语言诞生时间）走到此刻的总的毫秒数。1s &#x3D; 1000ms。</p></li><li><p>数组拷贝演示如下。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qhb7dylckj50kh"></i><span>java</span><div class="collapse show" id="collapse-qhb7dylckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;;<br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        <br>        <span class="hljs-comment">//执行数组拷贝</span><br>        System.arraycopy(arr1, <span class="hljs-number">2</span>, arr2, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>        System.out.println(Arrays.toString(arr2));    <span class="hljs-comment">//输出：[0, 30, 40, 50, 0]</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h1 id="8-BigDecimal-类"><a href="#8-BigDecimal-类" class="headerlink" title="8. BigDecimal 类"></a>8. BigDecimal 类</h1><p><strong>类的概述</strong></p><p><font class="code-word"><code>BigDecimal</code></font> 类提供了用于解决浮点型<font class="word-stress">运算精度失真</font>的问题，浮点型四则运算均可存在精度失真。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7jt360lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-7jt360lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">0.09</span> + <span class="hljs-number">0.01</span>);    <span class="hljs-comment">//0.09999999999999999</span><br>System.out.println(<span class="hljs-number">1.00</span> - <span class="hljs-number">0.32</span>);    <span class="hljs-comment">//0.6799999999999999</span><br>System.out.println(<span class="hljs-number">1.015</span> * <span class="hljs-number">100</span>);    <span class="hljs-comment">//101.49999999999999</span><br>System.out.println(<span class="hljs-number">1.301</span> / <span class="hljs-number">100</span>);    <span class="hljs-comment">//0.013009999999999999</span><br></code></pre></td></tr></table></div></figure><p>BigDecimal 虽然存在构造方法 <font class="code-word"><code>BigDecimal(double)</code></font>，但是存在<font class="word-stress">精度损失</font>风险，不推荐使用。</p><p>创建 BigDecimal 对象推荐使用 <font class="code-word"><code>valueOf</code></font> 方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static BigDecimal valueOf(double val)</td>             <td style="text-align: center;">可以将浮点数包装成 BigDecimal 对象</td>         </tr>    </body></table>**类的方法**<table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public BigDecimal add(BigDecimal b)</td>             <td style="text-align: center;">加法</td>         </tr>        <tr>            <td style="text-align: center;">public BigDecimal subtract(BigDecimal b)</td>             <td style="text-align: center;">减法</td>         </tr>        <tr>            <td style="text-align: center;">public BigDecimal multiply(BigDecimal b)</td>             <td style="text-align: center;">乘法</td>         </tr>        <tr>            <td style="text-align: center;">public BigDecimal divide(BigDecimal b)</td>             <td style="text-align: center;">除法</td>         </tr>        <tr>            <td style="text-align: center;">public BigDecimal divide(BigDecimal b)</td>             <td style="text-align: center;">除法</td>         </tr>        <tr>            <td style="text-align: center;">public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</td>             <td style="text-align: center;">除法，后两个参数为精确位数、舍入模式</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jlugculckj50kh"></i><span>java</span><div class="collapse show" id="collapse-jlugculckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>System.out.println(c);         <span class="hljs-comment">//0.30000000000000004</span><br><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(a);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(b);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> a1.add(b1);<br>System.out.println(c1);        <span class="hljs-comment">//0.3</span><br></code></pre></td></tr></table></div></figure><p><strong>类的注意事项</strong></p><p>特别注意 BigDecimal 类型只能进行精度运算，对于无法取到精确值的运算会直接抛出异常 <font class="code-word"><code>ArithmeticException</code></font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jqgr5alckj50kh"></i><span>java</span><div class="collapse show" id="collapse-jqgr5alckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">10.0</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">3.0</span>);<br><span class="hljs-comment">//BigDecimal c = a.divide(b);      //无法取到精确值，直接抛出异常</span><br><br><span class="hljs-comment">//除法精度为2位小数，HALF_UP为四舍五入</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a.divide(b,<span class="hljs-number">2</span>, RoundingMode.HALF_UP);<br>System.out.println(c);             <span class="hljs-comment">//3.3</span><br></code></pre></td></tr></table></div></figure><h1 id="9-日期与时间"><a href="#9-日期与时间" class="headerlink" title="9. 日期与时间"></a>9. 日期与时间</h1><h2 id="9-1-Data-类"><a href="#9-1-Data-类" class="headerlink" title="9.1 Data 类"></a>9.1 Data 类</h2><p><strong>类的概述</strong></p><p><font class="code-word"><code>Date</code></font> 类代表当前所在系统的日期时间信息。</p><p>Date 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public Date()</td>             <td style="text-align: center;">创建一个Date对象，代表的是系统当前此刻日期时间</td>         </tr>        <tr>            <td style="text-align: center;">public Date(long time)</td>             <td style="text-align: center;">把时间毫秒值转换成 Date 日期对象</td>         </tr>    </body></table><p><strong>类的方法</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public long getTime()</td>             <td style="text-align: center;">返回从1970年1月1日 00:00:00走到此刻的总的毫秒数</td>         </tr>        <tr>            <td style="text-align: center;">public void setTime(long time)</td>             <td style="text-align: center;">设置日期对象的时间为当前时间毫秒值对应的时间</td>         </tr>    </body></table><h2 id="9-2-SimpleDateFormat-类"><a href="#9-2-SimpleDateFormat-类" class="headerlink" title="9.2 SimpleDateFormat 类"></a>9.2 SimpleDateFormat 类</h2><p><strong>类的概述</strong></p><p><font class="code-word"><code>SimpleDateFormat</code></font> 类代表简单日期格式化，可以用来把日期时间格式化成为我们想要的形式。</p><p>SimpleDateFormat 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public SimpleDateFormat(String pattern)</td>             <td style="text-align: center;">创建简单日期格式化对象，并封装格式化的形式信息</td>         </tr>    </body></table><p><strong>类的方法</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public final String format(Date date)</td>             <td style="text-align: center;">将日期格式化成日期/时间字符串</td>         </tr>        <tr>            <td style="text-align: center;">public final String format(Object time)</td>             <td style="text-align: center;">将时间毫秒值式化成日期/时间字符串</td>         </tr>        <tr>            <td style="text-align: center;">public Date parse(String source)</td>             <td style="text-align: center;">从给定字符串的开始解析文本以生成日期</td>         </tr>    </body></table><p>SimpleDataFormat 中 String 形式信息如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-40.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><p>常用的对应字符包括：y（年）、M（月）、d（日）、H（时）、m（分）、s（秒）、E（星期几）、a（上&#x2F;下午）。</p><p>的在解析字符串时，字符串必须与 SimpleDataFormat 中形式信息统一，否则会抛出异常无法解析。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pxmauilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-pxmauilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br><br>        <span class="hljs-comment">//将日期信息格式化成字符串</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss EEE a&quot;</span>);<br>        System.out.println(sdf1.format(d1));       <span class="hljs-comment">//2022年09月22日 23:02:22 周四 下午</span><br>        System.out.println(sdf1.format(time));     <span class="hljs-comment">//2022年09月22日 23:02:22 周四 下午</span><br><br>        <span class="hljs-comment">//解析字符串获取日期信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2022-09-22 23:02:22&quot;</span>;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> sdf2.parse(str);<br>        System.out.println(d2);                   <span class="hljs-comment">//Thu Sep 22 23:02:22 CST 2022</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="9-3-Calendar-类"><a href="#9-3-Calendar-类" class="headerlink" title="9.3 Calendar 类"></a>9.3 Calendar 类</h2><p><strong>类的概念</strong></p><p><font class="code-word"><code>Calendar</code></font> 是 <font class="code-word"><code>java.util.Calendar</code></font> 包下的代表了系统此刻日期对应的日历的类。Calendar 是一个抽象类，<font class="word-stress">不能直接创建对象</font>。calendar是可变日期对象，一旦修改后其对象本身表示的时间将产生变化。</p><p><strong>类的方法</strong></p><p>Calendar 创建日历对象的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static Calendar getInstance()</td>             <td style="text-align: center;">获取当前日历对象</td>         </tr>    </body></table><p>Calendar 常用方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public int get(int field)</td>             <td style="text-align: center;">取日历中的某个字段信息</td>         </tr>        <tr>            <td style="text-align: center;">public void set(int field,int value)</td>             <td style="text-align: center;">修改日历的某个字段信息</td>         </tr>        <tr>            <td style="text-align: center;">public void add(int field,int amount)</td>             <td style="text-align: center;">为某个字段增加/减少指定的值</td>         </tr>        <tr>            <td style="text-align: center;">public final Date getTime()</td>             <td style="text-align: center;">拿到此刻日期对象</td>         </tr>        <tr>            <td style="text-align: center;">public long getTimeInMillis()</td>             <td style="text-align: center;">拿到此刻时间毫秒值</td>         </tr>    </body></table><p>参数 <font class="code-word"><code>int field</code></font> 不同数字对应了日历中不同字段，也可以直接通过 <font class="code-sentence"><code>Calendar.字段名</code></font> 来获取字段对应的数字。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lamtxslckj50kh"></i><span>java</span><div class="collapse show" id="collapse-lamtxslckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取日历对象</span><br><span class="hljs-type">Calendar</span> <span class="hljs-variable">cal</span> <span class="hljs-operator">=</span> Calendar.getInstance();                                                                                                                                                                           <span class="hljs-comment">//获取日历中某个字段的信息                                                                        </span><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> cal.get(Calendar.YEAR);                                                    <br>System.out.println(year + <span class="hljs-number">1</span>);                 <span class="hljs-comment">//输出：2023                               </span><br>                                                                                      <br><span class="hljs-comment">//修改日历的某个字段信息                                                                         </span><br>cal.set(Calendar.YEAR, <span class="hljs-number">2022</span>);                                                         <br>System.out.println(cal.get(Calendar.YEAR));   <span class="hljs-comment">//输出：2022                               </span><br>                                                                                      <br><span class="hljs-comment">//为某个字段增加/减少指定的值                                                                      </span><br>cal.add(Calendar.YEAR, -<span class="hljs-number">2</span>);                                                           <br>System.out.println(cal.get(Calendar.YEAR));   <span class="hljs-comment">//输出：2020                               </span><br><br><span class="hljs-comment">//从日历对象中获取日期对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> cal.getTime();                                                               <br>System.out.println(d);                        <span class="hljs-comment">//输出：Tue Sep 22 23:56:39 CST 2020       </span><br></code></pre></td></tr></table></div></figure><h2 id="9-4-JDK8-新增类"><a href="#9-4-JDK8-新增类" class="headerlink" title="9.4 JDK8 新增类"></a>9.4 JDK8 新增类</h2><p>从 JDK8 开始，<font class="code-word"><code>java.time</code></font> 包提供了新的日期和时间 API，新增的类有如下特点：</p><ul><li>严格区分了时刻、本地日期、本地时间，并且，对日期和时间进行运算更加方便。</li><li>类型几乎全部是不变类型（和String的使用类似），可以放心使用不必担心被修改。</li></ul><h3 id="9-4-1-日期时间类"><a href="#9-4-1-日期时间类" class="headerlink" title="9.4.1 日期时间类"></a>9.4.1 日期时间类</h3><p><strong>类的概述</strong></p><p>新增了三个表示日期和时间的类：他们三者构造方法和 API 有共通之处。</p><ul><li><font class="code-word"><code>LocalDate</code></font>：不包含具体时间的日期。</li><li><font class="code-word"><code>LocalTime</code></font>：不含日期的时间。</li><li><font class="code-word"><code>LocalDateTime</code></font>：包含了日期及时间。</li></ul><p>其构造方法如下：其中关于时间的参数可以是三项也可以是四项（多一项为纳秒）。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>方法名称</th>            <th style="text-align: center;" width=25%>方法说明</th>            <th style="text-align: center;" width=50%>方法调用</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static 类名 now()</td>             <td style="text-align: center;">根据当前时间创建对象</td>             <td style="text-align: center;">LocaDate ld = LocalDate.now();</br>                                             LocalTime lt = LocalTime.now();</br>                                             LocalDateTime ldt = LocalDateTime.now();</td>         </tr>        <tr>            <td style="text-align: center;">public static 类名 of(…)</td>             <td style="text-align: center;">指定日期/时间创建对象</td>             <td style="text-align: center;">LocalDate ld = LocalDate.of(2099, 11, 11);</br>                                             LocalTime lt = LocalTime.of(11, 11, 11);</br>                                             LocalDateTime ldt = LocalDateTime.of(2020, 10, 6, 13, 23, 43);</td>         </tr>    </body></table><p><strong>获取信息的方法</strong></p><ul><li><p>获取关于日期的信息：只能在 <font class="code-word"><code>LocalDate</code></font> 和 <font class="code-word"><code>LocalDateTime</code></font> 中调用。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public int geYear()</td>             <td style="text-align: center;">获取年</td>         </tr>        <tr>            <td style="text-align: center;">public int getMonthValue()</td>             <td style="text-align: center;">获取月份（1-12）</td>          </tr>        <tr>            <td style="text-align: center;">public Month getMonth()</td>             <td style="text-align: center;">获取月份（月份的英文全称）</td>          </tr>        <tr>            <td style="text-align: center;">public DayOfWeek getDayOfWeek()</td>             <td style="text-align: center;">获取星期（星期的英文全称）</td>          </tr>        <tr>            <td style="text-align: center;">Public int getDayOfMonth()</td>             <td style="text-align: center;">获取当月中第几天</td>          </tr>        <tr>            <td style="text-align: center;">Public int getDayOfYear()</td>             <td style="text-align: center;">获取当年中第几天</td>          </tr>    </body></table></li><li><p>获取关于时间的信息：只能在 <font class="code-word"><code>LocalTime</code></font> 和 <font class="code-word"><code>LocalDateTime</code></font> 中调用。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public int getHour()</td>             <td style="text-align: center;">获取时</td>         </tr>        <tr>            <td style="text-align: center;">public int getMinute()</td>             <td style="text-align: center;">获取分</td>          </tr>        <tr>            <td style="text-align: center;">public int getSecond()</td>             <td style="text-align: center;">获取秒</td>          </tr>        <tr>            <td style="text-align: center;">public int getNano()</td>             <td style="text-align: center;">获取纳秒</td>          </tr>    </body></table></li></ul><p><strong>类型转换的方法</strong></p><p><font class="code-word"><code>LocalTime</code></font> 中提供向另外两种类转换的 API：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public LocalDate toLocalDate()</td>             <td style="text-align: center;">转换成一个 LocalDate 对象</td>         </tr>        <tr>            <td style="text-align: center;">public LocalTime toLocalTime()</td>             <td style="text-align: center;">转换成一个 LocalTime 对象</td>          </tr>    </body></table><p><strong>修改信息的方法</strong></p><ul><li><p>修改关于日期的信息：只能在 <font class="code-word"><code>LocalDate</code></font> 和 <font class="code-word"><code>LocalDateTime</code></font> 中调用。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">plusDays, plusWeeks, plusMonths, plusYears</td>             <td style="text-align: center;">向当前对象添加几天、几周、几个月、几年</td>         </tr>         <tr>            <td style="text-align: center;">minusDays, minusWeeks, minusMonths, minusYears</td>             <td style="text-align: center;">从当前对象减去几天、几周、几个月、几年 </td>         </tr>         <tr>            <td style="text-align: center;">withDayOfMonth, withDayOfYear, withMonth, withYear </td>             <td style="text-align: center;">将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</td>         </tr>         </tr>    </body></table></li><li><p>修改关于时间的信息：只能在 <font class="code-word"><code>LocalTime</code></font> 和 <font class="code-word"><code>LocalDateTime</code></font> 中调用。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">plusHours, plusMinutes, plusSeconds, plusNanos</td>             <td style="text-align: center;">向当前对象添加几小时、几分、几秒、几纳秒</td>         </tr>         <tr>            <td style="text-align: center;">minusHours, minusMinutes, minusSeconds, minusNanos</td>             <td style="text-align: center;">从当前对象减去几小时、几分、几秒、几纳秒</td>         </tr>         <tr>            <td style="text-align: center;">withHour, withMinute, withSecond, withNano</td>             <td style="text-align: center;">将时、分、秒、纳秒修改为指定的值并返回新的对象</td>         </tr>     </body></table></li></ul><p><strong>比较时间前后的方法</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">isBefore, isAfter </td>             <td style="text-align: center;">比较两个日期时间的先后顺序</td>         </tr>         </tr>    </body></table><h3 id="9-4-2-Instant-时间戳"><a href="#9-4-2-Instant-时间戳" class="headerlink" title="9.4.2 Instant 时间戳"></a>9.4.2 Instant 时间戳</h3><p><font class="code-word"><code>Instant</code></font> 类由一个静态的工厂方法 <font class="code-word"><code>now()</code></font> 可以返回当前时间戳，包含了日期和时间。注意事项如下：</p><ul><li>在不指定时区时，返回的是世界标准时间。若要指定时区，需要调用类中的 <font class="code-word"><code>atZone()</code></font> 方法。</li><li><font class="code-word"><code>Instant</code></font> 和 <font class="code-word"><code>Date</code></font> 这两个类可以进行转换。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-630mjplckj50kh"></i><span>java</span><div class="collapse show" id="collapse-630mjplckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//得到一个Instant时间戳对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(instant);     <span class="hljs-comment">//输出：2022-09-23T06:34:13.659774300Z</span><br><br><span class="hljs-comment">//得到当前系统时区时间</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">myinstant</span> <span class="hljs-operator">=</span> instant.atZone(ZoneId.systemDefault());<br>System.out.println(myinstant);   <span class="hljs-comment">//输出：2022-09-23T14:34:13.659774300+08:00[Asia/Shanghai]</span><br><br><span class="hljs-comment">//Instant和Date类型相互转换</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(instant);<br>instant = date.toInstant();<br></code></pre></td></tr></table></div></figure><h3 id="9-4-3-DateTimeFormatter-类"><a href="#9-4-3-DateTimeFormatter-类" class="headerlink" title="9.4.3 DateTimeFormatter 类"></a>9.4.3 DateTimeFormatter 类</h3><p>在 JDK8 中，引入了一个全新的日期与时间格式器 <font class="code-word"><code>DateTimeFormatter</code></font> 。该类与 <font class="code-word"><code>SimpleDateFormat</code></font> 类的最大区别在于，其正反均可调用 <font class="code-word"><code>format</code></font> 方法，但无法格式化 <font class="code-word"><code>Date</code></font> 类的日期时间，只能格式化实现了 <font class="code-word"><code>TemporalAccessor</code></font> 接口的对象。</p><p>DateTimeFormatter 无法使用构造方法创建对象，应当使用 <font class="code-word"><code>ofPattern</code></font> 方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static DateTimeFormatter ofPattern(String pattern)</td>             <td style="text-align: center;">创建日期格式化对象，并封装格式化的形式信息</td>         </tr>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pryku2lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-pryku2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建对象</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss EEE a&quot;</span>);<br><br><span class="hljs-comment">//正反均可调用format方法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> sdf.format(d);<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> d.format(sdf);<br><br>System.out.println(str1);       <span class="hljs-comment">//2022年09月23日 14:56:11 周五 下午</span><br>System.out.println(str2);       <span class="hljs-comment">//2022年09月23日 14:56:11 周五 下午</span><br></code></pre></td></tr></table></div></figure><h3 id="9-4-4-日期时间差"><a href="#9-4-4-日期时间差" class="headerlink" title="9.4.4 日期时间差"></a>9.4.4 日期时间差</h3><p>日期差和时间差分别用两个类来计算：</p><ul><li><p><strong>计算日期差</strong>：在 JDK8 中，我们可以使用 <font class="code-word"><code>Period</code></font> 类来计算日期间隔差异，用于 <font class="code-word"><code>LocalDate</code></font> 之间的比较。</p><p>通过Period 类方法 <font class="code-word"><code>getYears()</code></font>、<font class="code-word"><code>getMonths()</code></font>、<font class="code-word"><code>getDays()</code></font> 来计算，只能精确到年月日。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8omo3tlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-8omo3tlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">day1</span> <span class="hljs-operator">=</span> LocalDate.now();<br>System.out.println(day1);                               <span class="hljs-comment">//输出：2022-09-23</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">day2</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">1995</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>);<br>System.out.println(day2);                               <span class="hljs-comment">//输出：1995-01-11</span><br><br><span class="hljs-comment">//计算日期差</span><br><span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(day2, day1);<br>System.out.printf(<span class="hljs-string">&quot;相差 %d 年\n&quot;</span>,period.getYears());     <span class="hljs-comment">//输出：相差 27 年</span><br>System.out.printf(<span class="hljs-string">&quot;相差 %d 月\n&quot;</span>,period.getMonths());    <span class="hljs-comment">//输出：相差 8 月</span><br>System.out.printf(<span class="hljs-string">&quot;相差 %d 日\n&quot;</span>,period.getDays());      <span class="hljs-comment">//输出：相差 12 日</span><br></code></pre></td></tr></table></div></figure></li><li><p><strong>计算时间差</strong>：在 JDK8 中，我们可以使用 <font class="code-word"><code>Duration</code></font> 类来计算时间间隔差异，用于 <font class="code-word"><code>LocalDateTime</code></font>、<font class="code-word"><code>LocalTime</code></font>、或 <font class="code-word"><code>Instant</code></font> 之间的比较。</p><p>通过Duration 类方法 <font class="code-word"><code>toDays()</code></font>、<font class="code-word"><code>toHours()</code></font>、<font class="code-word"><code>toMinutes()</code></font>、<font class="code-word"><code>toMillis()</code></font>、<font class="code-word"><code>toNanos()</code></font> 来计算。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-eqfy51lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-eqfy51lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">day1</span> <span class="hljs-operator">=</span> LocalDateTime.now();                                                            <br>System.out.println(day1);                        <span class="hljs-comment">//输出：2022-09-23T15:19:48.763557400                 </span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">day2</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">1990</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">50</span>,<span class="hljs-number">30</span>);                                           <br>System.out.println(day2);                        <span class="hljs-comment">//输出：1990-10-01T10:50:30                                                                                                                            </span><br><span class="hljs-comment">//计算时间差                                                                                           </span><br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(day2, day1);                                                    <br>System.out.println(duration.toDays());           <span class="hljs-comment">//输出：11680                                         </span><br>System.out.println(duration.toHours());          <span class="hljs-comment">//输出：280324                                       </span><br>System.out.println(duration.toMinutes());        <span class="hljs-comment">//输出：16819469                                     </span><br>System.out.println(duration.toMillis());         <span class="hljs-comment">//输出：1009168158763                                 </span><br>System.out.println(duration.toNanos());          <span class="hljs-comment">//输出：1009168158763557400                           </span><br></code></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础语法 (二) - Java SE</title>
    <link href="/post/3799/"/>
    <url>/post/3799/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h1><h2 id="1-1-数组定义"><a href="#1-1-数组定义" class="headerlink" title="1.1 数组定义"></a>1.1 数组定义</h2><p><strong>概念</strong></p><p>数组就是用来存储一批<font class="word-stress">同种类型数据</font>的容器。</p><p><strong>初始化</strong></p><p>数组一旦定义出来，程序执行的过程中，长度、类型就固定了，数组在定义时有两种初始化方法，：</p><ul><li><p><strong>静态初始化</strong>：定义数组的时候直接给数组赋值。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xxkvxtlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-xxkvxtlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//完整定义格式</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><br><span class="hljs-comment">//简化定义格式</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br></code></pre></td></tr></table></div></figure><p>数组的内存如下图，数组是<font class="word-stress">引用类型</font>，数组变量名存储的是一个指向内存中数组的地址：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-16.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /></li><li><p><strong>动态初始化</strong>：定义数组的时候只确定元素的类型和数组的长度，之后再存入具体数据。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6nt79xlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-6nt79xlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//动态初始化</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></div></figure><p>数组的内存如下图，和静态初始化的内存类似，但是其中元素均初始化为其默认值：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-17.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /></li></ul><h2 id="1-2-数组访问"><a href="#1-2-数组访问" class="headerlink" title="1.2 数组访问"></a>1.2 数组访问</h2><p><strong>访问数组元素</strong></p><p>数组用索引来访问元素，索引的初始值为0。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-razha2lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-razha2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><br><span class="hljs-comment">//索引访问元素</span><br>System.out.println(arr[<span class="hljs-number">1</span>]);  <span class="hljs-comment">//输出24</span><br></code></pre></td></tr></table></div></figure><p><strong>获取数组长度</strong></p><p>数组可以通过访问其属性 <font class="code-word"><code>length</code></font> 来获取数组长度。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jck525lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-jck525lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><br><span class="hljs-comment">//索引访问元素</span><br>System.out.println(arr.length);  <span class="hljs-comment">//输出3</span><br></code></pre></td></tr></table></div></figure><h2 id="1-3-数组遍历"><a href="#1-3-数组遍历" class="headerlink" title="1.3 数组遍历"></a>1.3 数组遍历</h2><p>数组可以使用普通 for 循环遍历元素，也可以使用 for each 循环遍历元素：</p><ul><li><p>使用 <font class="code-word"><code>for</code></font> 循环遍历元素。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ihf60slckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ihf60slckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><br><span class="hljs-comment">//for循环遍历元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>System.out.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>使用 <font class="code-word"><code>for each</code></font> 循环遍历元素。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xdjvq2lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-xdjvq2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><br><span class="hljs-comment">//foreach循环遍历元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> element : arr) &#123;<br>System.out.println(element);<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="1-4-数组拷贝"><a href="#1-4-数组拷贝" class="headerlink" title="1.4 数组拷贝"></a>1.4 数组拷贝</h2><p>Java 中允许数组进行拷贝，拷贝方式主要分为两种：</p><ul><li><p>将数组变量拷贝到另一个数组变量，两个数组变量将引用同一个数组。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-51g030lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-51g030lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><br><span class="hljs-comment">//数组变量拷贝</span><br><span class="hljs-type">int</span>[] arr2 = arr1;<br></code></pre></td></tr></table></div></figure><p>数组内存如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-19.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li><li><p>使用 <font class="code-word"><code>Arrays</code></font> 中的  <font class="code-word"><code>copyOf</code></font>  方法将数组的所有值拷贝到一个新数组中，<font class="word-stress">两个数组变量引用的是不同的数组</font>。<a href="#5-5-1-%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95">copyOf</a> 说明见后文。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4bzz6wlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-4bzz6wlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">36</span>&#125;;<br><br><span class="hljs-comment">//数组元素拷贝</span><br><span class="hljs-type">int</span>[] arr2 = Arrays.copyOf(arr1, arr1.length);<br></code></pre></td></tr></table></div></figure><p>数组内存如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-20.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /></li></ul><h2 id="1-5-Arrays-工具类"><a href="#1-5-Arrays-工具类" class="headerlink" title="1.5 Arrays 工具类"></a>1.5 Arrays 工具类</h2><h3 id="1-5-1-基础方法"><a href="#1-5-1-基础方法" class="headerlink" title="1.5.1 基础方法"></a>1.5.1 基础方法</h3><p><font class="code-word"><code>Arrays</code></font> 是在 <font class="code-word"><code>java.util</code></font> 包下的一个工具类，其中常用方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static String toString(Object[] a)</td>             <td style="text-align: center;">返回指定数组内容的字符串表示形式。</td>         </tr>          <tr>            <td style="text-align: center;">public static boolean equals(Object[] a, Object[] a2)</td>             <td style="text-align: center;">判断两个数组中的元素是否一一对应相等。</td>         </tr>         <tr>            <td style="text-align: center;">public static int binarySearch(int[] a, int key)</td>             <td style="text-align: center;">二分搜索数组中的数据（必须排好序），存在则返回索引，不存在返回-1</td>         </tr>         <tr>            <td style="text-align: center;">public static &lt;T&gt; T[] copyOf(T[] original, int newLength)</td>             <td style="text-align: center;">将原始数组的元素，复制到新的数组中，可以设置复制的长度</td>         </tr>     </body></table><p>数组直接打印是<font class="word-stress">打印地址值</font>，只有调用 <font class="code-word"><code>toString</code></font> 方法才是打印数组的内容。</p><p>对于 <font class="code-word"><code>CopyOf</code></font> 方法有如下说明：</p><ul><li>若新数组长度大于拷贝长度，则额外的元素将被赋予默认值。</li><li>如果新数组长度小于拷贝长度，则只拷贝前面的值。</li></ul><h3 id="1-5-2-排序方法"><a href="#1-5-2-排序方法" class="headerlink" title="1.5.2 排序方法"></a>1.5.2 排序方法</h3><p><strong>数组排序的方法</strong></p><p><font class="code-word"><code>Arrays</code></font> 提供了针对数组排序的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static void sort(Object[] a)</td>             <td style="text-align: center;">对数组元素按照升序排序</td>         </tr>         <tr>            <td style="text-align: center;">public static &lt;T&gt; void sort(类型[] a, Comparator&lt;? super T&gt; c)</td>             <td style="text-align: center;">使用比较器自定义排序</td>         </tr>     </body></table><p>自定义比较器即设置 <font class="code-word"><code>Comparator</code></font> 接口对应的比较器对象，来定制比较规则，此时排序数组的类型必须是引用类型。对于自定义类型，则无法使用默认 sort 排序，必须自定义比较器。</p><p><strong>比较器返回值规则</strong></p><p>比较器 Comparator 返回值的规则为：（该返回值如果是  Double 类型强转 int 的话要特别注意）</p><ul><li>如果认为第一个元素大于第二个元素：返回正整数即可。</li><li>如果认为第一个元素小于第二个元素：返回负整数即可。</li><li>如果认为第一个元素等于第二个元素：返回 0 即可。</li></ul><p>可以参见 <a href="/post/28199/#4-5-2-TreeSet-%E6%8E%92%E5%BA%8F">TreeSet 排序</a>，现给出  <font class="code-word"><code>sort</code></font>  方法中自定义比较器的使用例子。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tsojctlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-tsojctlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-desn13lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-desn13lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">13</span>);<br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">33</span>);<br><br>        Students[] arr = &#123;student1, student2, student3&#125;;<br><br>        <span class="hljs-comment">//匿名内部类重写比较器中的方法，按降序排</span><br>        Arrays.sort(arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Students&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Students o1, Students o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o2.age - o1.age;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//使用lambda表达式简化的匿名内部类</span><br>        Arrays.sort(arr, (o1, o2) -&gt; o2.age - o1.age);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="2-正则表达式"><a href="#2-正则表达式" class="headerlink" title="2. 正则表达式"></a>2. 正则表达式</h1><h2 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h2><p><strong>语法</strong></p><ul><li><p>判断是否匹配正则表达式</p><p> <font class="code-sentence"><code>public boolean matches(String regex)</code></font>：匹配返回 <font class="code-word"><code>true</code></font> ，不匹配返回  <font class="code-word"><code>false</code></font> ，此处匹配指整个字符串要匹配上。</p></li></ul><p><strong>特殊符号</strong></p><p>正则表达式中特殊符号如下：</p><ul><li><p><strong>通配符</strong>：可以匹配多个不同字符的特殊字符</p><p>​               带 <font class="code-word"><code>\</code></font> 的符号在使用时，需要使用 <font class="code-word"><code>\\</code></font> 。前一个 \ 表示字符串中转义，后一个表示 \ 符号本身，即对正则表达式转义。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=40%>符号</th>            <th style="text-align: center;" width=60%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body >        <tr>            <td style="text-align: center;">.</td>             <td style="text-align: center;">匹配除换行符\n之外的所有字符</td>         </tr>        <tr>            <td style="text-align: center;">\d</td>             <td style="text-align: center;">匹配从0到9的一个数字，即 [0-9]</td>         </tr>        <tr>            <td style="text-align: center;">\D</td>             <td style="text-align: center;">匹配非数字，即 [^0-9]</td>         </tr>        <tr>            <td style="text-align: center;">\s</td>             <td style="text-align: center;">匹配单个空格符，包括 tab 键和换行符，即 [\t\n\x0B\f\r]</td>         </tr>        <tr>            <td style="text-align: center;">\S</td>             <td style="text-align: center;">匹配除单个空格符之外的所有字符，即 [^\s]</td>         </tr>        <tr>            <td style="text-align: center;">\w</td>             <td style="text-align: center;">匹配字母，数字或下划线字符，即 [a-zA-Z_0-9]</td>         </tr>        <tr>            <td style="text-align: center;">\W</td>             <td style="text-align: center;">匹配所有与\w不匹配的字符，即 [^\w]</td>         </tr>    </body> </table></li><li><p><strong>边界符</strong>：用于匹配开头或结尾</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=40%>符号</th>            <th style="text-align: center;" width=60%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body >        <tr>            <td style="text-align: center;">^</td>             <td style="text-align: center;">匹配一行字符串开头位置</td>         <tr>            <td style="text-align: center;">$</td>             <td style="text-align: center;">匹配一行字符串结尾位置</td>         </tr>    </body> </table></li><li><p><strong>范围符</strong>：<font class="code-word"><code>[]</code></font> 匹配字符集合，允许使用者在匹配模式中指定多个字符或某个范围，<font class="code-word"><code>[^]</code></font>  规定目标对象中不能存在模式中所规定的字符串。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=40%>符号</th>            <th style="text-align: center;" width=60%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body >        <tr>            <td style="text-align: center;">[abc]</td>              <td style="text-align: center;">a，或 b，或 c</td>         <tr>            <td style="text-align: center;">[^abc]</td>             <td style="text-align: center;">除了 a，b，c 以外的任何字符</td>         </tr>        <tr>            <td style="text-align: center;">[^abc]</td>             <td style="text-align: center;">除了 a，b，c 以外的任何字符</td>         </tr>        <tr>            <td style="text-align: center;">[a-zA-Z]</td>             <td style="text-align: center;">a 到 z，或 A 到 Z</td>         </tr>        <tr>            <td style="text-align: center;">[a-d[m-p]]</td>             <td style="text-align: center;">a 到 d，或 m 到 p</td>         </tr>        <tr>            <td style="text-align: center;">[a-z&amp;&amp;[def]]</td>             <td style="text-align: center;">d，或 e，或 f</td>         </tr>        <tr>            <td style="text-align: center;">[a-z&amp;&amp;[^bc]]</td>             <td style="text-align: center;">a 到 z，除了 b 和 c</td>         </tr>        <tr>            <td style="text-align: center;">[a-z&amp;&amp;[^m-p]]</td>             <td style="text-align: center;">a 到 z，除了 m 到 p</td>         </tr>    </body></table></li><li><p><strong>频率符</strong>：可以指定模式在匹配对象中出现的频率。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=40%>符号</th>            <th style="text-align: center;" width=60%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body >        <tr>            <td style="text-align: center;">+</td>             <td style="text-align: center;">其前导字符必须在目标对象中连续出现一次或多次</td>         <tr>            <td style="text-align: center;">*</td>             <td style="text-align: center;">其前导字符必须在目标对象中出现零次或连续多次</td>         </tr>        <tr>            <td style="text-align: center;">?</td>             <td style="text-align: center;">其前导字符必须在目标对象中连续出现零次或一次</td>         </tr>        <tr>            <td style="text-align: center;">{n}</td>              <td style="text-align: center;">其前导字符正好出现 n 次</td>         <tr>            <td style="text-align: center;">{n,}</td>             <td style="text-align: center;">其前导字符至少出现 n 次</td>         </tr>        <tr>            <td style="text-align: center;">{n,m}</td>             <td style="text-align: center;">其前导字符至少出现 n 次，但不超过 m 次</td>         </tr>    </body></table></li><li><p><strong>同时符</strong>：<font class="code-word"><code>()</code></font> 符号包含的内容必须同时且连续出现在目标对象中。</p></li><li><p><strong>逻辑符</strong>：<font class="code-word"><code>|</code></font> 用于连接多个条件，表示逻辑或</p></li></ul><p><strong>注意</strong></p><ul><li><p>Java 中  <font class="code-word"><code>\</code></font> 为转义符，正则表达式中 <font class="code-word"><code>\</code></font> 也为转义符。</p></li><li><p>字符串中要输出特殊符号本身必须用 <font class="code-word"><code>\符号</code></font>，正则表达式中要输出特殊符号本身必须用 <font class="code-word"><code>\\符号</code></font>。</p></li><li><p>字符串中输出 \ 符号本身必须使用 <font class="code-word"><code>\\</code></font>，正则表示中输出 \ 符号本身必须使用 <font class="code-word"><code>\\\\</code></font></p></li></ul><p><strong>案例</strong></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h8512glckj50kh"></i><span>java</span><div class="collapse show" id="collapse-h8512glckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//基础用法</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;[abc]&quot;</span>));    <span class="hljs-comment">//true</span><br>        System.out.println(<span class="hljs-string">&quot;z&quot;</span>.matches(<span class="hljs-string">&quot;[abc]&quot;</span>));    <span class="hljs-comment">//false</span><br>        System.out.println(<span class="hljs-string">&quot;ab&quot;</span>.matches(<span class="hljs-string">&quot;[abc]&quot;</span>));   <span class="hljs-comment">//false</span><br>        System.out.println(<span class="hljs-string">&quot;ab&quot;</span>.matches(<span class="hljs-string">&quot;[abc]+&quot;</span>));  <span class="hljs-comment">//true</span><br>        System.out.println(<span class="hljs-string">&quot;\\&quot;</span>.matches(<span class="hljs-string">&quot;\\\\&quot;</span>));    <span class="hljs-comment">//true</span><br>        System.out.println(<span class="hljs-string">&quot;?&quot;</span>.matches(<span class="hljs-string">&quot;\\?&quot;</span>));      <span class="hljs-comment">//true</span><br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span>.matches(<span class="hljs-string">&quot;\\n&quot;</span>));     <span class="hljs-comment">//true</span><br>        <br>        <span class="hljs-comment">//实际案例</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入您的注册邮箱&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mail</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">//邮箱格式一：123456@qq.com</span><br>        <span class="hljs-comment">//邮箱格式二：123456@163.com</span><br>        <span class="hljs-comment">//邮箱格式三：123456@pci.com.cn</span><br>        <span class="hljs-keyword">if</span> (mail.matches(<span class="hljs-string">&quot;\\w&#123;1,30&#125;@[a-zA-Z0-9]&#123;2,20&#125;(\\.[a-zA-Z0-9]&#123;2,20&#125;)&#123;1,2&#125;&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;邮箱格式正确！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;邮箱格式错误！&quot;</span>);<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-表达式应用"><a href="#2-2-表达式应用" class="headerlink" title="2.2 表达式应用"></a>2.2 表达式应用</h2><p><strong>在字符串中的应用</strong></p><p>正则表达式可以在调用 <font class="code-word"><code>String</code></font> 的方法时使用：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public String replaceAll(String regex,String newStr)</td>             <td style="text-align: center;">按照正则表达式匹配的内容进行替换</td>          </tr>          <tr>            <td style="text-align: center;">public String[] split(String regex)</td>             <td style="text-align: center;">按正则表达式匹配的内容进行分割字符串，反回一个字符串数组</td>          </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3dlwltlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-3dlwltlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分割字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">names1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三asidj李四aLjdsao王五&quot;</span>;                          <br>String[] arr = names1.split(<span class="hljs-string">&quot;\\w+&quot;</span>);                           <br>System.out.println(Arrays.toString(arr));            <span class="hljs-comment">//[张三, 李四, 王五]                 </span><br><br><span class="hljs-comment">//替换字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">names2</span> <span class="hljs-operator">=</span> names1.replaceAll(<span class="hljs-string">&quot;\\w+&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);                <br>System.out.println(names2);                          <span class="hljs-comment">//张三 李四 王五        </span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;31a31ab&quot;</span>.replaceAll(<span class="hljs-string">&quot;\\d&#123;2&#125;&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;31a31ab&quot;</span>.replaceAll(<span class="hljs-string">&quot;^\\d&#123;2&#125;&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);  <span class="hljs-comment">//仅替换字符串开头的两个数字</span><br>System.out.println(a);       <span class="hljs-comment">//输出ZaZab</span><br>System.out.println(b);       <span class="hljs-comment">//输出Za31ab</span><br></code></pre></td></tr></table></div></figure><p><strong>正则表达式的编译形式</strong></p><p>指定为字符串的正则表达式必须首先被编译为此类的实例。然后可将得到的 <font class="code-word"><code>Patter</code></font>  匹配对象用于创建 <font class="code-word"><code>Matcher</code></font> 对象，依照正则表达式，该对象可以与任意字符序列匹配。执行匹配所涉及的所有状态都驻留在匹配器中，所以多个匹配器可以共享同一模式。</p><p>之后可以通过调用匹配器的方法进行后续操作。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uyqssvlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-uyqssvlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//待匹配字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-comment">//编译正则表达式成为一个匹配规则对象pattern</span><br><span class="hljs-type">Patter</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;ab&quot;</span>);<br><br><span class="hljs-comment">//通过匹配规则对象得到一个匹配器对象matcher</span><br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(str);<br></code></pre></td></tr></table></div></figure><h2 id="2-3-爬取信息"><a href="#2-3-爬取信息" class="headerlink" title="2.3 爬取信息"></a>2.3 爬取信息</h2><p>正则表达式可以用来爬取信息。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hxlpn5lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-hxlpn5lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//----案例一----      </span><br>        <span class="hljs-comment">//待爬取信息，爬取出里面的电话号码和邮箱</span><br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;来找我炫饭，电话020-1234567，0238379282或者联系邮箱xuanfan@eat.com。&quot;</span><br>                + <span class="hljs-string">&quot;找别人炫饭，电话18048362034，400-293-4433，400828019&quot;</span>;<br><br>        <span class="hljs-comment">//从中爬取出电话号码和邮箱</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(\\w+@\\w&#123;2,10&#125;(\\.\\w&#123;2,10&#125;)&#123;1,2&#125;)|&quot;</span><br>                + <span class="hljs-string">&quot;(1[3-9]\\d&#123;9&#125;)|&quot;</span><br>                + <span class="hljs-string">&quot;(0\\d&#123;2,5&#125;-?\\d&#123;5,15&#125;)|&quot;</span><br>                + <span class="hljs-string">&quot;(400-?\\d&#123;3,8&#125;-?\\d&#123;3,8&#125;)&quot;</span>;<br><br>        <span class="hljs-comment">//编译成匹配对象再编译成匹配器</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(message);<br>        <br>        <span class="hljs-comment">//依次输出爬取到的信息</span><br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(matcher.group());<br>        &#125;<br>        <br>        <br>        <span class="hljs-comment">//----案例二----</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;The quick brown fox jumps over the lazy dog&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dog$&quot;</span>;<br><br>        System.out.println(message.matches(regex));   <span class="hljs-comment">//false</span><br>        <br>        <span class="hljs-comment">// 编译模式并获得匹配对象。</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(message);<br><br>        <span class="hljs-comment">// 查找每个匹配并打印</span><br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.format(<span class="hljs-string">&quot;Text \&quot;%s\&quot; found at %d to %d%n&quot;</span>, matcher.group(), matcher.start(), matcher.end());    <br>            <span class="hljs-comment">//输出：Text &quot;dog&quot; found at 40 to 43</span><br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-内存分配"><a href="#3-内存分配" class="headerlink" title="3. 内存分配"></a>3. 内存分配</h1><p>Java 内存分配共有五个分区：</p><ul><li><strong>栈</strong>：方法运行时使用的内存，比如 main 方法运行，进入方法栈中执行。</li><li><strong>堆</strong>：存储对象或者数组，new 来创建的都存储在堆内存。堆中开辟的空间均有地址值。</li><li><strong>方法区</strong>：存储可以运行的 class 文件。</li><li>本地方法栈：JVM 在使用操作系统功能的时候使用，和我们开发无关。</li><li>寄存机：给 CPU 使用，和我们开发无关。</li></ul><p>三个主要区域之间的关系如下图：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-18.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" />]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO 流 (二) - Java SE</title>
    <link href="/post/54804/"/>
    <url>/post/54804/</url>
    
    <content type="html"><![CDATA[<h1 id="1-缓冲流"><a href="#1-缓冲流" class="headerlink" title="1. 缓冲流"></a>1. 缓冲流</h1><p>缓冲流也称为高效流、或者高级流。缓冲流自带在流和内存之间的缓冲区、可以提高原始字节流、字符流读写数据的性能。缓冲区提高性能的原理是通过增加每次交互的数据总量来减少磁盘交互次数和系统调用。</p><p>缓冲流主要有四个实现类：</p><ul><li>缓冲输入流：自带了8KB缓冲池，以后直接从缓冲池读取数据，所以性能较好。</li><li>缓冲输出流：自带了8KB缓冲池，数据就直接写入到缓冲池中去，写数据性能提高了。</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-32.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h2 id="1-1-字节缓冲流"><a href="#1-1-字节缓冲流" class="headerlink" title="1.1 字节缓冲流"></a>1.1 字节缓冲流</h2><h3 id="1-1-1-输入与输出"><a href="#1-1-1-输入与输出" class="headerlink" title="1.1.1 输入与输出"></a>1.1.1 输入与输出</h3><p><strong>概述</strong></p><p>字节缓冲流分为输入流和输出流两大类：</p><ul><li><p>字节缓冲输入流：<font class="code-word"><code>BufferedInputStream</code></font> 。</p></li><li><p>字节缓冲输出流：<font class="code-word"><code>BufferedOutputStream</code></font> 。</p><p>​                               想要实现追加而不是覆盖，则被包装的 <font class="code-word"><code>FileOutputStream</code></font> 应采用<a href="/post/5808/#4-1-2-%E5%AD%97%E8%8A%82%E8%BE%93%E5%87%BA%E6%B5%81">追加数据的构造方法</a>。</p></li></ul><p>BufferedInputStream 和 BufferedOutputStream 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public BufferedInputStream(InputStream is)</td>             <td style="text-align: center;">可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道</td>         </tr>        <tr>            <td style="text-align: center;">public BufferedOutputStream(OutputStream os)</td>             <td style="text-align: center;">可以把低级的字节输出流包装成一个高级的缓冲字节输出流</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pcgb5mlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-pcgb5mlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建缓冲字节输入流</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/data.txt&quot;</span>);<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br><span class="hljs-comment">//创建缓冲字节输出流</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/newdata.txt&quot;</span>);<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br></code></pre></td></tr></table></div></figure><p><strong>方法</strong></p><p>BufferedInputStream 和 BufferedOutputStream 也分别从 <font class="code-word"><code>InputStream</code></font> 和 <font class="code-word"><code>OutputStream</code></font> 继承了基本的读取和输出数据的API，以及刷新和关闭流的 API，方法使用和注意事项同<a href="/post/5808/#4-1-%E5%AD%97%E8%8A%82%E6%B5%81">基本字节流</a>，但缓冲字节流性能更优。</p><h3 id="1-1-2-文件拷贝"><a href="#1-1-2-文件拷贝" class="headerlink" title="1.1.2 文件拷贝"></a>1.1.2 文件拷贝</h3><p>同时创建一个字节输入流和字节输出流，由输入流读取源文件数据，再将其输出到新文件，代码详见<a href="/post/5808/#4-1-4-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE">资源释放</a>。</p><p>总体来说，使用字节数组进行读取输出速度要快于单个字节，使用缓冲流速度要快于基本流，如下是一个速度测试案例。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zhtgsjlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-zhtgsjlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//测试拷贝速度的代码</span><br>        copy01();           <span class="hljs-comment">//基本流按单个字节拷贝</span><br>        copy02();           <span class="hljs-comment">//基本流按字节数组拷贝</span><br>        copy03();           <span class="hljs-comment">//缓冲流按单个字节拷贝</span><br>        copy04();           <span class="hljs-comment">//缓冲流按字节数组拷贝</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/data.mp4&quot;</span>);        <span class="hljs-comment">//待拷贝文件</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/newdata.mp4&quot;</span>);   <span class="hljs-comment">//拷贝的新文件</span><br>        ) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;                                  <br>            <span class="hljs-keyword">while</span> ((temp = is.read()) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(temp);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成了！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (endTime - startTime) / <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/data.mp4&quot;</span>);        <span class="hljs-comment">//待拷贝文件</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/newdata.mp4&quot;</span>);   <span class="hljs-comment">//拷贝的新文件</span><br>        ) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成了！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (endTime - startTime) / <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy03</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/data.mp4&quot;</span>);        <span class="hljs-comment">//待拷贝文件</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/newdata.mp4&quot;</span>);   <span class="hljs-comment">//拷贝的新文件</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        ) &#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((temp = bis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(temp);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成了！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (endTime - startTime) / <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy04</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/data.mp4&quot;</span>);        <span class="hljs-comment">//待拷贝文件</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/newdata.mp4&quot;</span>);   <span class="hljs-comment">//拷贝的新文件</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        ) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((len = bis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(buffer,<span class="hljs-number">0</span>,len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成了！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (endTime - startTime) / <span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-2-字符缓冲流"><a href="#1-2-字符缓冲流" class="headerlink" title="1.2 字符缓冲流"></a>1.2 字符缓冲流</h2><h3 id="1-2-1-输入与输出"><a href="#1-2-1-输入与输出" class="headerlink" title="1.2.1 输入与输出"></a>1.2.1 输入与输出</h3><p><strong>概述</strong></p><ul><li><p>字符缓冲输入流：<font class="code-word"><code>BufferedReader</code></font> 。</p></li><li><p>字符缓冲输出流：<font class="code-word"><code>BufferedWriter</code></font> 。</p><p>​                               想要实现追加而不是覆盖，则被包装的 <font class="code-word"><code>FileWriter</code></font> 应采用<a href="/post/5808/#4-2-2-%E5%AD%97%E7%AC%A6%E8%BE%93%E5%87%BA%E6%B5%81">追加数据的构造方法</a>。</p></li></ul><p>BufferedReader 和 BufferedWriter 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public BufferedReader(Reader r)</td>             <td style="text-align: center;">可以把低级的字符输入流包装成一个高级的缓冲字符输入流管道</td>         </tr>        <tr>            <td style="text-align: center;">public BufferedWriter(Writer w)</td>             <td style="text-align: center;">可以把低级的字符输出流包装成一个高级的缓冲字符输出流管道</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-x2c4odlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-x2c4odlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建缓冲字符输入流</span><br><span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;data/data.txt&quot;</span>);<br><span class="hljs-type">Reader</span> <span class="hljs-variable">bfr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br><span class="hljs-comment">//创建缓冲字符输出流</span><br><span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;data/newdata.txt&quot;</span>);<br><span class="hljs-type">Writer</span> <span class="hljs-variable">bfw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br></code></pre></td></tr></table></div></figure><p><strong>方法</strong></p><p>BufferedReader 和 BufferedWriter 也分别从 <font class="code-word"><code>Reader</code></font> 和 <font class="code-word"><code>Writer</code></font> 继承了基本的读取和输出数据的API，以及刷新和关闭流的 API，方法使用和注意事项同<a href="/post/5808/#4-2-%E5%AD%97%E7%AC%A6%E6%B5%81">基本字符流</a>，但缓冲字节流性能更优。</p><h3 id="1-2-2-新增方法"><a href="#1-2-2-新增方法" class="headerlink" title="1.2.2 新增方法"></a>1.2.2 新增方法</h3><p><strong>输入流</strong></p><p><font class="code-word"><code>BufferedReader</code></font> 新增了读取一行的功能：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public String readLine()</td>             <td style="text-align: center;">读取一行数据返回，如果读取没有完毕，无行可读返回null</td>         </tr>    </body></table>  <figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yuxzyolckj50ki"></i><span>java</span><div class="collapse show" id="collapse-yuxzyolckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>a我<br>abc我<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;data/data.txt&quot;</span>);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;         <span class="hljs-comment">//先读取一行字符，再判断是否为null</span><br>            System.out.println(line);                    <span class="hljs-comment">//逐行输出：a我, abc我</span><br>        &#125;<br><br>        System.out.println(br.readLine());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>输出流</strong></p><p><font class="code-word"><code>BufferedWriter</code></font> 新增了换行操作：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public void newLine()</td>             <td style="text-align: center;">换行操作</td>         </tr>    </body></table>  <figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-op263rlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-op263rlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br><br>        <span class="hljs-comment">//写一个字符</span><br>        bw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        bw.write(<span class="hljs-number">98</span>);<br>        bw.write(<span class="hljs-string">&#x27;我&#x27;</span>);<br>        bw.newLine();<br><br>        <span class="hljs-comment">//写一个字符数组</span><br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-string">&quot;abc你我他&quot;</span>.toCharArray();<br>        bw.write(chars);<br><br>        bw.close();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>ab我<br>abc你我他<br><span class="hljs-comment">//——————————————</span><br></code></pre></td></tr></table></div></figure><h1 id="2-转换流"><a href="#2-转换流" class="headerlink" title="2. 转换流"></a>2. 转换流</h1><p>在读取和输出字符时，必须<font class="word-stress">文件和代码编码一致</font>才不会乱码。为了解决编码格式不一致，可以使用转换流。</p><p>英文和数字的编码在各字符集中通用，所以不会出现乱码。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-33.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h2 id="2-1-字符输入转换流"><a href="#2-1-字符输入转换流" class="headerlink" title="2.1 字符输入转换流"></a>2.1 字符输入转换流</h2><p>按照指定编码格式读取文件共有使用转换流和不使用转换流两种方式。</p><p><strong>方式一：使用字符输入转换流</strong></p><p>使用字符输入转换流 <font class="code-word"><code>InputStreamReader</code></font>，可以把字节输入流按照指定编码转换成字符输入流，然后再输入。</p><p>InputStreamReader 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public InputStreamReader(InputStream is)</td>             <td style="text-align: center;">可以把原始的字节流按照代码默认编码（UTF-8）转换成字符输入流，与默认的 FileReader 一样</td>         </tr>        <tr>            <td style="text-align: center;">public InputStreamReader(InputStream is ，String charset)</td>             <td style="text-align: center;">可以把原始的字节流按照指定编码转换成字符输入流</td>         </tr>    </body></table><p>除此之外 InputStreamReader 从 <font class="code-word"><code>Reader</code></font> 继承了基本的读取数据的API，方法使用和注意事项同<a href="/post/5808/#4-2-1-%E5%AD%97%E7%AC%A6%E8%BE%93%E5%85%A5%E6%B5%81">基本字符输入流</a>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-htiv5wlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-htiv5wlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//dataGBK.txt中的内容(编码格式：GBK)</span><br>abc你我他<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//不使用转换流</span><br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;data/dataGBK.txt&quot;</span>);<br>        <span class="hljs-comment">//把原始字节流转换成字符输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/dataGBK.txt&quot;</span>);<br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is, <span class="hljs-string">&quot;GBK&quot;</span>);<br>        <span class="hljs-comment">//再包装成缓冲流</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br><br>        System.out.println(br1.readLine());              <span class="hljs-comment">//输出：abc乱码</span><br>        System.out.println(br2.readLine());              <span class="hljs-comment">//输出：abc你我他</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>方式二：使用字节流读取并解码</strong></p><p>使用字节输入流 <font class="code-word"><code>FileInputStream</code></font> 读取文件字节后，按照指定编码格式使用 <font class="code-word"><code>String</code></font> 构造器进行解码，解码方式详见<a href="/post/5808/#2-2-%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81">字符集的编码与解码</a>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-0nmrwtlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-0nmrwtlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//dataGBK.txt中的内容(编码格式：GBK)</span><br>abc你我他<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//读取文件字节</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data\\dataGBK.txt&quot;</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(f);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)f.length()];<br>        is.read(bytes);<br>        <br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));         <span class="hljs-comment">//输出：abc乱码</span><br>        <span class="hljs-comment">//按照指定编码格式解码字节数组</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-string">&quot;GBK&quot;</span>));   <span class="hljs-comment">//输出：abc你我他</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-字符输出转换流"><a href="#2-2-字符输出转换流" class="headerlink" title="2.2 字符输出转换流"></a>2.2 字符输出转换流</h2><p>按照指定编码格式输出文件共有使用转换流和不使用转换流两种方式。</p><p><strong>方法一：使用字符输出转换流</strong></p><p>使用字符输出转换流 <font class="code-word"><code>OutputStreamWriter</code></font>，可以把字节输出流按照指定编码转换成字符输出流，然后再输出。</p><p>OutputStreamWriter 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public OutputStreamWriter(OutputStream os)</td>             <td style="text-align: center;">可可以把原始的字节输出流按照代码默认编码（UTF-8）转换成字符输出流，与默认的 FileWriter 一样</td>         </tr>        <tr>            <td style="text-align: center;">public OutputStreamWriter(OutputStream os，String charset)</td>             <td style="text-align: center;">可以把原始的字节输出流按照指定编码转换成字符输出流</td>         </tr>    </body></table><p>除此之外 OutputStreamWriter 从 <font class="code-word"><code>Writer</code></font> 继承了基本的输出数据和刷新、关闭流的API，方法使用和注意事项同<a href="/post/5808/#4-2-2-%E5%AD%97%E7%AC%A6%E8%BE%93%E5%87%BA%E6%B5%81">基本字符输出流</a>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dtj8a1lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-dtj8a1lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">//dataGBK.txt中的内容(编码格式：GBK)</span><br>abc你我他<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//把原始字节流转换成字符输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/dataGBK.txt&quot;</span>);<br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(os, <span class="hljs-string">&quot;GBK&quot;</span>);<br>        <span class="hljs-comment">//再包装成缓冲流</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(osw);<br><br>        bw.write(<span class="hljs-string">&quot;abc你我他&quot;</span>);<br><br>        bw.close();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//dataGBK.txt中的内容(编码格式：GBK)</span><br>abc你我他<br><span class="hljs-comment">//——————————————</span><br></code></pre></td></tr></table></div></figure><p><strong>方式二：编码后使用字节流输出</strong></p><p>使用 <font class="code-word"><code>byte[] getBytes(String chName)</code></font> 方法把字符以指定编码获取字节后，再使用字节输出流  <font class="code-word"><code>FileOutputStream</code></font> 写出去，编码方式详见<a href="/post/5808/#2-2-%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81">字符集的编码与解码</a>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yk7k7mlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-yk7k7mlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <br><span class="hljs-comment">//以指定编码格式获取字节</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc你我他&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes = str.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<br>        <br>        <span class="hljs-comment">//使用字节输出流输出字节</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data\\dataGBK.txt&quot;</span>);<br>        os.write(bytes);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//dataGBK.txt中的内容(编码格式：GBK)</span><br>abc你我他<br><span class="hljs-comment">//——————————————</span><br></code></pre></td></tr></table></div></figure><h1 id="3-序列化"><a href="#3-序列化" class="headerlink" title="3. 序列化"></a>3. 序列化</h1><p>对象的序列化即把内存中的对象存储到磁盘文件中去，反序列化即把磁盘文件中的对象读取到内存中来。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-34.png" srcset="/img/loading.gif" lazyload  style="zoom:50%;" /><h2 id="3-1-对象序列化"><a href="#3-1-对象序列化" class="headerlink" title="3.1 对象序列化"></a>3.1 对象序列化</h2><p><strong>概述</strong></p><p>把内存中的对象存储到磁盘文件中去，称为对象序列化，实现类是对象字节输出流  <font class="code-word"><code>ObjectOutputStream</code></font> 。</p><p>ObjectOutputStream 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public ObjectOutputStream(OutputStream out)</td>             <td style="text-align: center;">把低级字节输出流包装成高级的对象字节输出流</td>         </tr>    </body></table><p><strong>方法</strong></p><p>除了从 <font class="code-word"><code>OutputStream</code></font> 继承了基本的输出数据以及刷新和关闭流的 API 外，ObjectOutputStream 提供了输出对象的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public final void writeObject(Object obj)</td>             <td style="text-align: center;">把对象写出去到对象序列化流的文件中去</td>         </tr>    </body></table>在将对象序列化时有几个注意事项：<ul><li>如果对象要序列化，则类必须实现 <font class="code-word"><code>Serializable</code></font> 序列化接口。</li><li>对象的属性中，使用了 <font class="code-word"><code>transient</code></font> 关键字的成员将不被序列化。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9y9gn9lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-9y9gn9lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> IdCode;         <span class="hljs-comment">//该成员将不被序列化</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">int</span> idCode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        IdCode = idCode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dceu0nlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-dceu0nlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2139583</span>);<br><br>        <span class="hljs-comment">//对象序列化</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/student.txt&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(os);<br>        oos.writeObject(student);<br><br>        oos.close();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-2-对象反序列化"><a href="#3-2-对象反序列化" class="headerlink" title="3.2 对象反序列化"></a>3.2 对象反序列化</h2><p><strong>概述</strong></p><p>把存储到磁盘文件中去的对象数据恢复成内存中的对象，称为对象反序列化，实现类是对象字节输入流 <font class="code-word"><code>ObjectInputStream</code></font> 。</p><p>ObjectInputStream 的构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public ObjectInputStream(InputStream out)</td>             <td style="text-align: center;">把低级字节输如流包装成高级的对象字节输入流</td>         </tr>    </body></table><p><strong>方法</strong></p><p>除了从 <font class="code-word"><code>InputStream</code></font> 继承了基本的输出数据以及刷新和关闭流的 API 外，ObjectInputStream 提供了读取对象的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public Object readObject()</td>             <td style="text-align: center;">把存储到磁盘文件中去的对象数据恢复成内存中的对象返回</td>         </tr>    </body></table><p>在将对象序反列化时有几个注意事项：</p><ul><li>由于对象的属性中，使用了 <font class="code-word"><code>transient</code></font> 关键字的成员将不被序列化，在反序列化时该属性将执行默认初始化。</li><li>若在类中申明了序列化的版本号 <font style="color:purple"><code>serialVersionUID</code></font>（修饰符为 <font class="code-word"><code>public static final</code></font>，类型为 <font class="code-word"><code>long</code></font>）则序列化时类的版本号和反序列化时类的版本号必须一致，否则报错。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z3ngowlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-z3ngowlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <br>    <span class="hljs-comment">//申明序列化的版本号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> IdCode;         <span class="hljs-comment">//该成员将不被序列化</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">int</span> idCode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        IdCode = idCode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wbl3p5lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-wbl3p5lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2139583</span>);<br><br>        <span class="hljs-comment">//对象序列化</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/student.txt&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(os);<br>        <br>        <span class="hljs-comment">//此时内存中Students版本号为1</span><br>        oos.writeObject(student);      <br><br>        oos.close();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-i0tuc0lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-i0tuc0lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <br><span class="hljs-comment">//对象反序列化</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/student.txt&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(is);<br>        <br>        <span class="hljs-comment">//若此时内存中Students版本号不为1，则会报错</span><br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Students) ois.readObject();    <span class="hljs-comment">//将反序列化得到的Object对象强转成对应类型</span><br>       <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-打印流"><a href="#4-打印流" class="headerlink" title="4. 打印流"></a>4. 打印流</h1><p>打印流可以实现方便、高效的打印数据到文件中去。调用其打印方法时，指定的数据内容是什么就会<font class="word-stress">原封不动</font>打印到文件中。</p><p>共包括 <font class="code-word"><code>PrintStream</code></font>、<font class="code-word"><code>PrintWriter</code></font> 两个实现类：二者打印功能并无差别。</p><ul><li>PrintStream ：继承自字节输出流 <font class="code-word"><code>OutputStream</code></font>，除了打印外还支持输出字节数据的方法。</li><li>PrintWriter：继承自字符输出流 <font class="code-word"><code>Writer</code></font>，除了打印外还支持输出字符数据的方法。</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-35.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h2 id="4-1-打印的方法"><a href="#4-1-打印的方法" class="headerlink" title="4.1 打印的方法"></a>4.1 打印的方法</h2><p><strong>概述</strong></p><p>字节打印输出流 <font class="code-word"><code>PrintStream</code></font> 的构造方法如下：想要实现追加而不是覆盖，则被包装的 <font class="code-word"><code>FileOutputStream</code></font> 应采用<a href="/post/5808/#4-1-2-%E5%AD%97%E8%8A%82%E8%BE%93%E5%87%BA%E6%B5%81">追加数据的构造方法</a>。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public PrintStream(OutputStream os)</td>             <td style="text-align: center;">打印流直接通向字节输出流管道</td>         </tr>        <tr>            <td style="text-align: center;">public PrintStream(File f)</td>             <td style="text-align: center;">打印流直接通向文件对象</td>         </tr>        <tr>            <td style="text-align: center;">public PrintStream(String filepath)</td>             <td style="text-align: center;">打印流直接通向文件路径</td>         </tr>    </body></table><p>字符打印输出流 <font class="code-word"><code>PrintWriter</code></font> 的构造方法如下：想要实现追加而不是覆盖，则被包装的 <font class="code-word"><code>FileWriter</code></font> 应采用<a href="/post/5808/#4-2-2-%E5%AD%97%E7%AC%A6%E8%BE%93%E5%87%BA%E6%B5%81">追加数据的构造方法</a>。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public PrintWriter(OutputStream os)</td>             <td style="text-align: center;">打印流直接通向字节输出流管道</td>         </tr>        <tr>            <td style="text-align: center;">public PrintWriter (Writer w)</td>             <td style="text-align: center;">打印流直接通向字符输出流管道</td>         </tr>        <tr>            <td style="text-align: center;">public PrintWriter (File f)</td>             <td style="text-align: center;">打印流直接通向文件对象</td>         </tr>        <tr>            <td style="text-align: center;">public PrintWriter (String filepath)</td>             <td style="text-align: center;">打印流直接通向文件路径</td>         </tr>    </body></table><p><strong>方法</strong></p><p>除了分别从 <font class="code-word"><code>OutputStream</code></font> 和 <font class="code-word"><code>Writer</code></font> 继承了基本的输出数据以及刷新和关闭流的 API 外，PrintStream 和 PrintWriter 都提供了打印的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public void print(E e)</td>             <td style="text-align: center;">打印任意类型的数据出去，不换行</td>         </tr>        <tr>            <td style="text-align: center;">public void println(E e)</td>             <td style="text-align: center;">打印任意类型的数据出去并换行</td>         </tr>        <tr>            <td style="text-align: center;">public void printf(String format, Object... args)</td>             <td style="text-align: center;">打印字符串，允许使用格式字符</td>         </tr>    </body></table><p>三种打印方式的具体使用和在<a href="/post/28534/#3-2-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA">控制台输出</a>时的效果是一致的。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gtn2aolckj50ki"></i><span>java</span><div class="collapse show" id="collapse-gtn2aolckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br><br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;data/newdata1.txt&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">ps2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;data/newdata2.txt&quot;</span>);<br><br>        ps1.println(<span class="hljs-number">97</span>);        <span class="hljs-comment">//输出：97</span><br>        ps1.println(<span class="hljs-string">&#x27;a&#x27;</span>);       <span class="hljs-comment">//输出：a</span><br>        ps1.println(<span class="hljs-literal">true</span>);      <span class="hljs-comment">//输出：true</span><br><br>        ps2.println(<span class="hljs-number">97</span>);        <span class="hljs-comment">//输出：97</span><br>        ps2.println(<span class="hljs-string">&#x27;a&#x27;</span>);       <span class="hljs-comment">//输出：a</span><br>        ps2.println(<span class="hljs-literal">true</span>);      <span class="hljs-comment">//输出：true</span><br>        <br>        ps1.close();<br>        ps2.close();<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//newdata1.txt和newdata2.txt中的内容</span><br><span class="hljs-number">97</span><br>a<br><span class="hljs-literal">true</span><br><span class="hljs-comment">//——————————————</span><br></code></pre></td></tr></table></div></figure><h2 id="4-2-输出重定向"><a href="#4-2-输出重定向" class="headerlink" title="4.2 输出重定向"></a>4.2 输出重定向</h2><p><font class="code-sentence"><code>System.out</code></font> 实际返回的是一个 <font class="code-word"><code>PrintStream</code></font> 默认指向控制台的打印流。</p><p>可以通过 <font class="code-sentence"><code>System.setOut(PrintStream ps)</code></font> 重新指定打印的路径。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2ilc79lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-2ilc79lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//打印到控制台</span><br>System.out.println(<span class="hljs-string">&quot;今天要开心呀！&quot;</span>);          <br><br><span class="hljs-comment">//打印到指定文件</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;data/newdata.txt&quot;</span>);<br>System.setOut(ps);<br>System.out.println(<span class="hljs-string">&quot;明天也要开心呀！&quot;</span>);<br><br><span class="hljs-comment">//newdata.txt中的内容</span><br>明天也要开心呀！<br><span class="hljs-comment">//——————————————</span><br></code></pre></td></tr></table></div></figure><h1 id="5-属性集"><a href="#5-属性集" class="headerlink" title="5. 属性集"></a>5. 属性集</h1><p><strong>概述</strong></p><p><font class="code-word"><code>Properties</code></font> 属于 <a href="/post/44675/#1-1-Map-%E4%BD%93%E7%B3%BB">Map 集合体系</a>，继承于 <font class="code-word"><code>Hashtable</code></font>，来表示一个持久的属性集。它可以把自己对象中的键值对信息存入到一个属性文件（文件后缀 .properties）中去，每个键及其对应值都是一个字符串。除此之外他它也具备集合本身的性质。</p><p>Properties 构造方法一般使用其默认无参构造方法。</p><p><strong>方法</strong></p><p>属性集新增了与 IO 流结合的读取和输出方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void load(InputStream inStream)</td>             <td style="text-align: center;">从输入字节流读取属性列表（键和元素对）</td>         </tr>        <tr>            <td style="text-align: center;">void load(Reader reader)</td>             <td style="text-align: center;">从输入字符流读取属性列表（键和元素对）</td>         </tr>        <tr>            <td style="text-align: center;">void store(OutputStream out, String comments)</td>             <td style="text-align: center;">使用字符流将此属性列表（键和元素对）写入此 Properties 表中</td>         </tr>        <tr>            <td style="text-align: center;">void store(Writer writer, String comments)</td>             <td style="text-align: center;">使用字符流将此属性列表（键和元素对）写入此 Properties 表中</td>         </tr>        <tr>            <td style="text-align: center;">public Object setProperty(String key, String value) </td>             <td style="text-align: center;">保存键值对 (put)</td>         </tr>        <tr>            <td style="text-align: center;">public String getProperty(String key)</td>             <td style="text-align: center;">使用此属性列表中指定的键搜索属性值 (get)</td>         </tr>        <tr>            <td style="text-align: center;">public Set&lt;String&gt; stringPropertyNames()</td>             <td style="text-align: center;">所有键的名称的集合 (keySet())</td>         </tr>    </body></table><p>最后三个新增方法实际上等同于 <font class="code-word"><code>Map</code></font> 的方法，但是 <font class="code-word"><code>Properties</code></font> 的方法规定了键对值的类型只能是 <font class="code-word"><code>String</code></font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pd3f9elckj50ki"></i><span>java</span><div class="collapse show" id="collapse-pd3f9elckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//输出到属性文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">propertiesOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        propertiesOut.setProperty(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>);<br>        propertiesOut.setProperty(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;24&quot;</span>);<br>        propertiesOut.setProperty(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;25&quot;</span>);<br><br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;data/users.properties&quot;</span>);<br>        <span class="hljs-comment">//OutputStream fw = new FileOutputStream(&quot;data/users.properties&quot;);</span><br>        propertiesOut.store(fw, <span class="hljs-string">&quot;此处输入英文注释&quot;</span>);<br><br><br>        <span class="hljs-comment">//从属性文件读入</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">propertiesIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <br>        Reader fr= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;data/users.properties&quot;</span>);<br>        <span class="hljs-comment">//InputStream fr= new FileInputStream(&quot;data/users.properties&quot;);</span><br>        propertiesIn.load(fr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>使用字符流和字节流的区别如下：</p><ul><li>使用字节流输出，属性文件中汉字会出现乱码。读取时使用字节流或者字符流读入均正常。</li><li>使用字符流输出，属性文件中汉字不会出现乱码。读取时只能使用字符流读入，使用字节流读入则会显示乱码。</li></ul><h1 id="6-IO-框架"><a href="#6-IO-框架" class="headerlink" title="6. IO 框架"></a>6. IO 框架</h1><p>lcommons-io 是 apache 开源基金组织提供的一组有关 IO 操作的类库，可以提高 IO 功能开发的效率。</p><p>lcommons-io 工具包提供了很多有关 IO 操作的类。有两个主要的类 <font class="code-word"><code>FileUtils</code></font>，<font class="code-word"><code>IOUtils</code></font>。</p><p><font class="code-word"><code>FileUtils</code></font> 主要有如下方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">String readFileToString(File file, String encoding)</td>             <td style="text-align: center;">读取文件中的数据, 返回字符串</td>         </tr>        <tr>            <td style="text-align: center;">void copyFile(File srcFile, File destFile)</td>             <td style="text-align: center;">复制文件</td>         </tr>        <tr>            <td style="text-align: center;">void copyDirectoryToDirectory(File srcDir, File destDir)</td>             <td style="text-align: center;">复制文件夹</td>         </tr>    </body></table>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO 流 (一) - Java SE</title>
    <link href="/post/5808/"/>
    <url>/post/5808/</url>
    
    <content type="html"><![CDATA[<h1 id="1-File-类"><a href="#1-File-类" class="headerlink" title="1. File 类"></a>1. File 类</h1><h2 id="1-1-创建对象"><a href="#1-1-创建对象" class="headerlink" title="1.1 创建对象"></a>1.1 创建对象</h2><p><strong>创建类对象</strong></p><p><font class="code-word"><code>File</code></font> 类在 <font class="code-word"><code>java.io.File</code></font> 包下，代表操作系统文件（文件、文件夹）的对象。</p><p>File 对象可以定位文件和文件夹。File 封装的对象<font class="word-stress">仅仅是一个路径名</font>，这个路径可以是存在的，也可以是不存在的。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public File(String pathname)</td>             <td style="text-align: center;">根据文件路径创建文件对象</td>         </tr>        <tr>            <td style="text-align: center;">public File(String parent, String child)</td>             <td style="text-align: center;">根据父路径名字符串和子路径名字符串创建对象</td>         </tr>        <tr>            <td style="text-align: center;">public File(File  parent, String child)</td>             <td style="text-align: center;">根据父路径对应文件对象和子路径名字符串创建对象</td>         </tr>    </body></table><p><strong>绝对和相对路径</strong></p><ul><li><p>绝对路径：从盘符开始的完整路径。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1o4qpwlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1o4qpwlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//绝对路径                                                                                  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Program\\Java\\Test\\File_IO_Test\\data\\data.txt&quot;</span>);         <br><span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/Program/Java/Test/File_IO_Test/data/data.txt&quot;</span>);   <span class="hljs-comment">//路径的另一种写法</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Program\\Java\\Test\\File_IO_Test\\data&quot;</span>);       <span class="hljs-comment">//文件夹  </span><br><br><span class="hljs-comment">//根据父路径名字符串和子路径名字符串创建</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Program\\Java\\Test\\File_IO_Test&quot;</span>, <span class="hljs-string">&quot;data\\data.txt&quot;</span>);<br><br><span class="hljs-comment">//根据父路径对应文件对象和子路径名字符串创建文件对象</span><br><span class="hljs-type">File</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Program\\Java\\Test\\File_IO_Test&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">file6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent, <span class="hljs-string">&quot;data\\data.txt&quot;</span>);<br></code></pre></td></tr></table></div></figure></li><li><p>相对路径：相对指的是相对于当前项目的根目录的路径。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qrtn5elckj50kh"></i><span>java</span><div class="collapse show" id="collapse-qrtn5elckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//相对路径                                   </span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data\\data.txt&quot;</span>);   <br></code></pre></td></tr></table></div></figure></li></ul><h2 id="1-2-常用方法"><a href="#1-2-常用方法" class="headerlink" title="1.2 常用方法"></a>1.2 常用方法</h2><h3 id="1-2-1-获取文件信息"><a href="#1-2-1-获取文件信息" class="headerlink" title="1.2.1 获取文件信息"></a>1.2.1 获取文件信息</h3><p>判断文件类型的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public boolean isDirectory()</td>             <td style="text-align: center;">判断此路径名表示的File是否为文件夹</td>         </tr>        <tr>            <td style="text-align: center;">public boolean isFile()</td>             <td style="text-align: center;">判断此路径名表示的File是否为文件</td>         </tr>        <tr>            <td style="text-align: center;">public boolean exists()</td>             <td style="text-align: center;">判断此路径名表示的File是否存在</td>         </tr>    </body></table><p>获取文件信息的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public long length()</td>             <td style="text-align: center;">返回文件的大小（字节数量）</td>         </tr>        <tr>            <td style="text-align: center;">public String getAbsolutePath()</td>             <td style="text-align: center;">返回文件的绝对路径</td>         </tr>        <tr>            <td style="text-align: center;">public String getPath()</td>             <td style="text-align: center;">返回定义文件时使用的路径</td>         </tr>        <tr>            <td style="text-align: center;">public String getName()</td>             <td style="text-align: center;">返回文件的名称，带后缀</td>         </tr>        <tr>            <td style="text-align: center;">public long lastModified()</td>             <td style="text-align: center;">返回文件的最后修改时间（时间毫秒值）</td>         </tr>    </body></table><h3 id="1-2-2-创建和删除"><a href="#1-2-2-创建和删除" class="headerlink" title="1.2.2 创建和删除"></a>1.2.2 创建和删除</h3><p><strong>方法</strong></p><p>创建文件的方法如下：若创建对象已经存在则会返回 <font class="code-word"><code>false</code></font>。</p><table class="myform">      <head>          <tr>              <th style="text-align: center;" width=50%>方法名称</th>              <th style="text-align: center;" width=50%>方法说明</th>              <th style="padding:0; margin:0;"></th>          </tr>      </head>      <body>          <tr>              <td style="text-align: center;">public boolean createNewFile()</td>               <td style="text-align: center;">创建一个新的空的文件</td>           </tr>          <tr>              <td style="text-align: center;">public boolean mkdir()</td>               <td style="text-align: center;">只能创建一级文件夹</td>           </tr>          <tr>              <td style="text-align: center;">public boolean mkdirs()</td>               <td style="text-align: center;">可以创建多级文件夹</td>           </tr>      </body></table><p>删除文件的方法如下：<font class="code-word"><code>delete</code></font> 方法默认只能删除未被占用的文件和空文件夹，delete 方法直接删除而不进入回收站。</p><table class="myform">      <head>          <tr>              <th style="text-align: center;" width=50%>方法名称</th>              <th style="text-align: center;" width=50%>方法说明</th>              <th style="padding:0; margin:0;"></th>          </tr>      </head>      <body>          <tr>              <td style="text-align: center;">public boolean delete()</td>               <td style="text-align: center;">删除由此抽象路径名表示的文件或空文件夹</td>           </tr>      </body></table>**案例**<figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wgyvkvlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-wgyvkvlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data\\data.txt&quot;</span>);    <span class="hljs-comment">//空文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;folder&quot;</span>);            <span class="hljs-comment">//一级文件夹</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;folder2\\folder&quot;</span>);   <span class="hljs-comment">//多级文件夹</span><br><br>        file1.createNewFile();<br>        file2.mkdir();<br>        file3.mkdirs();<br><br>        file1.delete();<br>        file2.delete();<br>        file3.delete();    <br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="1-2-3-遍历文件夹"><a href="#1-2-3-遍历文件夹" class="headerlink" title="1.2.3 遍历文件夹"></a>1.2.3 遍历文件夹</h3><p><strong>方法</strong></p><p><font class="code-word"><code>File</code></font> 类提供了获取当前目录下所有一级文件的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public String[] list()</td>             <td style="text-align: center;">获取当前目录下所有的"一级文件名称(带后缀)"到一个字符串数组中去返回</td>         </tr>        <tr>            <td style="text-align: center;">public File[] listFiles() （常用）</td>             <td style="text-align: center;">获取当前目录下所有的"一级文件对象"到一个文件对象数组中去返回</td>         </tr>    </body></table>**注意**<p><font class="code-word"><code>listFiles</code></font> 方法注意事项：</p><ul><li>当调用对象不存在时或者代表文件时，返回 <font class="code-word"><code>null</code></font>。</li><li>当调用对象代表一个空文件夹时，返回一个长度为0的数组。</li><li>当调用对象是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在 File 数组中返回。</li><li>当调用对象是一个有隐藏文件的文件夹时，将里面所有文件和文件夹的路径放在 File 数组中返回，包含隐藏文件。</li><li>当没有权限访问该调用对象文件夹时，返回 <font class="code-word"><code>null</code></font>。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9lgel1lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-9lgel1lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data&quot;</span>);<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data\\data.txt&quot;</span>);         <span class="hljs-comment">//空文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data\\folder&quot;</span>);           <span class="hljs-comment">//一级文件夹</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data\\folder2\\folder&quot;</span>);   <span class="hljs-comment">//多级文件夹</span><br><br>        file1.createNewFile();<br>        file2.mkdir();<br>        file3.mkdirs();<br><br>        <span class="hljs-comment">//获取file路径下所有的一级文件名称</span><br>        String[] names = file.list();      <span class="hljs-comment">//[data.txt, folder, folder2]</span><br><br>        <span class="hljs-comment">//获取file路径下所有的一级文件对象</span><br>        File[] files = file.listFiles();   <span class="hljs-comment">//[data\data.txt, data\folder, data\folder2]</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-3-文件搜索"><a href="#1-3-文件搜索" class="headerlink" title="1.3 文件搜索"></a>1.3 文件搜索</h2><p>(学完递归再来写这部分)</p><h1 id="2-字符集"><a href="#2-字符集" class="headerlink" title="2. 字符集"></a>2. 字符集</h1><h2 id="2-1-字符集概述"><a href="#2-1-字符集概述" class="headerlink" title="2.1 字符集概述"></a>2.1 字符集概述</h2><p>计算机可以给字符进行编号存储，这套编号规则就是字符集。</p><p>字符集是多个字符的集合，字符集种类较多，每个字符集包含的字符个数不同，常见字符集有：</p><ul><li><strong>ASCII 字符集</strong>：<ul><li>ASCII (美国信息交换标准代码)：包括了数字、英文、符号。</li><li>ASCII使用<font class="word-stress">一个字节</font>存储一个字符，一个字节是8位，总共可以表示128个字符信息。</li></ul></li><li><strong>GBK 字符集</strong>：<ul><li>GBK是中国的码表，包含了几万个汉字等字符，支持繁体字和部分日韩文字，同时也要兼容ASCII编码。</li><li>GBK编码中一个中文字符一般以<font class="word-stress">两个字节</font>的形式存储。</li></ul></li><li><strong>Unicode 字符集</strong>：<ul><li>统一码，也叫万国码，容纳世界上大多数国家的所有常见文字和符号。</li><li>Unicode会先通过UTF-8，UTF-16，UTF-32编码成二进制后再存储到计算机。其中最为常见的就是UTF-8，UTF-8编码后一个中文一般以<font class="word-stress">三个字节</font>的形式存储，同时也要兼容ASCII编码表。</li><li>是计算机科学领域里的一项业界标准。技术人员都应该使用 UTF-8 的字符集编码。</li></ul></li></ul><p>英文和数字在任何国家的字符集中都占<font class="word-stress">一个字节</font>。</p><h2 id="2-2-编码和解码"><a href="#2-2-编码和解码" class="headerlink" title="2.2 编码和解码"></a>2.2 编码和解码</h2><p><strong>概念</strong></p><p>字符集编码和解码过程如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-29.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 40%;" /><p><strong>编码</strong></p><p><font class="code-word"><code>String</code></font> 中对字符串编码的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">byte[] getBytes()</td>             <td style="text-align: center;">使用平台的默认字符集将该 String 编码为一系列字节，将结果存储到新的字节数组中</td>         </tr>        <tr>            <td style="text-align: center;">byte[] getBytes(String charsetName)</td>             <td style="text-align: center;">使用指定的字符集将该 String 编码为一系列字节，将结果存储到新的字节数组中 </td>         </tr>    </body></table><p><strong>解码</strong></p><p>对字节数组解码的方法如下，该方法实际上是 <font class="code-word"><code>String</code></font> 的构造方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">String(byte[] bytes)</td>             <td style="text-align: center;">通过使用平台的默认字符集解码指定的字节数组来构造新的 String</td>         </tr>        <tr>            <td style="text-align: center;">String(byte[] bytes, String charsetName)</td>             <td style="text-align: center;">通过指定的字符集解码指定的字节数组来构造新的 String</td>         </tr>        <tr>            <td style="text-align: center;">public String(byte[] bytes, int offset, int length)</td>             <td style="text-align: center;">根据字节数组来创建对象，且指定了开始的索引和字节长度</td>         </tr>    </body></table><p>字符解码时使用的字符集和编码时使用的字符集必须一致，否则会出现乱码；英文和数字在任何国家的编码中都不会乱码。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-0hol69lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-0hol69lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;要天天开心&quot;</span>;                                               <br>                                                                    <br><span class="hljs-comment">//使用默认字符集编码（UTF-8）                                                  </span><br><span class="hljs-type">byte</span>[] bytes = str.getBytes();                                      <br><span class="hljs-comment">//使用指定字符集编码（指定 GBK）                                                 </span><br><span class="hljs-type">byte</span>[] bytes1 = str.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);                                <br><br><span class="hljs-comment">//使用默认字符集解码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">newstr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);          <br><span class="hljs-comment">//使用指定字符集解码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">newstr1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes1, <span class="hljs-string">&quot;GBK&quot;</span>);                                                           <br></code></pre></td></tr></table></div></figure><h1 id="3-IO-流体系"><a href="#3-IO-流体系" class="headerlink" title="3. IO 流体系"></a>3. IO 流体系</h1><p><strong>概念</strong></p><p>IO 流包括了输入和输出：</p><ul><li>I 表示 intput，把硬盘文件中的数据读入到内存的过程，称之输入，负责读。</li><li>O 表示 output，把内存中的数据写出到硬盘文件的过程，称之输出，负责写。</li></ul><p><strong>分类</strong></p><p>总体可以将 IO 流分为如下几类：</p><ul><li><strong>字节流</strong>：操作所有类型文件。<ul><li>字节输入流：以内存为基准，来自磁盘文件&#x2F;网络中的数据以字节的形式读入到内存中去。</li><li>字节输出流：以内存为基准，把内存中的数据以字节写出到磁盘文件或者网络中去。</li></ul></li><li><strong>字符流</strong>：只能操作纯文本文件。<ul><li>字符输入流：以内存为基准，来自磁盘文件&#x2F;网络中的数据以字符的形式读入到内存中去。</li><li>字符输出流：以内存为基准，把内存中的数据以字符写出到磁盘文件或者网络介质中去。</li></ul></li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-31.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h1 id="4-基本流"><a href="#4-基本流" class="headerlink" title="4. 基本流"></a>4. 基本流</h1><p>基本流主要有四个实现类如下图：</p><ul><li>字节流：适合做一切文件数据的拷贝（音视频，文本），字节流不适合读取中文内容输出。</li><li>字符流：适合做文本文件的操作（读，写）。</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-30.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h2 id="4-1-字节流"><a href="#4-1-字节流" class="headerlink" title="4.1 字节流"></a>4.1 字节流</h2><h3 id="4-1-1-字节输入流"><a href="#4-1-1-字节输入流" class="headerlink" title="4.1.1 字节输入流"></a>4.1.1 字节输入流</h3><p><strong>概述</strong></p><p>文件字节输入流的实现类：<font class="code-word"><code>FileInputStream</code></font>  。</p><p>FileInputStream 构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public FileInputStream(File file)</td>             <td style="text-align: center;">创建字节输入流管道与源文件对象接通</td>         </tr>        <tr>            <td style="text-align: center;">public FileInputStream(String pathname)</td>             <td style="text-align: center;">创建字节输入流管道与源文件路径接通</td>         </tr>    </body></table><p><strong>方法</strong></p><p>FileInputStream 继承了 <font class="code-word"><code>InputStream</code></font> 中提供的读取数据的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public int read()</td>             <td style="text-align: center;">每次读取一个字节返回读取内容，如果字节已经没有可读的返回-1</td>         </tr>        <tr>            <td style="text-align: center;">public int read(byte[] buffer)</td>             <td style="text-align: center;">每次读取一个字节数组并返回读取字节数，如果字节已经没有可读的返回-1</td>         </tr>        <tr>            <td style="text-align: center;">public int read(byte[] b, int off, int len)</td>             <td style="text-align: center;">每次读取一个字节数组的一部分并返回读取字节数，如果字节已经没有可读的返回-1</td>         </tr>    </body></table><p>两种读取方法的注意事项如下：</p><ul><li><p><strong>按单个字节读取</strong>：在读取由多个字节存储的字符时也只能逐个读取字节，若逐个输出则会出现乱码，只能读取完后存放于一个数组中然后解码。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-x6yvnjlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-x6yvnjlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">//data.txt中的内容:</span><br>a我<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br><br>        <span class="hljs-comment">//每次读取一个字节返回</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((temp = is.read()) != -<span class="hljs-number">1</span>) &#123;         <span class="hljs-comment">//先读取一个字节，再判断是否为-1</span><br>            System.out.println((<span class="hljs-type">char</span>) temp);       <span class="hljs-comment">//逐个输出：a, 乱码, 乱码, 乱码</span><br>            bytes[i] = (<span class="hljs-type">byte</span>) temp;<br>            i++;<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));     <span class="hljs-comment">//合并解码输出：a我</span><br>        System.out.println(temp);                  <span class="hljs-comment">//读取完毕，输出-1</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><strong>按字节数组读取</strong>：对于多个字节存储的字符出现的问题和处理方式同上。同时若最后一轮读取的字节未填满数组，则数组中未填入新读取字节的位置<font class="word-stress">保留的是上一轮读取的内容而非空</font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5p82c6lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-5p82c6lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>abcd<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br><br>        <span class="hljs-comment">//每次读取一个字节数组返回</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> is.read(buffer);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));                   <span class="hljs-comment">//输出：abc</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len2</span> <span class="hljs-operator">=</span> is.read(buffer);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));                   <span class="hljs-comment">//输出：bbc</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span>, len2));          <span class="hljs-comment">//输出：b</span><br>        System.out.println(is.read());                            <span class="hljs-comment">//读取完毕，输出-1</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><p><strong>注意</strong></p><p>若想要<font class="word-stress">一次性读取完</font>文件内的所有内容有两种方法：</p><ul><li><p>定义一个字节数组与文件大小一样大，一次性读取完成。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zf555ulckj50kh"></i><span>java</span><div class="collapse show" id="collapse-zf555ulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>abcd搜变撒泼极sodj<br>扫地机asd<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <br><span class="hljs-comment">//定义字节数组与文件大小一样大</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span>  <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)file.length()];<br>        is.read(buffer);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));             <span class="hljs-comment">//与data.txt中内容一致</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>使用官方提供的方法：官方为字节输入流 <font class="code-word"><code>InputStream</code></font> 提供了如下方法可以吧文件的全部数据读取到一个字节数组中。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public byte[] readAllBytes() throws IOException</td>             <td style="text-align: center;">直接将当前字节输入流对应的文件对象的字节数据装到一个字节数组返回</td>         </tr>    </body></table></li></ul><h3 id="4-1-2-字节输出流"><a href="#4-1-2-字节输出流" class="headerlink" title="4.1.2 字节输出流"></a>4.1.2 字节输出流</h3><p><strong>概述</strong></p><p>文件字节输出流的实现类：<font class="code-word"><code>FileOutputStream </code></font> 。</p><p>FileOutputStream 构造方法如下：</p><p>源文件若不存在，在创建流时会自动创建文件，但路径必须存在。若选择追加数据，则 <font class="code-word"><code>boolean</code></font> 处应填入 <font class="code-word"><code>true</code></font> 。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public FileOutputStream(File file)</td>             <td style="text-align: center;">创建字节输出流管道与源文件对象接通，会清空旧数据</td>         </tr>        <tr>            <td style="text-align: center;">public FileOutputStream(File file，boolean append)</td>             <td style="text-align: center;">创建字节输出流管道与源文件对象接通，可追加数据</td>         </tr>        <tr>            <td style="text-align: center;">public FileOutputStream(String filepath)</td>             <td style="text-align: center;">创建字节输出流管道与源文件路径接通，会清空旧数据</td>         </tr>        <tr>            <td style="text-align: center;">public FileOutputStream(String filepath，boolean append)</td>             <td style="text-align: center;">创建字节输出流管道与源文件路径接通，可追加数据</td>         </tr>    </body></table><p><strong>方法</strong></p><p>FileOutputStream 继承了 <font class="code-word"><code>OutputStream</code></font> 中提供的输出数据的 API：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public void write(int a)</td>             <td style="text-align: center;">写一个字节出去</td>         </tr>        <tr>            <td style="text-align: center;">public void write(byte[] buffer)</td>             <td style="text-align: center;">写一个字节数组出去</td>         </tr>        <tr>            <td style="text-align: center;">public void write(byte[] buffer , int pos , int len)</td>             <td style="text-align: center;">写一个字节数组的一部分出去</td>         </tr>    </body></table><p>FileOutputStream 还继承了 <font class="code-word"><code>OutputStream</code></font> 中关于流的刷新与关闭的 API：</p><p>输出完数据后必须刷新流，缓存在内存中的数据才能在文件中生效。输出结束后必须关闭流，释放资源。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">flush()</td>             <td style="text-align: center;">刷新流，将内存中的数据立刻写出，流还可以继续使用</td>         </tr>        <tr>            <td style="text-align: center;">close()</td>             <td style="text-align: center;">关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td>         </tr>    </body></table><p>两种输出方法的注意事项如下：</p><ul><li><p><strong>按单个字节输出</strong>：在输出由多个字节存储的字符时也只能输出第一个字节，输出的结果会出现乱码。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4zwaqylckj50kh"></i><span>java</span><div class="collapse show" id="collapse-4zwaqylckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br><br>        os.write(<span class="hljs-string">&#x27;a&#x27;</span>);     <span class="hljs-comment">//输出：a</span><br>        os.write(<span class="hljs-number">98</span>);      <span class="hljs-comment">//输出：b</span><br>        os.write(<span class="hljs-string">&#x27;我&#x27;</span>);    <span class="hljs-comment">//输出：乱码</span><br><br>        os.close();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>ab乱码<br><span class="hljs-comment">//——————————————</span><br></code></pre></td></tr></table></div></figure></li><li><p><strong>按字节数组输出</strong>：对于多个字节存储的字符若不完整输出全部字节，也会出现乱码。可以将其转换成字节数组再输出，则不会出现乱码。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kkm7mzlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-kkm7mzlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;       <br><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] buffer = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">98</span>&#125;;<br>        <span class="hljs-type">byte</span>[] buffer1 = <span class="hljs-string">&quot;我&quot;</span>.getBytes();<br><br>        os.write(buffer);<br>        os.write(buffer1);<br><br>        os.close();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>ab我<br><span class="hljs-comment">//——————————————</span><br></code></pre></td></tr></table></div></figure></li></ul><h3 id="4-1-3-文件拷贝"><a href="#4-1-3-文件拷贝" class="headerlink" title="4.1.3 文件拷贝"></a>4.1.3 文件拷贝</h3><p>同时创建一个字节输入流和字节输出流，由输入流读取源文件数据，再将其输出到新文件，代码详见<a href="#4-1-4-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE">资源释放</a>。</p><h3 id="4-1-4-资源释放"><a href="#4-1-4-资源释放" class="headerlink" title="4.1.4 资源释放"></a>4.1.4 资源释放</h3><p>资源释放总共有两种方式：</p><ul><li><p>在 JDK7 以前执行操作，需要用到 <font class="code-sentence"><code>try...catch...finally</code></font> 处理异常，并在最后<font class="word-stress">手动释放资源</font>，代码如下。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-35gvzplckj50kh"></i><span>java</span><div class="collapse show" id="collapse-35gvzplckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//执行文件拷贝操作</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <br>        <span class="hljs-keyword">try</span> &#123;            <br>            is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/data.txt&quot;</span>);         <span class="hljs-comment">//待拷贝文件</span><br>            os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/newdata.txt&quot;</span>);     <span class="hljs-comment">//拷贝的新文件</span><br><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];                    <span class="hljs-comment">//1KB数组</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成了！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (os != <span class="hljs-literal">null</span>) os.close();                    <span class="hljs-comment">//关闭流</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>在 JDK7 之后，官方提供了简易写法在流对象使用完毕后<font class="word-stress">自动释放资源</font>，格式为 <font class="code-sentence"><code>try(定义流对象)...catch</code></font> 。括号中只能放置资源对象，否则报错，资源是实现了 <font class="code-word"><code>Closeable</code></font> &#x2F; <font class="code-word"><code>AutoCloseable</code></font> 接口的类对象。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6nv058lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-6nv058lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//执行文件拷贝操作</span><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/data.txt&quot;</span>);        <span class="hljs-comment">//待拷贝文件</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/newdata.txt&quot;</span>);   <span class="hljs-comment">//拷贝的新文件</span><br>        ) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];                                   <span class="hljs-comment">//1KB数组</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;复制完成了！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="4-2-字符流"><a href="#4-2-字符流" class="headerlink" title="4.2 字符流"></a>4.2 字符流</h2><h3 id="4-2-1-字符输入流"><a href="#4-2-1-字符输入流" class="headerlink" title="4.2.1 字符输入流"></a>4.2.1 字符输入流</h3><p><strong>概述</strong></p><p>文件字符输入流的实现类：<font class="code-word"><code>FileReader</code></font> 。</p><p>FileReader 构造方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public FileReader(File file)</td>             <td style="text-align: center;">创建字符输入流管道与源文件对象接通</td>         </tr>        <tr>            <td style="text-align: center;">public FileReader(String pathname)</td>             <td style="text-align: center;">创建字符输入流管道与源文件路径接通</td>         </tr>    </body></table><p><strong>方法</strong></p><p>FileReader 继承了 <font class="code-word"><code>Reader</code></font> 中提供的读取数据的 API：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public int read()</td>             <td style="text-align: center;">每次读取一个字符返回读取内容，如果字符已经没有可读的返回-1</td>         </tr>        <tr>            <td style="text-align: center;">public int read(char[] buffer)</td>             <td style="text-align: center;">每次读取一个字符数组，返回读取的字符个数，如果字符已经没有可读的返回-1</td>         </tr>        <tr>            <td style="text-align: center;">public abstract int read(char[] cbuf, int off, int len)</td>             <td style="text-align: center;">每次读取一个字符数组的一部分，返回读取的字符个数，如果字符已经没有可读的返回-1</td>         </tr>    </body></table><p>两种读取方法的注意事项如下：</p><ul><li><p><strong>按单个字符读取</strong>：相较于字节输入流中每次读取一个字节，字符输入流能完整读取一个中文字符而不会出现乱码。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zt65knlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-zt65knlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>ab我<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br><br>        <span class="hljs-comment">//每次读取一个字符返回</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((temp = fr.read()) != -<span class="hljs-number">1</span>) &#123;        <span class="hljs-comment">//先读取一个字符，再判断是否为-1</span><br>            System.out.println((<span class="hljs-type">char</span>)temp);       <span class="hljs-comment">//逐个输出：a, b, 我</span><br>        &#125;<br>        System.out.println(temp);                  <span class="hljs-comment">//读取完毕，输出-1</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><strong>按字符数组读取</strong>：若最后一轮读取的字符未填满数组，则数组中未填入新读取字符的位置<font class="word-stress">保留的是上一轮读取的内容而非空</font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-46rvjtlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-46rvjtlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>ab我<br><span class="hljs-comment">//——————————————</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br><br>        <span class="hljs-comment">//每次读取一个字符数组返回</span><br>        <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">2</span>];<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> fr.read(buffer);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));                   <span class="hljs-comment">//输出：ab</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len2</span> <span class="hljs-operator">=</span> fr.read(buffer);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));                   <span class="hljs-comment">//输出：我b</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span>, len2));          <span class="hljs-comment">//输出：我</span><br>        <br>        System.out.println(fr.read());                            <span class="hljs-comment">//读取完毕，输出-1</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h3 id="4-2-2-字符输出流"><a href="#4-2-2-字符输出流" class="headerlink" title="4.2.2 字符输出流"></a>4.2.2 字符输出流</h3><p><strong>概述</strong></p><p>文件字节输出流的实现类：<font class="code-word"><code>FileWriter</code></font> 。</p><p>FileWrite 构造方法如下：</p><p>源文件若不存在，在创建流时会自动创建文件。若选择追加数据，则 <font class="code-word"><code>boolean</code></font> 处应填入 <font class="code-word"><code>true</code></font> 。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public FileWriter(File file)</td>             <td style="text-align: center;">创建字符输出流管道与源文件对象接通，会清空旧数据</td>         </tr>        <tr>            <td style="text-align: center;">public FileWriter(File file，boolean append)</td>             <td style="text-align: center;">创建字符输出流管道与源文件对象接通，可追加数据</td>         </tr>        <tr>            <td style="text-align: center;">public FileWriter(String filepath)</td>             <td style="text-align: center;">创建字符输出流管道与源文件路径接通，会清空旧数据</td>         </tr>        <tr>            <td style="text-align: center;">public FileWriter(String filepath，boolean append)</td>             <td style="text-align: center;">创建字符输出流管道与源文件路径接通，可追加数据</td>         </tr>    </body></table><p><strong>方法</strong></p><p>FileWriter 继承了 <font class="code-word"><code>Writer</code></font> 中提供的输出数据的 API：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void write(int c)</td>             <td style="text-align: center;">写一个字符</td>         </tr>        <tr>            <td style="text-align: center;">void write(char[] cbuf)</td>             <td style="text-align: center;">写一个字符数组</td>         </tr>        <tr>            <td style="text-align: center;">void write(char[] cbuf, int off, int len)</td>             <td style="text-align: center;">写字符数组的一部分</td>         </tr>        <tr>            <td style="text-align: center;">void write(String str)</td>             <td style="text-align: center;">写一个字符串</td>         </tr>        <tr>            <td style="text-align: center;">void write(String str, int off, int len)</td>             <td style="text-align: center;">写一个字符串的一部分</td>         </tr>    </body></table><p>FileWriter 还继承了<font class="code-word"><code>Writer</code></font> 中关于流的刷新与关闭的 API：</p><p>输出完数据后必须刷新流，缓存在内存中的数据才能在文件中生效。输出结束后必须关闭流，释放资源。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">flush()</td>             <td style="text-align: center;">刷新流，将内存中的数据立刻写出，流还可以继续使用</td>         </tr>        <tr>            <td style="text-align: center;">close()</td>             <td style="text-align: center;">关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wc21jflckj50kh"></i><span>java</span><div class="collapse show" id="collapse-wc21jflckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br><br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;data//data.txt&quot;</span>);<br><br>        <span class="hljs-comment">//写一个字符</span><br>        fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        fw.write(<span class="hljs-number">98</span>);<br>        fw.write(<span class="hljs-string">&#x27;我&#x27;</span>);<br><br>        <span class="hljs-comment">//写一个字符数组</span><br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-string">&quot;abc你我他&quot;</span>.toCharArray();<br>        fw.write(chars);<br><br>        <span class="hljs-comment">//写一个字符串</span><br>        fw.write(<span class="hljs-string">&quot;cba他我你&quot;</span>);<br><br>        fw.close();<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//data.txt中的内容</span><br>ab我abc你我他cba他我你<br><span class="hljs-comment">//——————————————</span><br></code></pre></td></tr></table></div></figure><h2 id="4-3-输出换行"><a href="#4-3-输出换行" class="headerlink" title="4.3 输出换行"></a>4.3 输出换行</h2><p><strong>换行符号</strong></p><p>输出一个换行符到文件中共有两种写法：</p><ul><li>直接输出换行符号：Mac 中为 <font class="code-word"><code>&quot;\r&quot;</code></font>，Unix&#x2F;Linux 中为 <font class="code-word"><code>&quot;\n&quot;</code></font>，Windows 中为 <font class="code-word"><code>&quot;\r\n&quot;</code></font> 。</li><li>输出 Java 自定义的换行符号（通用）：<font class="code-sentence"><code>System.getProperty(&quot;line.separator&quot;)</code></font> ，即获取当前操作系统的换行符。</li></ul><p><strong>字节流换行</strong></p><p>在字节流中对于换行符均需要调用 <font class="code-word"><code>getBytes()</code></font> 方法获取其对应字节，然后再输出。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-appa4rlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-appa4rlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">os.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>os.write(System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>).getBytes());<br></code></pre></td></tr></table></div></figure><p><strong>字符流换行</strong></p><p>字符流中换行符可以直接输出，不需要转换成对应字节。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kddo1olckj50kh"></i><span>java</span><div class="collapse show" id="collapse-kddo1olckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>fw.write(System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>));<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/post/54862/"/>
    <url>/post/54862/</url>
    
    <content type="html"><![CDATA[<div class="categoryinpost">    <button class="collapsed" type="button" data-toggle="collapse" data-target="#content">        <i class="fa fa-angle-down"></i><b>数据结构与算法</b>    </button>    <div class="collapse titleblock" id="content">        <div class="dropdown-divider"></div>        <div class="titleblock">            <ul>                <li><a href="/post/203/" class="title">队列</a></li>                   <li><a href="/post/204/" class="title">链表</a></li>             </ul>         </div>    </div></div><h1 id="1-链表概述"><a href="#1-链表概述" class="headerlink" title="1. 链表概述"></a>1. 链表概述</h1><p>链表是有序的列表，链表的特点是：</p><ul><li>链表是以节点的方式来存储,是链式存储</li><li>每个节点包含 data 域、next 域（指向下一个节点）。</li><li>链表的<strong>各个节点不一定是连续存储</strong>。</li><li>链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定。</li></ul><p>链表在内存中的存储如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-6.png" srcset="/img/loading.gif" lazyload alt="02-6" class="img-center" style="zoom:80%;" /><p>单向链表和双向链表的对比：</p><ul><li>单向链表查找的方向只能是一个方向。而双向链表可以向前或者向后查找。</li><li>单向链表不能自我删除，需要靠辅助节点（即必须查询到前驱位置）。而双向链表则可以自我删除。</li></ul><h1 id="2-单向链表实现"><a href="#2-单向链表实现" class="headerlink" title="2. 单向链表实现"></a>2. 单向链表实现</h1><p>链表中的节点通过自定义一个<strong>节点类</strong>来实现，类中属性至少包括 <strong>data</strong> 和 <strong>next</strong> 两部分。data 用于存储元素数据，next 用于存储下一个节点的地址。</p><p>然后自定义一个管理节点的<strong>单向链表类</strong>，若为带头指针的单向链表，则链表类的属性应包含一个节点类型的<strong>头指针</strong>。头指针不用于存储 data，仅用于指向首节点。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-5.png" srcset="/img/loading.gif" lazyload alt="02-5" class="img-center" style="zoom:80%;" /><h2 id="2-1-定义节点类"><a href="#2-1-定义节点类" class="headerlink" title="2.1 定义节点类"></a>2.1 定义节点类</h2><p>定义一个节点类用来实现每个节点的功能。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-eqo0g8lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-eqo0g8lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义节点类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Node next;       <span class="hljs-comment">//指向下一个节点</span><br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-定义链表类"><a href="#2-2-定义链表类" class="headerlink" title="2.2 定义链表类"></a>2.2 定义链表类</h2><p>定义一个单向链表类用来管理节点，实现链表的功能。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yr166wlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-yr166wlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义单向链表类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkedList</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Node head;    <span class="hljs-comment">//头指针</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;     <span class="hljs-comment">//链表长度</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br><span class="hljs-comment">//--------链表方法--------</span><br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-3-链表方法"><a href="#2-3-链表方法" class="headerlink" title="2.3 链表方法"></a>2.3 链表方法</h2><h3 id="2-3-1-增加节点"><a href="#2-3-1-增加节点" class="headerlink" title="2.3.1 增加节点"></a>2.3.1 增加节点</h3><p>分为头插法、尾插法、任意位置插入三种方法：</p><ul><li><p>头插法：使新节点指向原头节点，然后 head 指向新节点。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-7.png" srcset="/img/loading.gif" lazyload alt="02-7" class="img-center" style="zoom:80%;" /><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qu3de4lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-qu3de4lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加节点到链表(头插法)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHead</span><span class="hljs-params">(Node node)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        node.next = head;    <span class="hljs-comment">//新节点指向原头结点</span><br>    &#125;<br>    head = node;             <span class="hljs-comment">//头指针指向新节点</span><br>    size++;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>尾插法：使用临时节点 temp 从首节点开始遍历找到尾节点，使尾节点指向新节点。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-8.png" srcset="/img/loading.gif" lazyload alt="02-8" class="img-center" style="zoom:80%;" /><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ly5xz2lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-ly5xz2lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加节点到链表(尾插法)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTail</span><span class="hljs-params">(Node node)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        head = node;         <span class="hljs-comment">//头指针指向新节点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (temp.next != <span class="hljs-literal">null</span>) &#123;<br>            temp = temp.next;<br>        &#125;<br>        temp.next = node;    <span class="hljs-comment">//尾节点指向新节点</span><br>    &#125;<br>    size++;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>根据索引插入，需要先判断索引是否为0：</p><ul><li>若索引为 0，则直接使用头插法。若索引为 size，则直接使用尾插法。</li><li>若索引不为 0 或 size，则使用临时节点 temp 找到索引的前驱位置，使新节点指向索引节点，再使前驱节点指向新节点。（顺序：前驱节点 → 新节点 → 原索引节点）</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-9.png" srcset="/img/loading.gif" lazyload alt="02-9" class="img-center" style="zoom:80%;" /></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ye9c5zlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-ye9c5zlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加节点到链表(指定位置)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addIndex</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> index)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>        addHead(node);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size) &#123;<br>        addTail(node);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> findIndexBefore(index);    <span class="hljs-comment">//找到指定索引的前驱位置</span><br>    node.next = temp.next;<br>    temp.next = node;<br>    size++;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-3-2-删除节点"><a href="#2-3-2-删除节点" class="headerlink" title="2.3.2 删除节点"></a>2.3.2 删除节点</h3><p>删除节点需要先判断索引：</p><ul><li>若索引为 0，则直接使 head 指向头节点的下一个节点。</li><li>若索引不为 0，则使用临时节点 temp 找到索引的前驱位置，使前驱节点指向索引节点的后一个节点。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jozi4glckj50kg"></i><span>java</span><div class="collapse show" id="collapse-jozi4glckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据索引删除节点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>        head = head.next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> findIndexBefore(index);    <span class="hljs-comment">//找到指定索引的前驱位置</span><br>        temp.next = temp.next.next;<br>    &#125;<br>    size--;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-3-3-修改节点"><a href="#2-3-3-修改节点" class="headerlink" title="2.3.3 修改节点"></a>2.3.3 修改节点</h3><p>修改节点需要先判断索引：</p><ul><li>若索引为 0，则使新节点指向原头节点的下一个节点 ，再使 head 指向新节点。</li><li>若索引不为 0，则使用临时节点 temp 找到索引前驱位置，使新节点指向原节点的下一个节点，再使前驱节点指向新节点。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tgny4wlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-tgny4wlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据索引修改节点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> index)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>        node.next = head.next;<br>        head = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> findIndexBefore(index);    <span class="hljs-comment">//找到指定索引的前驱位置</span><br>        node.next = temp.next.next;<br>        temp.next = node;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-3-4-查询节点"><a href="#2-3-4-查询节点" class="headerlink" title="2.3.4 查询节点"></a>2.3.4 查询节点</h3><p>查询指定索引的前驱节点：使用 for 循环向后 index - 1次。</p><p>查询指定索引节点：</p><ul><li>若索引为0，则直接输出头节点。</li><li>若索引不为0，则则使用临时节点 temp 找到索引前驱位置，输出前驱节点的下一个节点。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-n6p6wdlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-n6p6wdlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询指定索引的前驱位置</span><br><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">findIndexBefore</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> || index &gt; size - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index - <span class="hljs-number">1</span>; i++) &#123;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5jme22lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-5jme22lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询指定索引节点</span><br><span class="hljs-keyword">public</span> Node <span class="hljs-title function_">findIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> findIndexBefore(index);    <span class="hljs-comment">//找到指定索引的前驱位置</span><br>        <span class="hljs-keyword">return</span> temp.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-3-5-显示链表"><a href="#2-3-5-显示链表" class="headerlink" title="2.3.5 显示链表"></a>2.3.5 显示链表</h3><p>使用临时节点 temp 从首节点向后遍历并输出，遇节点为空时终止遍历。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7muxpmlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-7muxpmlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示链表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;链表为空，不能获取数据&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(temp);<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-4-测试代码"><a href="#2-4-测试代码" class="headerlink" title="2.4 测试代码"></a>2.4 测试代码</h2><p>测试功能的代码如下：</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xoa8mnlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-xoa8mnlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//测试用节点</span><br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;王五&quot;</span>);<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;刘六&quot;</span>);<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;周七&quot;</span>);<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;顾八&quot;</span>);<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;孟九&quot;</span>);<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;陈十&quot;</span>);<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">node9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DNode</span>(<span class="hljs-string">&quot;伍零&quot;</span>);<br><br>        <span class="hljs-comment">//功能测试</span><br>        <span class="hljs-type">SingleLinkedList</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleLinkedList</span>();<br>        <span class="hljs-type">DoubleLinkedList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleLinkedList</span>();<br>        System.out.println(<span class="hljs-string">&quot;-----------增----------&quot;</span>);<br>        list.addHead(node1);<br>        list.addTail(node2);<br>        list.addTail(node3);<br>        System.out.println(list.getSize());<br>        list.show();<br>        System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>        list.addIndex(node4, <span class="hljs-number">0</span>);<br>        list.addIndex(node5, <span class="hljs-number">4</span>);<br>        list.addIndex(node6, <span class="hljs-number">2</span>);<br>        System.out.println(list.getSize());<br>        list.show();<br>        System.out.println(<span class="hljs-string">&quot;-----------删----------&quot;</span>);<br>        list.delete(<span class="hljs-number">0</span>);<br>        list.delete(<span class="hljs-number">4</span>);<br>        list.delete(<span class="hljs-number">2</span>);<br>        System.out.println(list.getSize());<br>        list.show();<br>        System.out.println(<span class="hljs-string">&quot;-----------改----------&quot;</span>);<br>        list.update(node7, <span class="hljs-number">0</span>);<br>        list.update(node8, <span class="hljs-number">2</span>);<br>        list.update(node9, <span class="hljs-number">1</span>);<br>        System.out.println(list.getSize());<br>        list.show();<br>        System.out.println(<span class="hljs-string">&quot;-----------查----------&quot;</span>);<br>        System.out.println(list.findIndex(<span class="hljs-number">0</span>));<br>        System.out.println(list.findIndex(<span class="hljs-number">1</span>));<br>        System.out.println(list.findIndex(<span class="hljs-number">2</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-双向链表实现"><a href="#3-双向链表实现" class="headerlink" title="3. 双向链表实现"></a>3. 双向链表实现</h1><p>链表中的节点通过自定义一个<strong>节点类</strong>来实现，类中属性至少包括 <strong>data</strong> 、 <strong>next</strong> 和 <strong>pre</strong> 三部分。data 用于存储元素数据，next 用于存储后置节点的地址，pre 用于存储前置节点的地址.</p><p>然后自定义一个管理节点的<strong>双向链表类</strong>，若为带头尾指针的双向链表，则链表类的属性应包含一个节点类型的<strong>头指针</strong>和<strong>尾指针</strong>。头指针不用于存储 data，仅用于指向首节点。尾指针不用于存储 data，仅用于指向尾节点。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-10.png" srcset="/img/loading.gif" lazyload alt="02-10" class="img-center" style="zoom:80%;" /><h2 id="3-1-定义节点类"><a href="#3-1-定义节点类" class="headerlink" title="3.1 定义节点类"></a>3.1 定义节点类</h2><p>定义一个节点类用来实现每个节点的功能。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-y5ii1slckj50kg"></i><span>java</span><div class="collapse show" id="collapse-y5ii1slckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DNode</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> DNode next;       <span class="hljs-comment">//指向后置节点</span><br>    <span class="hljs-keyword">public</span> DNode pre;        <span class="hljs-comment">//指向前置节点</span><br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DNode</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-2-定义链表类"><a href="#3-2-定义链表类" class="headerlink" title="3.2 定义链表类"></a>3.2 定义链表类</h2><p>定义一个双向链表类用来管理节点，实现链表的功能。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kk0370lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-kk0370lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedList</span> &#123;<br><br>    <span class="hljs-keyword">private</span> DNode head;    <span class="hljs-comment">//头指针</span><br>    <span class="hljs-keyword">private</span> DNode tail;    <span class="hljs-comment">//尾指针</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;      <span class="hljs-comment">//节点数量</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    <br>    <span class="hljs-comment">//——————链表方法——————</span><br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-3-链表方法"><a href="#3-3-链表方法" class="headerlink" title="3.3 链表方法"></a>3.3 链表方法</h2><h3 id="3-3-1-增加节点"><a href="#3-3-1-增加节点" class="headerlink" title="3.3.1 增加节点"></a>3.3.1 增加节点</h3><p>分为头插法、尾插法、任意位置插入三种方法：</p><ul><li><p>头插法：新节点在前，原头结点在后，二者相互指。然后使 head 指向新节点。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-91ysmhlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-91ysmhlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加节点到链表(头插法)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHead</span><span class="hljs-params">(DNode node)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        head = node;<br>        tail = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node.next = head;    <span class="hljs-comment">//新节点指向原头结点</span><br>        head.pre = node;     <span class="hljs-comment">//原头节点指向新节点</span><br>        head = node;         <span class="hljs-comment">//头指针指向新节点</span><br>    &#125;<br>    size++;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>尾插法：新节点在后，原尾节点在前，二者相互指。然后使 tail 指向新节点。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-26lg0qlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-26lg0qlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加节点到链表(尾插法)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTail</span><span class="hljs-params">(DNode node)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (tail == <span class="hljs-literal">null</span>) &#123;<br>        tail = node;<br>        head = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node.pre = tail;     <span class="hljs-comment">//新节点指向原尾结点</span><br>        tail.next = node;    <span class="hljs-comment">//原尾节点指向新节点</span><br>        tail = node;         <span class="hljs-comment">//尾指针指向新节点</span><br>    &#125;<br>    size++;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>根据索引插入，需要先判断索引是否为 0 或 size：</p><ul><li>若索引为 0，则直接使用头插法。若索引为 size，则直接使用尾插法。</li><li>若索引不为 0 或 size，则使用临时节点 temp 找到索引节点，使前驱节点和新节点互指，再使新节点和索引节点互指。（顺序：前驱节点 → 新节点 → 原索引节点）</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rpfhoilckj50kg"></i><span>java</span><div class="collapse show" id="collapse-rpfhoilckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加节点到链表(指定位置)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addIndex</span><span class="hljs-params">(DNode node, <span class="hljs-type">int</span> index)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>        addHead(node);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size) &#123;<br>        addTail(node);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">DNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> findIndex(index);    <span class="hljs-comment">//找到指定索引位置</span><br>    node.pre = temp.pre;<br>    temp.pre.next = node;<br>    node.next = temp;<br>    temp.pre = node;<br>    size++;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h3 id="3-3-2-删除节点"><a href="#3-3-2-删除节点" class="headerlink" title="3.3.2 删除节点"></a>3.3.2 删除节点</h3><p>删除节点需要先判断索引：</p><ul><li>若索引为 0，则初始化头节点的后一节点的 pre，并让 head 指向头节点的后一节点。</li><li>若索引为 size - 1，则初始化尾节点的后一节点的 next，并让 tail 指向尾节点的前一节点。</li><li>若索引不为 0 或 size - 1，则使用临时节点 temp 找到索引位置，使索引节点的前一节点和后一节点互指。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-r9130alckj50kh"></i><span>java</span><div class="collapse show" id="collapse-r9130alckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>        head.next.pre = <span class="hljs-literal">null</span>;<br>        head = head.next;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size - <span class="hljs-number">1</span>) &#123;<br>        tail.pre.next = <span class="hljs-literal">null</span>;<br>        tail = tail.pre;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> findIndex(index);    <span class="hljs-comment">//找到指定索引节点</span><br>        temp.next.pre = temp.pre;<br>        temp.pre.next = temp.next;<br>    &#125;<br>    size--;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="3-3-3-修改节点"><a href="#3-3-3-修改节点" class="headerlink" title="3.3.3 修改节点"></a>3.3.3 修改节点</h3><p>修改节点需要先判断索引：</p><ul><li>若索引为 0，则使新节点和原头节点的后一个节点互指 ，再使 head 指向新节点。</li><li>若索引为 size - 1，则使新节点和原尾节点的前一个节点互指，并让 tail 指向尾节点。</li><li>若索引不为 0 或 size - 1，则使用临时节点 temp 找到索引位置，使新节点和索引节点的后一节点互指，再使新节点和索引节点的前一节点互指。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-phgk0llckj50kh"></i><span>java</span><div class="collapse show" id="collapse-phgk0llckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据索引修改节点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(DNode node, <span class="hljs-type">int</span> index)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>        node.next = head.next;<br>        head.next.pre = node;<br>        head = node;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == size - <span class="hljs-number">1</span>) &#123;<br>        node.pre = tail.pre;<br>        tail.pre.next = node;<br>        tail = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> findIndex(index);    <span class="hljs-comment">//找到指定索引节点</span><br>        node.next = temp.next;<br>        temp.next.pre = node;<br>        node.pre = temp.pre;<br>        temp.pre.next = node;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="3-3-4-查询节点"><a href="#3-3-4-查询节点" class="headerlink" title="3.3.4 查询节点"></a>3.3.4 查询节点</h3><p>使用 for 循环向后推进 index 次，即找到查询的节点。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2oubmzlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-2oubmzlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询指定索引节点</span><br><span class="hljs-keyword">public</span> DNode <span class="hljs-title function_">findIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; size - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;索引超出范围&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">DNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="3-3-5-显示链表"><a href="#3-3-5-显示链表" class="headerlink" title="3.3.5 显示链表"></a>3.3.5 显示链表</h3><p>使用临时节点 temp 从首节点向后遍历并输出，遇节点为空时终止遍历。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fuotk6lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-fuotk6lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示链表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;链表为空，不能获取数据&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">DNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(temp);<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-4-测试代码"><a href="#3-4-测试代码" class="headerlink" title="3.4 测试代码"></a>3.4 测试代码</h2><p>测试代码同<a href="#2-4-%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81">单向链表测试代码</a>，仅需修改测试对象的节点类和链表类，不再单独列出。</p>]]></content>
    
    
    <categories>
      
      <category>03 数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/post/26671/"/>
    <url>/post/26671/</url>
    
    <content type="html"><![CDATA[<div class="categoryinpost">    <button class="collapsed" type="button" data-toggle="collapse" data-target="#content">        <i class="fa fa-angle-down"></i><b>数据结构与算法</b>    </button>    <div class="collapse titleblock" id="content">        <div class="dropdown-divider"></div>        <div class="titleblock">            <ul>                <li><a href="/post/203/" class="title">队列</a></li>                   <li><a href="/post/204/" class="title">链表</a></li>             </ul>         </div>    </div></div><h1 id="1-队列概述"><a href="#1-队列概述" class="headerlink" title="1. 队列概述"></a>1. 队列概述</h1><p>队列是一个有序列表，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</p><p>队列特点：遵循<strong>先入先出</strong>的原则。即先存入队列的数据要先取出，后存入的要后取出。见下图：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-3.png" srcset="/img/loading.gif" lazyload alt="02-3" class="img-center" style="zoom:80%;" /><h1 id="2-单向队列实现"><a href="#2-单向队列实现" class="headerlink" title="2. 单向队列实现"></a>2. 单向队列实现</h1><p>队列本身是有序列表，若使用<strong>数组</strong>的结构来存储队列的数据，则队列数组的声明如下图, 其中 <strong>maxSize</strong> 是该队列的最大容量。</p><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个变量 <strong>front</strong> 及 <strong>rear</strong> 分别记录队列前后端的下标，front 会随着数据输出而改变，而 rear 则是随着数据输入而改变，如图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-1.png" srcset="/img/loading.gif" lazyload alt="02-1" class="img-center" style="zoom:80%;" /><h2 id="2-1-定义队列类"><a href="#2-1-定义队列类" class="headerlink" title="2.1 定义队列类"></a>2.1 定义队列类</h2><p>创建一个单向队列类用来实现单向队列功能。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h3se0clckj50kg"></i><span>java</span><div class="collapse show" id="collapse-h3se0clckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义队列类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//数组的最大容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;      <span class="hljs-comment">//指向队列头</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;       <span class="hljs-comment">//指向队列尾</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arr;      <span class="hljs-comment">//存放数据</span><br>    <br>    <span class="hljs-comment">//---------队列方法---------</span><br><br>&#125;<br></code></pre></td></tr></table></div></figure><p>初始化队列，即让指针 front &#x3D; rear &#x3D; 0。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-rimhhylckj50kg"></i><span>java</span><div class="collapse show" id="collapse-rimhhylckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>    <br>    <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>    arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    front = <span class="hljs-number">0</span>;    <span class="hljs-comment">//指向队列头部</span><br>    rear = <span class="hljs-number">0</span>;     <span class="hljs-comment">//指向队列尾部的下一个位置</span><br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-队列方法"><a href="#2-2-队列方法" class="headerlink" title="2.2 队列方法"></a>2.2 队列方法</h2><h3 id="2-2-1-判断队列空满"><a href="#2-2-1-判断队列空满" class="headerlink" title="2.2.1 判断队列空满"></a>2.2.1 判断队列空满</h3><p>判断队列为空的标志是：front &#x3D; rear。</p><p>判断队列为满的标志是：rear &#x3D; maxSize。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ma4yc3lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-ma4yc3lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断队列是否满</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">return</span> rear == maxSize;<br>    <br>&#125;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">return</span> rear == front;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-2-2-数据进队列"><a href="#2-2-2-数据进队列" class="headerlink" title="2.2.2 数据进队列"></a>2.2.2 数据进队列</h3><p>实现思路为：在 rear 处添加元素，然后 rear++。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-p3uiytlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-p3uiytlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据进队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (isFull()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列满，不能添加数据&quot;</span>);<br>    &#125;<br>    arr[rear] = n;<br>    rear++;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-2-3-数据出队列"><a href="#2-2-3-数据出队列" class="headerlink" title="2.2.3 数据出队列"></a>2.2.3 数据出队列</h3><p>实现思路为：输出 front 处元素，清除 front 处元素，最后 front++。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-cdyukplckj50kg"></i><span>java</span><div class="collapse show" id="collapse-cdyukplckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据出队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能获取数据&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> arr[front];   <span class="hljs-comment">//获取数据</span><br>    arr[front] = <span class="hljs-number">0</span>;           <span class="hljs-comment">//元素清空</span><br>    front++;                  <span class="hljs-comment">//尾指针后移</span><br>    <span class="hljs-keyword">return</span> value;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-2-4-显示队列"><a href="#2-2-4-显示队列" class="headerlink" title="2.2.4 显示队列"></a>2.2.4 显示队列</h3><p>显示队列头的思路为：输出 front 处元素。</p><p>显示队列所有数据的思路为：从 front 至 rear - 1 遍历所有元素并输出。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-v2prp8lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-v2prp8lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示队列所有数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能获取数据&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> front; i &lt; rear; i++) &#123;<br>        System.out.printf(<span class="hljs-string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8knvixlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-8knvixlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示队列头数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">headQueue</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能获取数据&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr[front];<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-3-测试代码"><a href="#2-3-测试代码" class="headerlink" title="2.3 测试代码"></a>2.3 测试代码</h2><p>测试功能的代码如下：</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-t4jqbulckj50kg"></i><span>java</span><div class="collapse show" id="collapse-t4jqbulckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.InputMismatchException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ArrayQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayQueue</span>(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (loop) &#123;<br><br>            <span class="hljs-comment">//输出菜单</span><br>            System.out.println(<span class="hljs-string">&quot;---------菜单--------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;s(show)：显示队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;e(exit)：退出程序&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;a(add)：数据进队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;g(get)：数据出队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;h(head)：显示队列头&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;请输入选择：&quot;</span>);<br>            <span class="hljs-type">char</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:  <span class="hljs-comment">//显示队列</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        queue.showQueue();<br>                    &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;队列空，显示队列失败！&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:  <span class="hljs-comment">//退出程序</span><br>                    System.out.println(<span class="hljs-string">&quot;欢迎下次使用！&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:  <span class="hljs-comment">//数据进队列</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;请输入进队列数据：&quot;</span>);<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> sc.nextInt();<br>                        queue.addQueue(value);<br>                    &#125; <span class="hljs-keyword">catch</span> (InputMismatchException e) &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">valueskip</span> <span class="hljs-operator">=</span> sc.next();<br>                        System.out.println(<span class="hljs-string">&quot;输入数据非数字，进队列失败！&quot;</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;队列满，进队列失败！&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:  <span class="hljs-comment">//数据出队列</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> queue.getQueue();<br>                        System.out.println(<span class="hljs-string">&quot;出队列数据为：&quot;</span> + result);<br>                    &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;队列空，出队列失败！&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:  <span class="hljs-comment">//显示队列头</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> queue.headQueue();<br>                        System.out.println(<span class="hljs-string">&quot;队列头数据为：&quot;</span> + result);<br>                    &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;队列空，显示队列头失败！&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入不在选项范围内！&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-环形队列实现"><a href="#3-环形队列实现" class="headerlink" title="3. 环形队列实现"></a>3. 环形队列实现</h1><p>对前面的数组模拟单向队列的优化，充分利用<strong>数组</strong>。因此将数组看做是一个环形的，通过<strong>取模</strong>的方式来实现。</p><p>使用 <strong>maxSize</strong> 代表队列的最大容量，但为了区分队列满和队列空，<strong>牺牲了一个存储空间</strong>，故队列实际存储长度为 maxSize - 1。</p><p>采用变量 <strong>front</strong> 及 <strong>rear</strong> 分别记录队列前后端的下标，front 会随着数据输出而改变，而 rear 则是随着数据输入而改变，如图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/02-2.png" srcset="/img/loading.gif" lazyload alt="02-2" class="img-center" style="zoom:80%;" /><h2 id="3-1-定义队列类"><a href="#3-1-定义队列类" class="headerlink" title="3.1 定义队列类"></a>3.1 定义队列类</h2><p>创建一个环形队列类用来实现环形队列功能。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5tc45wlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-5tc45wlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleArrayQueue</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//数组的最大容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;      <span class="hljs-comment">//指向队列头</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;       <span class="hljs-comment">//指向队列尾</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arr;      <span class="hljs-comment">//存放数据</span><br><br>    <span class="hljs-comment">//---------队列方法---------</span><br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p>初始化队列，即让指针 front &#x3D; rear &#x3D; 0。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-j20u20lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-j20u20lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//队列构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CircleArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <br>    <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>    arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    front = <span class="hljs-number">0</span>;    <span class="hljs-comment">//指向队列头部</span><br>    rear = <span class="hljs-number">0</span>;     <span class="hljs-comment">//指向队列尾部的下一个位置</span><br>        <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-2-队列方法"><a href="#3-2-队列方法" class="headerlink" title="3.2 队列方法"></a>3.2 队列方法</h2><h3 id="3-2-1-判断队列空满"><a href="#3-2-1-判断队列空满" class="headerlink" title="3.2.1 判断队列空满"></a>3.2.1 判断队列空满</h3><p>判断队列为空的标志是：front &#x3D; rear。</p><p>判断队列为满的标志是：front &#x3D; (rear  + 1) % maxSize。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9bpuihlckj50kg"></i><span>java</span><div class="collapse show" id="collapse-9bpuihlckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断队列是否满</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">return</span> front == (rear + <span class="hljs-number">1</span>) % maxSize;<br>    <br>&#125;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">return</span> rear == front;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="3-2-2-数据进队列"><a href="#3-2-2-数据进队列" class="headerlink" title="3.2.2 数据进队列"></a>3.2.2 数据进队列</h3><p>实现思路为：在 rear 处添加元素，然后 rear &#x3D; (rear + 1) % maxSize。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hcrd6flckj50kg"></i><span>java</span><div class="collapse show" id="collapse-hcrd6flckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据进队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (isFull()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列满，不能添加数据&quot;</span>);<br>    &#125;<br>    arr[rear] = n;<br>    rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="3-2-3-数据出队列"><a href="#3-2-3-数据出队列" class="headerlink" title="3.2.3 数据出队列"></a>3.2.3 数据出队列</h3><p>实现思路为：输出 front 处元素，清除 front 处元素，最后 front &#x3D; (front + 1) % maxSize。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ozj6z9lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-ozj6z9lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据出队列</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能获取数据&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> arr[front];            <span class="hljs-comment">//获取数据</span><br>    arr[front] = <span class="hljs-number">0</span>;                    <span class="hljs-comment">//元素清空</span><br>    front = (front + <span class="hljs-number">1</span>) % maxSize;     <span class="hljs-comment">//尾指针后移</span><br>    <span class="hljs-keyword">return</span> value;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="3-2-4-获取队列长度"><a href="#3-2-4-获取队列长度" class="headerlink" title="3.2.4 获取队列长度"></a>3.2.4 获取队列长度</h3><p>获取队列长度思路为：(rear - front + maxSize) % maxSize，加 maxSize 是为了防止负数。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wyttn9lckj50kg"></i><span>java</span><div class="collapse show" id="collapse-wyttn9lckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前队列元素个数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">return</span> (rear - front + maxSize) % maxSize;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="3-2-4-显示队列"><a href="#3-2-4-显示队列" class="headerlink" title="3.2.4 显示队列"></a>3.2.4 显示队列</h3><p>显示队列头的思路为：输出 front 处元素。</p><p>显示队列所有数据的思路为：从 front 至 front + getSize() - 1 遍历所有元素并输出，实际下标为 i % maxSize。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ml8tjflckj50kg"></i><span>java</span><div class="collapse show" id="collapse-ml8tjflckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示队列所有数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能获取数据&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> front; i &lt; front + getSize(); i++) &#123;<br>        System.out.printf(<span class="hljs-string">&quot;arr[%d] = %d\n&quot;</span>, i % maxSize, arr[i % maxSize]);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-0kvkdllckj50kg"></i><span>java</span><div class="collapse show" id="collapse-0kvkdllckj50kg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示队列头数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">headQueue</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能获取数据&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr[front];<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-3-测试代码"><a href="#3-3-测试代码" class="headerlink" title="3.3 测试代码"></a>3.3 测试代码</h2><p>测试代码同<a href="#2-3-%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81">单向队列测试代码</a>，仅需修改测试对象的队列类，不再单独列出。</p>]]></content>
    
    
    <categories>
      
      <category>03 数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常 - Java SE</title>
    <link href="/post/4876/"/>
    <url>/post/4876/</url>
    
    <content type="html"><![CDATA[<h1 id="1-异常概述"><a href="#1-异常概述" class="headerlink" title="1. 异常概述"></a>1. 异常概述</h1><h2 id="1-1-异常体系"><a href="#1-1-异常体系" class="headerlink" title="1.1 异常体系"></a>1.1 异常体系</h2><p>异常是程序在<font class="word-stress">编译</font>或者<font class="word-stress">执行</font>的过程中可能出现的问题。注意：语法错误不算在异常体系中。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-22.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><p>异常体系 <font class="code-word"><code>Throwable</code></font> 分为两大类：</p><ul><li><font class="code-word"><code>Error</code></font>：系统级别问题、JVM退出等，代码无法控制。</li><li><font class="code-word"><code>Exception</code></font>：在 <font class="code-word"><code>java.lang</code></font> 包下，称为异常类，它表示程序本身可以处理的问题。<ul><li>RuntimeException 及其子类：运行时异常，编译阶段不会报错。 (空指针异常，数组索引越界异常) 。</li><li>除 RuntimeException 之外所有的异常：编译时异常，<font class="word-stress">编译期必须处理</font>，否则程序不能通过编译。 (日期格式化异常)。</li></ul></li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-21.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><h2 id="1-2-编译时异常"><a href="#1-2-编译时异常" class="headerlink" title="1.2 编译时异常"></a>1.2 编译时异常</h2><p>不是 <font class="code-word"><code>RuntimeException</code></font> 或者其子类的异常，编译阶段就报错，<font class="word-stress">必须处理</font>，否则代码不通过。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-i3e9mmlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-i3e9mmlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2015-01-12 10:23:21&quot;</span>;<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(date);     <span class="hljs-comment">//出现编译时异常，程序无法编译</span><br>System.out.println(d);<br></code></pre></td></tr></table></div></figure><h2 id="1-3-运行时异常"><a href="#1-3-运行时异常" class="headerlink" title="1.3 运行时异常"></a>1.3 运行时异常</h2><p><strong>概述</strong></p><p>运行时异常直接继承自 <font class="code-word"><code>RuntimeException</code></font> 或者其子类，编译阶段不会报错所以编译阶段可以不处理，但运行时可能出现的错误。</p><p>按照规范建议还是处理：建议在最外层调用处集中捕获处理即可，参照[异常处理](#2.4 抛出并捕获处理)的内容。</p><p><strong>案例</strong></p><ul><li><p>数组索引越界异常：<font class="code-word"><code>ArrayIndexOutOfBoundsException</code></font></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-olskcvlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-olskcvlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>System.out.println(arr[<span class="hljs-number">3</span>]);    <span class="hljs-comment">//数组索引越界异常，程序终止</span><br></code></pre></td></tr></table></div></figure></li><li><p>空指针异常 : <font class="code-word"><code>NullPointerException</code></font>，直接输出没有问题，但是调用空指针的变量的功能就会报错</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4wvvrolckj50kh"></i><span>java</span><div class="collapse show" id="collapse-4wvvrolckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>System.out.println(name);             <span class="hljs-comment">//直接输出没有问题</span><br>System.out.println(name.length());    <span class="hljs-comment">//空指针异常，程序终止</span><br></code></pre></td></tr></table></div></figure></li><li><p>数学操作异常：<font class="code-word"><code>ArithmeticException</code></font></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7fgghslckj50kh"></i><span>java</span><div class="collapse show" id="collapse-7fgghslckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;     <span class="hljs-comment">//数字操作异常，程序终止</span><br></code></pre></td></tr></table></div></figure></li><li><p>类型转换异常：<font class="code-word"><code>ClassCastException</code></font></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-b3h8zzlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-b3h8zzlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (String) o;    <span class="hljs-comment">//类型转换异常，程序终止</span><br></code></pre></td></tr></table></div></figure></li><li><p>数字转换异常： <font class="code-word"><code>NumberFormatException</code></font></p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-j0ggoslckj50kh"></i><span>java</span><div class="collapse show" id="collapse-j0ggoslckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;23abc&quot;</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> Integer.valueOf(number);     <span class="hljs-comment">//数字转换异常，程序终止</span><br></code></pre></td></tr></table></div></figure></li></ul><h1 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h1><h2 id="2-1-默认异常处理"><a href="#2-1-默认异常处理" class="headerlink" title="2.1 默认异常处理"></a>2.1 默认异常处理</h2><p>在未进行异常处理时，有默认的异常处理机制：</p><ul><li>默认会在出现异常的代码那里自动的创建一个异常对象：<font class="code-word"><code>ArithmeticException</code></font>。</li><li>异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给 JVM 虚拟机。</li><li>虚拟机接收到异常对象后，先在控制台直接输出异常栈信息数据。</li><li>然后直接从当前执行的异常点<font class="word-stress">结束当前程序</font>，后续代码没有机会执行了。</li></ul><h2 id="2-2-抛出异常"><a href="#2-2-抛出异常" class="headerlink" title="2.2 抛出异常"></a>2.2 抛出异常</h2><p>抛出异常使用 <font class="code-word"><code>throw</code></font> 和 <font class="code-word"><code>throws</code></font> 关键字来实现。</p><ul><li>throw：用于方法体内抛出异常，表示抛出异常。方法体内 throw 语句后的代码将不会执行。</li><li>throws ：用在方法上，可以将方法内部出现的异常抛出去给本方法的调用者处理。（如果调用者扔抛出异常给虚拟机，则程序直接结束，这等同于默认异常处理。）</li></ul><p>抛出异常格式如下，且可以在 <font class="code-word"><code>throws </code></font> 后接多个异常，用逗号隔开。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-34tyi6lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-34tyi6lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-comment">//调用者再抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        method();<br>    &#125;<br><br>    <span class="hljs-comment">//方法抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//方法体中抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p>可将 throws 后的异常类型统一写成 <font class="code-word"><code>Exception</code></font>，则可以抛出任意异常。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4q3usdlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-4q3usdlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <br>    <span class="hljs-comment">//代表可以抛出一切异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-3-捕获处理异常"><a href="#2-3-捕获处理异常" class="headerlink" title="2.3 捕获处理异常"></a>2.3 捕获处理异常</h2><p><strong>概述</strong></p><p>捕获和处理异常使用 <font class="code-word"><code>try</code></font> 和 <font class="code-word"><code>catch</code></font> 关键字来实现。除此之外还有一个 <font class="code-word"><code>finally</code></font> 关键字。</p><p>将方法内部出现的异常直接捕获处理。发生异常的方法自己独立完成异常的处理，程序可以继续往下执行，不会终止。</p><p><strong>关键字</strong></p><ul><li><p><font class="code-sentence"><code>try...catch</code></font>：执行 try 中的代码，若 catch 到对应类型异常则移交至 catch 中的代码处理，并跳过 try 中剩余代码；若未捕获到对应类型异常，则跳过 catch 中的代码。在 catch 中若未继续抛出异常，则 catch 之后代码将正常执行。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yx6bm0lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-yx6bm0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        method();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-comment">//方法捕获异常，并自己处理异常</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获到异常&quot;</span>);<br>        &#125;<br>        <br>        <span class="hljs-comment">//处理完异常后程序继续执行，此处代码将可以执行</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><font class="code-sentence"><code>try...finally</code></font>：执行 try 中的代码，不论是否有对应类型异常，都会在之后执行 finally 中的代码。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5603ollckj50kh"></i><span>java</span><div class="collapse show" id="collapse-5603ollckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-comment">//调用者抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        method();<br>    &#125;<br><br>    <span class="hljs-comment">//方法抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//方法捕获异常，不论是否有异常都会执行finally语句</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行&quot;</span>);<br>        &#125;        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><font class="code-sentence"><code>try...catch...finally</code></font>：前半段处理流程同 try…catch，不论是否捕获异常，在之后都会执行 finally 中的代码。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7vq5iclckj50kh"></i><span>java</span><div class="collapse show" id="collapse-7vq5iclckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        method();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//方法捕获异常，并自己处理异常，不论是否有异常都会执行finally语句</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获到异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><p><strong>注意</strong></p><p>即使 try 和 catch 中写了 <font class="code-word"><code>return</code></font>，也会执行 <font class="code-word"><code>finally</code></font> 之后才返回。但是 <font class="code-sentence"><code>System.exit(0)</code></font> 会直接结束整个程序，finally 不会再执行。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uslktqlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-uslktqlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        method();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行&quot;</span>);      <span class="hljs-comment">//该语句仍然会执行</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ppaxlwlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ppaxlwlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        method();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行&quot;</span>);      <span class="hljs-comment">//该语句不会执行</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><p><font class="code-word"><code>catch</code></font> 语句可以写多次，用于分别捕获处理不同类型的异常。也可以多个类型用或连接并合并捕获。</p><p>可以将 catch 后的异常类型统一写成 <font class="code-word"><code>Exception</code></font>，则可以捕获任意异常。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kag7ptlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-kag7ptlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;              <br>    <br>    <span class="hljs-comment">//代表可以捕获一切异常</span><br>    <span class="hljs-keyword">try</span> &#123;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-4-抛出并捕获处理"><a href="#2-4-抛出并捕获处理" class="headerlink" title="2.4 抛出并捕获处理"></a>2.4 抛出并捕获处理</h2><p>此即捕获处理和抛出的结合，由方法内部抛出异常，由外部调用者捕获并处理异常。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-jjia9slckj50kh"></i><span>java</span><div class="collapse show" id="collapse-jjia9slckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//调用者捕获异常，并处理异常</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            method();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获到异常&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//方法抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-异常处理案例"><a href="#3-异常处理案例" class="headerlink" title="3. 异常处理案例"></a>3. 异常处理案例</h1><p>由如下案例展示异常的处理。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-67ojlrlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-67ojlrlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//直到输入数字才会结束循环</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入数字&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">numString</span> <span class="hljs-operator">=</span> sc.nextLine();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Double.valueOf(numString);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;输入错误，请重新输入&quot;</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-自定义异常"><a href="#4-自定义异常" class="headerlink" title="4. 自定义异常"></a>4. 自定义异常</h1><h2 id="4-1-自定义编译异常"><a href="#4-1-自定义编译异常" class="headerlink" title="4.1 自定义编译异常"></a>4.1 自定义编译异常</h2><p>自定义编译异常的步骤如下：</p><ul><li>定义一个异常类继承 <font class="code-word"><code>Exception</code></font>。</li><li>重写构造器。</li><li>在出现异常的地方用 <font class="code-word"><code>throw new</code></font> 自定义对象抛出。此时方法必须处理或者继续抛出异常，否则报错。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9sgysmlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-9sgysmlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumIllegalException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumIllegalException</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//提供抛出异常到JVM虚拟机时，可以输出内容的构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumIllegalException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5fwm0tlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-5fwm0tlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>checkNum(<span class="hljs-number">123</span>);     <span class="hljs-comment">//此句在编译阶段即会提醒异常，必须进行处理或方法继续抛出异常</span><br>        <br>    &#125;<br><br>    <span class="hljs-comment">//检查数字是否小于100，方法必须抛出或处理异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkNum</span> <span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-keyword">throws</span> NumIllegalException &#123;<br>        <span class="hljs-keyword">if</span> (num &gt;= <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumIllegalException</span>(num + <span class="hljs-string">&quot;不小于100&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;数字合法&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-自定义运行异常"><a href="#4-2-自定义运行异常" class="headerlink" title="4.2 自定义运行异常"></a>4.2 自定义运行异常</h2><p>自定义编译异常的步骤如下：</p><ul><li>定义一个异常类继承  <font class="code-word"><code>RuntimeException</code></font>。</li><li>重写构造器。</li><li>在出现异常的地方用 <font class="code-word"><code>throw new</code></font> 自定义对象抛出。此时方法可以不处理异常也不会报错。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1e49xylckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1e49xylckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumIllegalException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumIllegalException</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//提供抛出异常到JVM虚拟机时，可以输出内容的构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumIllegalException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7maqyxlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-7maqyxlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>checkNum(<span class="hljs-number">123</span>);     <span class="hljs-comment">//此句在编译阶段不会提醒异常，但运行时会抛出异常</span><br>        <br>    &#125;<br><br>    <span class="hljs-comment">//检查数字是否小于100，方法不强制要求处理或抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkNum</span> <span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">if</span> (num &gt;= <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumIllegalException</span>(num + <span class="hljs-string">&quot;不小于100&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;数字合法&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合 (二) - Java SE</title>
    <link href="/post/44675/"/>
    <url>/post/44675/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Map-集合"><a href="#1-Map-集合" class="headerlink" title="1. Map 集合"></a>1. Map 集合</h1><h2 id="1-1-Map-体系"><a href="#1-1-Map-体系" class="headerlink" title="1.1 Map 体系"></a>1.1 Map 体系</h2><p><strong>类的概述</strong></p><p><font class="code-word"><code>Map</code></font> 集合是一种双列集合，也叫键值对集合。</p><p>每个元素包含两个数据，每个元素的格式：<font class="code-sentence"><code>key = value (键值对元素)</code></font>。</p><p>Map 集合的特点有：</p><ul><li>集合的特点都是由键决定的。</li><li>集合的键无序（存取顺序不一致，但每次的无序是固定的顺序，即取出的顺序虽然与存储顺序不同，但并非每次随机，而是有固定顺序）、不重复、无索引。值不做要求（可以重复）。</li><li>集合后面重复的键对应的值会覆盖前面重复键的值。</li><li>集合的键值对都可以为 <font class="code-word"><code>null</code></font>。</li></ul><p>Map 集合常用的实现类有：</p><ul><li>HashMap：元素按照键是无序，不重复，无索引，值不做要求。（与 Map 体系一致）</li><li>LinkedHashMap：元素按照键是<font class="word-stress">有序</font>，不重复，无索引，值不做要求。</li><li>TreeMap：元素按照键是<font class="word-stress">排序</font>，不重复，无索引的，值不做要求</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-13.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><p><strong>实现类特点</strong></p><p>Map 集合的实现类各自存在特点：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>实现类</th>            <th style="text-align: center;" width=50%>集合特点</th>            <th style="text-align: center;" width=25%>底层原理</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">HashMap 集合</td>             <td style="text-align: center;">元素按照键无序，不重复，无索引；值不做要求。增删改查快。</td>             <td style="text-align: center;">哈希表</td>         </tr>        <tr>            <td style="text-align: center;">LinkedList 集合</td>             <td style="text-align: center;">元素按照键有序，不重复，无索引；值不做要求。增删改查快。</td>             <td style="text-align: center;">哈希表和双链表</td>         </tr>        <tr>            <td style="text-align: center;">HashSet 集合</td>             <td style="text-align: center;">元素按照键排序，不重复，无索引；值不做要求。对对象排序。</td>             <td style="text-align: center;">红黑树</td>         </tr>    </body></table><p><strong>类创建对象</strong></p><p>创建 <font class="code-word"><code>Map</code></font> 对象只能用其实现类去创建，然后基于多态用父类类型 Map 接收。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-so9c9ulckj50kh"></i><span>java</span><div class="collapse show" id="collapse-so9c9ulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br></code></pre></td></tr></table></div></figure><h2 id="1-2-Map-方法"><a href="#1-2-Map-方法" class="headerlink" title="1.2 Map 方法"></a>1.2 Map 方法</h2><p><strong>类的常规方法</strong></p><p><font class="code-word"><code>Map</code></font> 是双列集合的父接口，它的功能是全部双列集合都可以继承使用的：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">V put(K key, V value)</td>             <td style="text-align: center;">添加元素</td>         </tr>        <tr>            <td style="text-align: center;">V get(Object key)</td>             <td style="text-align: center;">根据键获取对应的值</td>         </tr>           <tr>            <td style="text-align: center;">V remove(Object key)</td>             <td style="text-align: center;">根据键删除键值对元素</td>         </tr>           <tr>            <td style="text-align: center;">void clear()</td>             <td style="text-align: center;">移除所有的键值对元素</td>         </tr>         <tr>            <td style="text-align: center;">boolean containsKey(Object key)</td>             <td style="text-align: center;">判断集合是否包含指定的键</td>         </tr>         <tr>            <td style="text-align: center;">boolean containsValue(Object value)</td>             <td style="text-align: center;">判断集合是否包含指定的值</td>         </tr>         <tr>            <td style="text-align: center;">boolean isEmpty()</td>             <td style="text-align: center;">判断集合是否为空</td>         </tr>         <tr>            <td style="text-align: center;">int size()</td>             <td style="text-align: center;">集合的长度，也就是集合中键值对的个数</td>         </tr>          <tr>            <td style="text-align: center;">void putAll(Map&lt;? extends K, ? extends V&gt; m)</td>             <td style="text-align: center;">将其他Map集合的元素添加至该Map集合</td>         </tr>     </body></table><p><strong>类的提取和转换方法</strong></p><p>除去常规方法外，<font class="code-word"><code>Map</code></font> 中还含有单独提取键或值的集合，以及整体提取键值并转换为 <font class="code-word"><code>Set</code></font> 集合的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Set&lt;K&gt; keySet()</td>             <td style="text-align: center;">获取全部键的集合</td>         </tr>        <tr>            <td style="text-align: center;">Collection&lt;V&gt; values()</td>             <td style="text-align: center;">获取全部值的集合</td>         </tr>           <tr>            <td style="text-align: center;">Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</td>             <td style="text-align: center;">获取所有键值对对象的集合</td>         </tr>       </body></table><p><font class="code-word"><code>entrySet()</code></font>  方法中将 <font class="code-word"><code>Map</code></font> 集合转换成了 <font class="code-word"><code>Set</code></font> 集合，其中每一个元素为原 Map 集合中的一个键值对，类型为内部接口  <font class="code-word"><code>Entry</code></font>  的实现类对象  <font class="code-word"><code>Map.Entry&lt;K, V&gt;</code></font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-f2gt99lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-f2gt99lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <br><span class="hljs-comment">//获取全部键值对的集合</span><br>Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();<br></code></pre></td></tr></table></div></figure><h2 id="1-3-Map-遍历"><a href="#1-3-Map-遍历" class="headerlink" title="1.3 Map 遍历"></a>1.3 Map 遍历</h2><h3 id="1-3-1-键找值"><a href="#1-3-1-键找值" class="headerlink" title="1.3.1 键找值"></a>1.3.1 键找值</h3><p>先获取 <font class="code-word"><code>Map</code></font> 集合的全部键的 <font class="code-word"><code>Set</code></font> 集合，遍历键的 Set 集合，然后通过键提取对应值。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-s2lrb5lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-s2lrb5lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//获取全部键的集合</span><br>        Set&lt;String&gt; keys = map.keySet();<br>        <br>        <span class="hljs-comment">//根据键遍历集合元素</span><br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            System.out.println(key + map.get(key));<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="1-3-2-键值对"><a href="#1-3-2-键值对" class="headerlink" title="1.3.2 键值对"></a>1.3.2 键值对</h3><p>先使用 <font class="code-word"><code>entrySet()</code></font> 方法把 <font class="code-word"><code>Map</code></font> 集合转换成 <font class="code-word"><code>Set</code></font> 集合，Set 集合中每个元素都是键值对实体类型了。遍历 Set 集合，然后提取键以及提取值。</p><p>遍历中使用到的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">K getKey()</td>             <td style="text-align: center;">获得 Entry 对象中的键</td>         </tr>        <tr>            <td style="text-align: center;">V getValue()</td>             <td style="text-align: center;">获取 Entry 对象中的值</td>         </tr>        </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6p2fh7lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-6p2fh7lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//获取全部键值对的集合</span><br>        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();<br>        <br>        <span class="hljs-comment">//根据遍历集合元素</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;<br>            System.out.println(entry.getKey() + entry.getValue());<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="1-3-3-lambda表达式"><a href="#1-3-3-lambda表达式" class="headerlink" title="1.3.3 lambda表达式"></a>1.3.3 lambda表达式</h3><p><font class="code-word"><code>Map</code></font> 重写了 <font class="code-word"><code>Iterable</code></font> 接口中的 <font class="code-word"><code>forEach</code></font> 方法，JDK8 推出的 lambda 表达式，提供了一种结合了forEach 方法的更简单、更直接的遍历集合的方式：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">default void forEach(BiConsumer<? super K, ? super V> action)</td>             <td style="text-align: center;">结合lambda遍历集合</td>         </tr>       </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-iyv691lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-iyv691lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//未用lambda表达式简化的匿名内部类遍历</span><br>        map.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BiConsumer</span>&lt;String, Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String key, Integer value)</span> &#123;<br>                System.out.println(key + value);<br>            &#125;<br>        &#125;);<br>        <br>        <span class="hljs-comment">//使用lambda表达式遍历元素</span><br>        map.forEach((key, value) -&gt; System.out.println(key + value));<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-4-Map-去重"><a href="#1-4-Map-去重" class="headerlink" title="1.4 Map 去重"></a>1.4 Map 去重</h2><p><font class="code-word"><code>Map</code></font> 集合是根据键去重的，键去重的规则和 <a href="/post/28199/#4-2-Set-%E5%8E%BB%E9%87%8D">Set 去重</a>是相同的规则。</p><p>对于自定义类来说，如果希望 Map 集合认为两个内容一样的对象是重复的键，必须重写类的 <font class="code-word"><code>hashCode()</code></font> 和 <font class="code-word"><code>equals()</code></font> 方法。<a href="/post/45824/#1-2-equals-%E9%87%8D%E5%86%99">equals 方法重写</a>详见前文。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-utpckplckj50kh"></i><span>java</span><div class="collapse show" id="collapse-utpckplckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">//重写hashCode()和equals()方法的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Students</span> <span class="hljs-variable">students</span> <span class="hljs-operator">=</span> (Students) o;<br>        <span class="hljs-keyword">return</span> age == students.age &amp;&amp; Objects.equals(name, students.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-14w61ilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-14w61ilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Map&lt;Students, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">33</span>), <span class="hljs-string">&quot;北京&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">33</span>), <span class="hljs-string">&quot;上海&quot;</span>);<br><br>        System.out.println(map);    <span class="hljs-comment">//打印出来1个元素</span><br>         <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="2-Map-实现类"><a href="#2-Map-实现类" class="headerlink" title="2. Map 实现类"></a>2. Map 实现类</h1><h2 id="2-1-HashMap-集合"><a href="#2-1-HashMap-集合" class="headerlink" title="2.1 HashMap 集合"></a>2.1 HashMap 集合</h2><p><font class="code-word"><code>HashMap</code></font> 是 <font class="code-word"><code>Map</code></font> 里面的一个实现类。特点都是由键决定的：无序、不重复、无索引。</p><p>HashMap 跟 <font class="code-word"><code>HashSet</code></font> 底层原理是一模一样的，都是<font class="word-stress">哈希表</font>结构，增删改查性能都较好，只是 HashMap 的每个元素包含两个值而已。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-14.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><h2 id="2-2-LinkedHashMap-集合"><a href="#2-2-LinkedHashMap-集合" class="headerlink" title="2.2 LinkedHashMap 集合"></a>2.2 LinkedHashMap 集合</h2><p><font class="code-word"><code>LinkedHashMap</code></font> 的特点是由键决定：有序、不重复、无索引。这里的有序指的是保证存储和取出的元素顺序一致</p><p>LinkedHashMap 底层数据结构是依然<font class="word-stress">哈希表</font>，只是每个键值对元素又额外的多了一个<font class="word-stress">双链表</font>的机制记录存储的顺序。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-15.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><h2 id="2-3-TreeMap-集合"><a href="#2-3-TreeMap-集合" class="headerlink" title="2.3 TreeMap 集合"></a>2.3 TreeMap 集合</h2><h3 id="2-3-1-TreeMap-底层"><a href="#2-3-1-TreeMap-底层" class="headerlink" title="2.3.1 TreeMap 底层"></a>2.3.1 TreeMap 底层</h3><p><font class="code-word"><code>TreeMap</code></font> 的特点是由键决定的：不重复、无索引、可排序。可排序是指按照元素的大小默认升序（有小到大）排序。</p><p>TreeMap 集合底层是基于<font class="word-stress">红黑树</font>的数据结构实现排序的，增删改查性能都较好。（注意：TreeMap 集合是一定要排序的）</p><h3 id="2-3-2-TreeMap-排序"><a href="#2-3-2-TreeMap-排序" class="headerlink" title="2.3.2 TreeMap 排序"></a>2.3.2 TreeMap 排序</h3><p><font class="code-word"><code>TreeMap</code></font> 集合的排序规则和 <a href="/post/28199/#4-5-2-TreeSet-%E6%8E%92%E5%BA%8F">TreeSet 排序</a>是相同的规则。对于自定义类型，TreeMap 无法直接排序，需要手动制定排序规则：</p><ul><li><p><strong>方法一</strong>：让自定义的类实现 <font class="code-word"><code>Comparable</code></font> 接口重写里面的 <font class="code-word"><code>compareTo(E o)</code></font> 方法来定制比较规则。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1rl4x6lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1rl4x6lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Students&gt; &#123;<br><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//方法一：类自定义比较规则：按年龄排升序，且年龄相等不视作重复元素，避开返回0</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Students o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age &gt;= <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//toString()方法略</span><br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-y563i5lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-y563i5lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Map&lt;Students, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>), <span class="hljs-string">&quot;北京&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">12</span>), <span class="hljs-string">&quot;上海&quot;</span>);<br><br>        System.out.println(map);    <span class="hljs-comment">//输出结果：&#123;Students&#123;name=&#x27;李四&#x27;, age=12&#125;=上海, Students&#123;name=&#x27;张三&#x27;, age=23&#125;=北京&#125;</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><strong>方法二</strong>：TreeMap 集合有参数构造器，可以设置 <font class="code-word"><code>Comparator</code></font> 接口对应的比较器对象，来定制比较规则。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-v4z1sblckj50kh"></i><span>java</span><div class="collapse show" id="collapse-v4z1sblckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>   <br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>    <span class="hljs-comment">//toString()方法略</span><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z8nklflckj50kh"></i><span>java</span><div class="collapse show" id="collapse-z8nklflckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//方法二：匿名内部类重写集合比较器中的方法，按年龄排升序，且年龄相等不视作重复元素，避开返回0</span><br>        Map&lt;Students, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Students&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Students o1, Students o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.age - o2.age &gt;= <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//方法二：使用lambda表达式简化的匿名内部类</span><br>        Map&lt;Students, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; o1.age - o2.age &gt;= <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>);<br>        <br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>), <span class="hljs-string">&quot;北京&quot;</span>);<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">12</span>), <span class="hljs-string">&quot;上海&quot;</span>);<br>        <br>        System.out.println(map);    <span class="hljs-comment">//输出结果：&#123;Students&#123;name=&#x27;李四&#x27;, age=12&#125;=上海, Students&#123;name=&#x27;张三&#x27;, age=23&#125;=北京&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="2-4-Properties-集合"><a href="#2-4-Properties-集合" class="headerlink" title="2.4 Properties 集合"></a>2.4 Properties 集合</h2><p>参考 IO 流中的<a href="/post/54804/#5-%E5%B1%9E%E6%80%A7%E9%9B%86">属性集</a>。</p><h1 id="3-集合的嵌套"><a href="#3-集合的嵌套" class="headerlink" title="3. 集合的嵌套"></a>3. 集合的嵌套</h1><p>允许集合中存入的元素仍为一个集合，这即是集合的嵌套。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1bcyv4lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1bcyv4lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//使用Map集合存储，其值为List集合</span><br>        Map&lt;String, List&lt;String&gt;&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <br>        List&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list1, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>);<br>        data.put(<span class="hljs-string">&quot;张三&quot;</span>, list1);<br>        <br>        List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list2, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>);<br>        data.put(<span class="hljs-string">&quot;李四&quot;</span>, list2);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-不可变集合"><a href="#4-不可变集合" class="headerlink" title="4. 不可变集合"></a>4. 不可变集合</h1><p>不可变集合，就是不可被修改的集合。集合的数据项在创建的时候提供，并且在整个生命周期中都不可改变，否则报错。</p><p>在 <font class="code-word"><code>List</code></font>、<font class="code-word"><code>Set</code></font>、<font class="code-word"><code>Map</code></font> 接口中，都存在 <font class="code-word"><code>of(E…elements)</code></font> 方法，可以创建一个不可变的集合。这个集合不能添加，不能删除，不能修改，但可获取元素：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">static &lt;E&gt; List&lt;E&gt; of(E…elements)</td>             <td style="text-align: center;">创建一个具有指定元素的List集合对象</td>         </tr>           <tr>            <td style="text-align: center;">static &lt;E&gt; Set&lt;E&gt; of(E…elements)</td>             <td style="text-align: center;">创建一个具有指定元素的Set集合对象</td>         </tr>           <tr>            <td style="text-align: center;">static &lt;K , V&gt;  Map&lt;K，V&gt; of(E…elements)</td>             <td style="text-align: center;">创建一个具有指定元素的Map集合对象</td>         </tr>       </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4ioyz9lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-4ioyz9lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//不可变List集合</span><br>        List&lt;Integer&gt; list = List.of(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br>        <br>        <span class="hljs-comment">//不可变Set集合</span><br>        Set&lt;Double&gt; set = Set.of(<span class="hljs-number">10.0</span>, <span class="hljs-number">20.1</span>, <span class="hljs-number">30.3</span>);<br>        <br>        <span class="hljs-comment">//不可变Map集合</span><br>        Map&lt;String, Integer&gt; map = Map.of(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">33</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">23</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="5-Stream-流"><a href="#5-Stream-流" class="headerlink" title="5. Stream 流"></a>5. Stream 流</h1><h2 id="5-1-获取流方法"><a href="#5-1-获取流方法" class="headerlink" title="5.1 获取流方法"></a>5.1 获取流方法</h2><p><strong>流的概念</strong></p><p><font class="code-word"><code>Stream</code></font> 流结合了 lambda 表达式，用于简化集合、数组操作的 API。</p><p>Stream 流的使用方式是，先得到集合或者数组的 Stream 流（就是一根传送带），然后把元素放上去，然后就用这个 Stream 流简化的 API 来方便的操作元素。所有的<font class="word-stress">流对象只能使用一次</font>。</p><p><strong>流的获取</strong></p><ul><li><p><strong>集合获取流</strong>：使用 <font class="code-word"><code>Collection</code></font> 接口中的默认方法 <font class="code-word"><code>Stream</code></font> 生成流。<font class="code-word"><code>Map</code></font>  集合可以获取到键、值、键值对的集合后分别再调用各自对应流：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">default Stream&lt;E&gt; stream()</td>             <td style="text-align: center;">获取当前集合对象的Stream流</td>         </tr>       </body></table></li><li><p><strong>数组获取流</strong>：调用 <font class="code-word"><code>Arrays</code></font> 中的 <font class="code-word"><code>Stream</code></font> 方法，或者 <font class="code-word"><code>Stream</code></font> 中的 <font class="code-word"><code>of(T...values)</code></font> 方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public  static &lt;T&gt;  Stream&lt;T&gt;  stream(T[]  array)</td>             <td style="text-align: center;">获取当前数组的Stream流</td>         </tr>           <tr>            <td style="text-align: center;">public  static&lt;T&gt;  Stream&lt;T&gt;  of(T...  values)</td>             <td style="text-align: center;">获取当前数组/可变数据的Stream流</td>         </tr>      </body></table></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lt0t11lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-lt0t11lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//Collection集合获取流</span><br>        Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stream&lt;String&gt; listStream = list.stream();<br><br>        <span class="hljs-comment">//Map集合获取流</span><br>        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//获取键流</span><br>        Stream&lt;String&gt; keyStream = map.keySet().stream();<br>        <span class="hljs-comment">//获取值流</span><br>        Stream&lt;Integer&gt; valueStream = map.values().stream();<br>        <span class="hljs-comment">//获取键值整体流</span><br>        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; keyValueStream = map.entrySet().stream();<br><br>        <span class="hljs-comment">//数组获取流</span><br>        Integer[] array = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>        Stream&lt;Integer&gt; arrayStream = Arrays.stream(array);<br>        Stream&lt;Integer&gt; arrayStream2 = Stream.of(array);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-2-流中间方法"><a href="#5-2-流中间方法" class="headerlink" title="5.2 流中间方法"></a>5.2 流中间方法</h2><p><strong>中间方法的概述</strong></p><p>中间方法也称为非终结方法，调用完成后返回新的 Stream 流<font class="word-stress">可以继续使用</font>，支持链式编程，但所有的流对象只能使用一次。在 Stream 流中无法直接修改集合、数组中的数据。常用的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">Stream&lt;T&gt; filter(Predicate&it;? super T&gt; predicate)</td>             <td style="text-align: center;">用于对流中的数据进行过滤</td>         </tr>          <tr>            <td style="text-align: center;">Stream&lt;T&gt; limit(long maxSize)</td>             <td style="text-align: center;">获取前几个元素</td>         </tr>        <tr>            <td style="text-align: center;">Stream&lt;T&gt; skip(long n)</td>             <td style="text-align: center;">跳过前几个元素</td>         </tr>        <tr>            <td style="text-align: center;">Stream&lt;T&gt; distinct()</td>             <td style="text-align: center;">去除流中重复的元素,依赖 hashCode 和 equals 方法</td>         </tr>        <tr>            <td style="text-align: center;">static &lt;T&gt; Stream&lt;T&gt; concat(Stream a, Stream b)</td>             <td style="text-align: center;">合并a和b两个流为一个流</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qx2oxelckj50kh"></i><span>java</span><div class="collapse show" id="collapse-qx2oxelckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;张飞飞&quot;</span>);<br><br>        <span class="hljs-comment">//过滤元素：重写了Predicate接口中的test方法</span><br>        list.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).forEach(s-&gt; System.out.println(s));<br>        <span class="hljs-comment">//获取前两个元素</span><br>        list.stream().limit(<span class="hljs-number">2</span>).forEach(s-&gt; System.out.println(s));<br>        <span class="hljs-comment">//跳过前两个元素</span><br>        list.stream().skip(<span class="hljs-number">2</span>).forEach(s-&gt; System.out.println(s));<br><br>        <span class="hljs-comment">//合并流</span><br>        Stream&lt;String&gt; stream1 = list.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>));<br>        Stream&lt;String&gt; stream2 = Stream.of(<span class="hljs-string">&quot;周六&quot;</span>, <span class="hljs-string">&quot;顾七&quot;</span>);<br>        Stream&lt;String&gt; stream3 = Stream.concat(stream1, stream2);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>中间加工方法</strong></p><p>除此之外还有一个 <font class="code-word"><code>map</code></font> 加工方法，用于加工流中元素：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">R&gt; Stream&lt;R&gt; map(Function&it;? super T, ? extends R&gt; mapper)</td>             <td style="text-align: center;">将流中元素&lt;T&gt;进行加工，并返回加工后的流&lt;R</td>         </tr>      </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-sv8va0lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-sv8va0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6k01aelckj50kh"></i><span>java</span><div class="collapse show" id="collapse-6k01aelckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;张飞飞&quot;</span>);<br>        <br>        <span class="hljs-comment">//使用匿名内部类，s为加工前的流中元素，return的为加工后的。</span><br>        list.stream().map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, Object&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(s);<br>            &#125;<br>        &#125;).forEach(s-&gt; System.out.println(s));<br><br>        <span class="hljs-comment">//采用lambda表达式简化</span><br>        list.stream().map(s -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(s)).forEach(s-&gt; System.out.println(s));<br>        <br>        <span class="hljs-comment">//输出：原元素均被加工成了Students类对象 </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-3-流终结方法"><a href="#5-3-流终结方法" class="headerlink" title="5.3 流终结方法"></a>5.3 流终结方法</h2><p>一个 Stream 流只能有一个终结方法，是流水线上的<font class="word-stress">最后一个操作</font>，后续无法再有其他操作：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void  forEach(Consumer  action)</td>             <td style="text-align: center;">对此流的每个元素执行遍历操作</td>         </tr>          <tr>            <td style="text-align: center;">long count()</td>             <td style="text-align: center;">返回此流中的元素数</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ix399glckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ix399glckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;张飞飞&quot;</span>);<br><br>        <span class="hljs-comment">//未使用终结方法，但本次使用后流将无法再进行操作</span><br>        Stream&lt;String&gt; stream1 = list.stream();<br>        stream1.filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>)).skip(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//创建流时用链式编程使用方法并不算是使用的一次，仍可在之后使用一次</span><br>        Stream&lt;String&gt; stream2 = list.stream().skip(<span class="hljs-number">2</span>);<br>        stream2.forEach(s -&gt; System.out.println(s));<br><br>        <span class="hljs-comment">//使用终结方法</span><br>        Stream&lt;String&gt; stream3 = list.stream();<br>        stream3.forEach(s -&gt; System.out.println(s));<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-4-收集流"><a href="#5-4-收集流" class="headerlink" title="5.4 收集流"></a>5.4 收集流</h2><p><strong>收集流的方法</strong></p><p><font class="code-word"><code>Stream</code></font> 中提供了将流收集到集合或数组中的方法 <font class="code-word"><code>collect</code></font> ，形参为 <font class="code-word"><code>Collectors</code></font> 中的方法。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">R collect(Collector collector)</td>             <td style="text-align: center;">开始收集 Stream 流，指定收集器</td>         </tr>          <tr>            <td style="text-align: center;">Object[] toArray()</td>             <td style="text-align: center;">将 Stream 流收集到数组</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1npalhlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1npalhlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//把元素收集到数组中</span><br>Stream&lt;String&gt; stream = list.stream();<br>Object[] arr = stream.toArray();<br>System.out.println(Arrays.toString(arr));<br></code></pre></td></tr></table></div></figure><p><strong>收集到 Collection 集合</strong></p><p><font class="code-word"><code>Collectors</code></font> 工具类中提供了具体的收集方式收集到 List 和 Set 集合的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static &lt;T&gt; Collector toList()</td>             <td style="text-align: center;">把元素收集到 List 集合中</td>         </tr>          <tr>            <td style="text-align: center;">public static &lt;T&gt; Collector toSet()</td>             <td style="text-align: center;">把元素收集到 Set 集合中 ，去重同 Set 集合</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-6pcei9lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-6pcei9lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>        <br><span class="hljs-comment">//把元素收集到List集合中</span><br>        Stream&lt;String&gt; stream1 = list.stream();<br>        List&lt;String&gt; listS = stream1.collect(Collectors.toList());<br>        <span class="hljs-comment">//现在最新的JDK中在Stream中添加了toList，也可以直接调用</span><br>        <br><span class="hljs-comment">//把元素收集到Set集合中</span><br>        Stream&lt;String&gt; stream2 = list.stream();<br>        Set&lt;String&gt; setS =stream2.collect(Collectors.toSet());<br>        System.out.println(setS);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>收集到 Map 集合</strong></p><p><font class="code-word"><code>Collectors</code></font> 中同样提供了把元素收集到 Map 集合的方法，根据是否需要去重决定了不同的形参和返回类型：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static ... toMap(...)</td>             <td style="text-align: center;">把元素收集到 Map 集合中，见后文</td>         </tr>    </body></table><ul><li><p><strong>键元素不需要去重</strong>：</p><p>方法格式如下：</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-l9hdv9lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-l9hdv9lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, K, U&gt; Collector&lt;T, ?, Map&lt;K, U&gt;&gt; toMap(<br>     Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">K</span>&gt; keyMapper,             <span class="hljs-comment">//形参一：存入键</span><br>     Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">U</span>&gt; valueMapper)           <span class="hljs-comment">//形参二：存入值</span><br></code></pre></td></tr></table></div></figure><p>关于形参 <font class="code-word"><code>Function</code></font> 接口有两种传入方式：</p><ul><li>Function 接口创建匿名内部实现类，重写方法：形参为遍历到的集合元素，返回值为最终存入 Map 的键或值。</li><li>Function 接口调用 <font class="code-word"><code>identity()</code></font> 方法：最终存入 Map 的即遍历到的集合元素自身。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lg2fs0lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-lg2fs0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-type">int</span> id;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1k5vp6lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1k5vp6lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        List&lt;Students&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">2</span>));<br><br>        <span class="hljs-comment">//map的键为id，map的值为Studens对象</span><br>        Stream&lt;Students&gt; stream1 = list.stream();<br>        Map&lt;Integer, Students&gt; map1 = stream1.collect(Collectors.toMap(s -&gt; s.id, Function.identity()));<br><br>        <span class="hljs-comment">//map的键为name，map的值为Studens对象</span><br>        Stream&lt;Students&gt; stream2 = list.stream();<br>        Map&lt;String, Students&gt; map2 =  stream2.collect(<br>            Collectors.toMap(Students::getName, Function.identity()));    <br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><strong>键元素需要去重</strong>：</p><p>调用如下方法：</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-thb9sxlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-thb9sxlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, K, U&gt; Collector&lt;T, ?, Map&lt;K, U&gt;&gt; toMap(<br>    Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">K</span>&gt; keyMapper,             <span class="hljs-comment">//形参一：存入键  </span><br>    Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">U</span>&gt; valueMapper,           <span class="hljs-comment">//形参二：存入值</span><br>    BinaryOperator&lt;U&gt; mergeFunction)                        <span class="hljs-comment">//形参三：用于匿名内部类自定去重规则</span><br></code></pre></td></tr></table></div></figure><p>去重规则如下：</p><ul><li>非自定义类：键的元素重复不会自动去重，必须自定去重规则。</li><li>自定义类：键重复的认定规则同 <a href="post/28199/#4-2-Set-%E5%8E%BB%E9%87%8D">Set 去重</a>，若重写了 <font class="code-word"><code>hashCode()</code></font> 和 <font class="code-word"><code>equals()</code></font> 且内容重复、或本身就是相同元素，则应自定去重规则。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-4qbfr5lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-4qbfr5lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-type">int</span> id;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-7r91y1lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-7r91y1lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;Students&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">//map的键为id，map的值为Studens对象，自定去重规则为两个相同的元素保留先来者(张三)</span><br>        Stream&lt;Students&gt; stream1 = list.stream();<br>        Map&lt;Integer, Students&gt; map1 = stream1.collect(<br>                Collectors.toMap(s -&gt; s.id, Function.identity(), (n1, n2) -&gt; n1));<br>                <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合 (一) - Java SE</title>
    <link href="/post/28199/"/>
    <url>/post/28199/</url>
    
    <content type="html"><![CDATA[<h1 id="1-集合体系结构"><a href="#1-集合体系结构" class="headerlink" title="1. 集合体系结构"></a>1. 集合体系结构</h1><p>集合中包含两个大类：</p><ul><li><p><font class="code-word"><code>Collection</code></font> ：单列集合，每个元素（数据）只包含一个值。</p></li><li><p><font class="code-word"><code>Map</code></font> ：双列集合，每个元素包含两个值（键值对）。</p></li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-6.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><p>当用集合中使用泛型指定之后，说明该集合只能存储这种类型的元素，当你想存储其他元素的时候，编译器会报错。</p><h1 id="2-Collection-集合"><a href="#2-Collection-集合" class="headerlink" title="2. Collection 集合"></a>2. Collection 集合</h1><h2 id="2-1-Collection-体系"><a href="#2-1-Collection-体系" class="headerlink" title="2.1 Collection 体系"></a>2.1 Collection 体系</h2><p><strong>类的概述</strong></p><p><font class="code-word"><code>Collection</code></font> 是单列集合，共包含两个大类：</p><ul><li><font class="code-word"><code>List</code></font>  系列集合：添加的元素是有序、可重复、有索引。<ul><li>ArrayList ：有序、可重复、有索引。</li><li>LinkedList ：有序、可重复、有索引。</li></ul></li><li><font class="code-word"><code>Set</code></font>  系列集合：添加的元素是无序、不重复、无索引。<ul><li>HashSet ：无序、不重复、无索引。</li><li>LinkedHashSet ： 有序、不重复、无索引。</li><li>TreeSet：按照大小默认升序排序、不重复、无索引。</li></ul></li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-5.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><p><strong>实现类特点</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>实现类</th>            <th style="text-align: center;" width=50%>集合特点</th>            <th style="text-align: center;" width=25%>底层原理</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">ArrayList 集合</td>             <td style="text-align: center;">元素可以重复，有索引，索引查询快</td>             <td style="text-align: center;">数组</td>          </tr>          <tr>            <td style="text-align: center;">LinkedList 集合</td>             <td style="text-align: center;">元素可以重复，有索引，增删首尾操作快</td>             <td style="text-align: center;">链表</td>          </tr>         <tr>            <td style="text-align: center;">HashSet 集合</td>             <td style="text-align: center;">增删改查都快，但是元素不重复、无序、无索引</td>             <td style="text-align: center;">哈希表</td>          </tr>         <tr>            <td style="text-align: center;">LinkedHashSet 集合</td>             <td style="text-align: center;">增删改查都快，元素有序，但是元素不重复、无索引</td>             <td style="text-align: center;">哈希表和双链表</td>          </tr>         <tr>            <td style="text-align: center;">TreeSet 集合</td>             <td style="text-align: center;">对对象进行排序</td>             <td style="text-align: center;">红黑树</td>          </tr>     </body></table><p><strong>类创建对象</strong></p><p>创建 <font class="code-word"><code>Collection</code></font> 对象只能用其实现类去创建，然后可以基于多态用父类类型 Collection 接收。</p><figure class="highlight haxe"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8111eflckj50ki"></i><span>haxe</span><div class="collapse show" id="collapse-8111eflckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//创建集合对象</span><br>Collection&lt;<span class="hljs-keyword">String</span>&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></div></figure><h2 id="2-2-Collection-方法"><a href="#2-2-Collection-方法" class="headerlink" title="2.2 Collection 方法"></a>2.2 Collection 方法</h2><p><font class="code-word"><code>Collection</code></font> 是单列集合的父接口，它的功能是全部单列集合都可以继承使用的：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public boolean add(E e)</td>             <td style="text-align: center;">把给定的对象添加到当前集合中</td>          </tr>          <tr>            <td style="text-align: center;">public void clear()</td>             <td style="text-align: center;">清空集合中所有的元素</td>          </tr>        <tr>            <td style="text-align: center;">public boolean remove(E e)</td>             <td style="text-align: center;">把给定的对象在当前集合中删除</td>          </tr>        <tr>            <td style="text-align: center;">public boolean contains(Object obj)</td>             <td style="text-align: center;">判断当前集合中是否包含给定的对象</td>          </tr>        <tr>            <td style="text-align: center;">public boolean isEmpty()</td>             <td style="text-align: center;">判断当前集合是否为空</td>          </tr>        <tr>            <td style="text-align: center;">public int size()</td>             <td style="text-align: center;">返回集合中元素的个数</td>          </tr>        <tr>            <td style="text-align: center;">public Object[] toArray()</td>             <td style="text-align: center;">把集合中的元素，存储到数组中</td>          </tr>        <tr>            <td style="text-align: center;">Iterator&lt;E&gt; iterator()</td>             <td style="text-align: center;">返回此集合中元素的迭代器</td>          </tr>    </body></table><h2 id="2-3-Collection-遍历"><a href="#2-3-Collection-遍历" class="headerlink" title="2.3 Collection 遍历"></a>2.3 Collection 遍历</h2><h3 id="2-3-1-迭代器"><a href="#2-3-1-迭代器" class="headerlink" title="2.3.1 迭代器"></a>2.3.1 迭代器</h3><p><strong>概述</strong></p><p>迭代器在 Java 中的代表是 <font class="code-word"><code>Iterator</code></font>，迭代器是集合的专用的遍历方式，得到迭代器对象后默认指向当前集合的索引0。</p><p>Iterator 中常用方法有：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=30%>方法名称</th>            <th style="text-align: center;" width=70%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">boolean hasNext()</td>             <td style="text-align: center;">询问当前位置是否有元素存在，存在返回 true，不存在返回 false</td>          </tr>          <tr>            <td style="text-align: center;">E next()</td>             <td style="text-align: center;">获取当前位置的元素，并同时将迭代器对象移向下一个位置，注意防止取出越界</td>          </tr>          <tr>            <td style="text-align: center;">remove()</td>             <td style="text-align: center;">删除上次调用 next() 时返回的元素，即指针指向的元素</td>          </tr>      </body></table><p><strong>并发修改问题</strong></p><p>使用迭代器遍历元素时，使用集合的 remove 方法去删除元素会出现集合并发修改异常，应使用迭代器的 <font class="code-word"><code>remove</code></font>  方法去删除。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tkgrh0lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-tkgrh0lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">//创建当前集合的迭代器对象</span><br>Iterator&lt;String&gt; it = list.iterator();<br>        <br>        <span class="hljs-comment">//利用迭代器遍历元素</span><br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            System.out.println(it.next());<br>            it.remove();<br>        &#125;<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-3-2-for-each-循环"><a href="#2-3-2-for-each-循环" class="headerlink" title="2.3.2 for each 循环"></a>2.3.2 for each 循环</h3><p>使用 <font class="code-word"><code>for each</code></font> 循环遍历元素时，不能增删集合中的元素，否则会出现集合并发修改异常。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qyqd0hlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-qyqd0hlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//利用foreach循环遍历元素</span><br>        <span class="hljs-keyword">for</span> (String str : list) &#123;<br>        System.out.println(str);<br>        &#125;<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="2-3-3-lambda-表达式"><a href="#2-3-3-lambda-表达式" class="headerlink" title="2.3.3 lambda 表达式"></a>2.3.3 lambda 表达式</h3><p><font class="code-word"><code>Collection</code></font> 重写了 <font class="code-word"><code>Iterable</code></font> 接口中的 <font class="code-word"><code>forEach</code></font> 方法，JDK8 推出的 lambda 表达式，提供了一种结合了 forEach 方法的更简单、更直接的遍历集合的方式：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">default void forEach(Consumer<? super T> action)</td>             <td style="text-align: center;">结合lambda遍历集合</td>          </tr>       </body></table><p>使用匿名内部类或 lambda 表达式循环遍历元素时，不能增删集合中的元素，否则会出现集合并发修改异常。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-42nw2jlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-42nw2jlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//未用lambda表达式简化的匿名内部类遍历，accept的形参即是依次获取的集合中的元素</span><br>        list.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String str)</span> &#123;<br>                System.out.println(str);<br>            &#125;<br>        &#125;);<br>        <br>        <span class="hljs-comment">//使用lambda表达式遍历元素</span><br>        list.forEach( str -&gt; System.out.println(str));<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-4-Collection-存自定类"><a href="#2-4-Collection-存自定类" class="headerlink" title="2.4 Collection 存自定类"></a>2.4 Collection 存自定类</h2><p>栈中对象变量存储的是指向堆中<font class="word-stress">集合的地址值</font>，而集合中存储的是指向堆中<font class="word-stress">元素对象的地址值</font>：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-7.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-gbu8twlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-gbu8twlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2ct3gklckj50ki"></i><span>java</span><div class="collapse show" id="collapse-2ct3gklckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>Collection&lt;People&gt; listPeople = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//存储自定义类对象</span><br>        listPeople.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>());<br>        <br>        <span class="hljs-comment">//遍历集合中自定义类对象</span><br>        <span class="hljs-keyword">for</span> (People person : listPeople) &#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-4-打印集合元素"><a href="#2-4-打印集合元素" class="headerlink" title="2.4 打印集合元素"></a>2.4 打印集合元素</h2><p>打印集合元素有以下两种情况：</p><ul><li><strong>非自定义类</strong>：采用 <font class="code-sentence"><code>System.out.println()</code></font> 即可直接打印内容。</li><li><strong>自定义类</strong>：直接采用 <font class="code-sentence"><code>System.out.println()</code></font> 打印得到的是里面元素地址值，若想打印各元素属性，需重写类中 <font class="code-word"><code>toString()</code></font> 方法。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-l3ukollckj50ki"></i><span>java</span><div class="collapse show" id="collapse-l3ukollckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span>&#123;<br>    <br>    String name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">//重写toString方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Students&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>&#125; <br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xgt7e2lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-xgt7e2lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Students&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        list1.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>        list2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>));<br>        <br>        System.out.println(list1);    <span class="hljs-comment">//输出：[李四]</span><br>        System.out.println(list2);    <span class="hljs-comment">//输出：[Students&#123;name=&#x27;张三&#x27;&#125;]</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-List-集合"><a href="#3-List-集合" class="headerlink" title="3. List 集合"></a>3. List 集合</h1><h2 id="3-1-List-方法"><a href="#3-1-List-方法" class="headerlink" title="3.1 List 方法"></a>3.1 List 方法</h2><p><strong>类的概述</strong></p><p><font class="code-word"><code>List</code></font> 系列集合特点（ArrayList、LinkedList ）为有序、可重复、有索引：</p><ul><li>有序：存储和取出的元素顺序一致。</li><li>有索引：可以通过索引操作元素。</li><li>可重复：存储的元素可以重复。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vq61gjlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-vq61gjlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></div></figure><p><strong>类的方法</strong></p><p><font class="code-word"><code>List</code></font> 集合因为支持索引，所以多了很多索引操作的独特方法，其他 <font class="code-word"><code>Collection</code></font> 的功能 List 也都继承了：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">void add(int index, E element)</td>             <td style="text-align: center;">在此集合中的指定位置插入指定的元素</td>          </tr>           <tr>            <td style="text-align: center;">E remove(int index)</td>             <td style="text-align: center;">删除指定索引处的元素，返回被删除的元素</td>          </tr>         <tr>            <td style="text-align: center;">E set(int index, E element)</td>             <td style="text-align: center;">修改指定索引处的元素，返回被修改的元素</td>          </tr>         <tr>            <td style="text-align: center;">E get(int index)</td>             <td style="text-align: center;">返回指定索引处的元素</td>          </tr>     </body></table><h2 id="3-2-List-遍历"><a href="#3-2-List-遍历" class="headerlink" title="3.2 List 遍历"></a>3.2 List 遍历</h2><p>除去 Collection 集合统一可以使用的三种遍历方式外，<font class="code-word"><code>List</code></font> 集合因为有索引，所以还可以使用普通 <font class="code-word"><code>for</code></font> 循环遍历。</p><p>使用 for 循环遍历元素时，可以删除集合中的元素，但要注意索引问题。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fquggalckj50ki"></i><span>java</span><div class="collapse show" id="collapse-fquggalckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//利用for循环遍历元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;哈哈&quot;</span>.equals(list.get(i))) &#123;<br>                list.remove(i);<br>                i--;<br>            &#125;<br>        &#125;<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="3-3-ArrayList-集合"><a href="#3-3-ArrayList-集合" class="headerlink" title="3.3 ArrayList 集合"></a>3.3 ArrayList 集合</h2><h3 id="3-3-1-ArrayList-底层"><a href="#3-3-1-ArrayList-底层" class="headerlink" title="3.3.1 ArrayList 底层"></a>3.3.1 ArrayList 底层</h3><p><font class="code-word"><code>ArrayList</code></font> 底层是基于<font class="word-stress">数组</font>实现的：根据索引定位元素快，增删需要做元素的移位操作。</p><p>第一次创建 ArrayList 集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组，当当前数组存满时会创建一个新的扩容后的数组并做数据迁移，每次扩容为原来的1.5倍。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-8.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><h3 id="3-3-2-ArrayList-方法"><a href="#3-3-2-ArrayList-方法" class="headerlink" title="3.3.2 ArrayList 方法"></a>3.3.2 ArrayList 方法</h3><p>因为往数组末尾添加元素效率不受影响，<font class="word-stress">检索查找</font>某个元素比较多时数组效率高，所以 <font class="code-word"><code>ArrayList</code></font> 也有很多相关的方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public boolean add(E e)</td>             <td style="text-align: center;">将指定的元素追加到此集合的末尾</td>          </tr>           <tr>            <td style="text-align: center;">public void add(int index, E element)</td>             <td style="text-align: center;">在此集合中的指定位置插入指定的元素</td>          </tr>           <tr>            <td style="text-align: center;">public E get(int index)</td>             <td style="text-align: center;">返回指定索引处的元素</td>          </tr>           <tr>            <td style="text-align: center;">public int size()</td>             <td style="text-align: center;">返回集合中的元素的个数</td>          </tr>           <tr>            <td style="text-align: center;">public E remove(int index)</td>             <td style="text-align: center;">删除指定索引处的元素，返回被删除的元素</td>          </tr>           <tr>            <td style="text-align: center;">public boolean remove(Object o)</td>             <td style="text-align: center;">删除指定的元素，返回删除是否成功</td>          </tr>           <tr>            <td style="text-align: center;">public E set(int index, E element)</td>             <td style="text-align: center;">修改指定索引处的元素，返回被修改的元素</td>          </tr>       </body></table><h2 id="3-4-LinkedList-集合"><a href="#3-4-LinkedList-集合" class="headerlink" title="3.4 LinkedList 集合"></a>3.4 LinkedList 集合</h2><h3 id="3-4-1-LinkedList-底层"><a href="#3-4-1-LinkedList-底层" class="headerlink" title="3.4.1 LinkedList 底层"></a>3.4.1 LinkedList 底层</h3><p><font class="code-word"><code>LinkedList</code></font> 底层数据结构是<font class="word-stress">双链表</font>，查询慢，首尾操作的速度是极快的。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-9.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><h3 id="3-4-2-LinkedList-方法"><a href="#3-4-2-LinkedList-方法" class="headerlink" title="3.4.2 LinkedList 方法"></a>3.4.2 LinkedList 方法</h3><p>由于 <font class="code-word"><code>LinkedList</code></font> 集合<font class="word-stress">首尾操作</font>的速度是极快的，所以多了很多首尾操作的特有API：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public void addFirst(E e)</td>             <td style="text-align: center;">在该列表开头插入指定的元素</td>          </tr>           <tr>            <td style="text-align: center;">public void addLast(E e)</td>             <td style="text-align: center;">将指定的元素追加到此列表的末尾</td>          </tr>           <tr>            <td style="text-align: center;">public E getFirst()</td>             <td style="text-align: center;">返回此列表中的第一个元素</td>          </tr>           <tr>            <td style="text-align: center;">public E getLast()</td>             <td style="text-align: center;">返回此列表中的最后一个元素</td>          </tr>           <tr>            <td style="text-align: center;">public E removeFirst()</td>             <td style="text-align: center;">从此列表中删除并返回第一个元素</td>          </tr>           <tr>            <td style="text-align: center;">public E removeLast()</td>             <td style="text-align: center;">从此列表中删除并返回最后一个元素</td>          </tr>       </body></table><h1 id="4-Set-集合"><a href="#4-Set-集合" class="headerlink" title="4. Set 集合"></a>4. Set 集合</h1><h2 id="4-1-Set-概述"><a href="#4-1-Set-概述" class="headerlink" title="4.1 Set 概述"></a>4.1 Set 概述</h2><p><strong>类的概述</strong></p><p>Set 集合的普遍特点是无序、不重复、无索引：</p><ul><li>无序：存取顺序不一致，但每次的无序是固定的顺序，即取出的顺序虽然与存储顺序不同，但并非每次随机，而是有固定顺序。</li><li>不重复：可以去除重复。</li><li>无索引：没有带索引的方法，所以不能使用普通 for 循环遍历，也不能通过索引来获取元素。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-oiutpylckj50ki"></i><span>java</span><div class="collapse show" id="collapse-oiutpylckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建集合对象</span><br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br></code></pre></td></tr></table></div></figure><p><strong>类的方法</strong></p><p><font class="code-word"><code>Set</code></font> 集合的功能上基本上与 Collection 的 API 一致。</p><p><strong>类的底层</strong></p><p><font class="code-word"><code>Set</code></font> 系列集合的底层就是 <a href="/post/44675/#1-Map-%E9%9B%86%E5%90%88">Map</a> 实现的，只是 Set 集合中的元素只要键数据，不要值数据。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hi00u6lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-hi00u6lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;    <br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();   <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-Set-去重"><a href="#4-2-Set-去重" class="headerlink" title="4.2 Set 去重"></a>4.2 Set 去重</h2><p><font class="code-word"><code>Set</code></font> 集合会进行元素去重，先比较由地址值转化的 hashCode 值，再用 equals() 比较属性值，均相同则视为重复元素不会添加。</p><p>对于自定义类来说，如果希望 Set 集合认为两个内容一样的对象是重复的，必须重写类的 <font class="code-word"><code>hashCode()</code></font> 和 <font class="code-word"><code>equals</code></font> 方法。<a href="/post/45824/#1-2-equals-%E9%87%8D%E5%86%99">equals 方法重写</a>详见前文。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-741w96lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-741w96lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//未重写hashCode()和equals()方法的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students1</span> &#123;<br>    <br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students1</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z5pmv9lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-z5pmv9lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">//重写hashCode()和equals()方法的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students2</span> &#123;<br><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students2</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Students2</span> <span class="hljs-variable">students2</span> <span class="hljs-operator">=</span> (Students2) o;<br>        <span class="hljs-keyword">return</span> age == students2.age &amp;&amp; Objects.equals(name, students2.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pyt0bilckj50ki"></i><span>java</span><div class="collapse show" id="collapse-pyt0bilckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Set&lt;Students1&gt; set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        Set&lt;Students2&gt; set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        set1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students1</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">33</span>));<br>        set1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students1</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">33</span>));<br><br>        set2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students2</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">33</span>));<br>        set2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students2</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">33</span>));<br><br>        System.out.println(set1);    <span class="hljs-comment">//打印出来2个元素</span><br>        System.out.println(set2);    <span class="hljs-comment">//打印出来1个元素</span><br>         <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-3-HashSet-集合"><a href="#4-3-HashSet-集合" class="headerlink" title="4.3 HashSet 集合"></a>4.3 HashSet 集合</h2><p><font class="code-word"><code>HashSet</code></font> 集合底层采取<font class="word-stress">哈希表</font>存储的数据：哈希表是一种对于增删改查数据性能都较好的结构。JDK8之前的，底层使用数组+链表组成；JDK8 开始后，底层采用<font class="word-stress">数组+链表+红黑树</font>组成。</p><p>HashSet 集合的底层就是基于 <a href="/post/44675/#2-1-HashMap-%E9%9B%86%E5%90%88">HashMap</a> 实现的。</p><p>HashSet 底层流程如下：</p><ul><li><p>创建一个默认长度16，默认加载因为0.75的数组。</p></li><li><p>根据元素的哈希值跟数组的长度计算出应存入的位置。</p></li><li><p>判断当前位置是否为 <font class="code-word"><code>null</code></font>，如果是 null 直接存入，如果位置不为 null，表示有元素，则调用 <font class="code-word"><code>equals()</code></font> 方法比较属性值，如果一样，则不存，如果不一样，则存入数组。</p><ul><li><p>JDK7 新元素占老元素位置，指向老元素。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-10.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /></li><li><p>JDK8 中新元素挂在老元素下面，当链表长度超过8的时候，自动转换为红黑树。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-11.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /></li></ul></li><li><p>当数组存满到 16*0.75&#x3D;12 时，就自动扩容，每次扩容原先的两倍。</p></li></ul><h2 id="4-4-LinkedHashSet-集合"><a href="#4-4-LinkedHashSet-集合" class="headerlink" title="4.4 LinkedHashSet 集合"></a>4.4 LinkedHashSet 集合</h2><p><font class="code-word"><code>LinkedHashSet</code></font> 集合有序、不重复、无索引。这里的有序指的是保证存储和取出的元素顺序一致。</p><p>LinkedHashSet 底层数据结构是依然是<font class="word-stress">哈希表</font>，只是每个元素又额外的多了一个<font class="word-stress">双链表</font>的机制记录存储的顺序。</p><p>LinkedHashSet 集合的底层就是基于 <a href="/post/44675/#2-2-LinkedHashMap-%E9%9B%86%E5%90%88">LinkedHashMap</a> 实现的。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-12.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:40%;" /><h2 id="4-5-TreeSet-集合"><a href="#4-5-TreeSet-集合" class="headerlink" title="4.5 TreeSet 集合"></a>4.5 TreeSet 集合</h2><h3 id="4-5-1-TreeSet-底层"><a href="#4-5-1-TreeSet-底层" class="headerlink" title="4.5.1 TreeSet 底层"></a>4.5.1 TreeSet 底层</h3><p><font class="code-word"><code>TreeSet</code></font> 不重复、无索引、可排序。可排序指按照元素的大小默认升序（有小到大）排序。</p><p>TreeSet 底层是基于<font class="word-stress">红黑树</font>的数据结构实现排序的，增删改查性能都较好。（注意：TreeSet集合是一定要排序的）</p><p>TreeSet 集合的底层就是基于 <a href="/post/44675/#2-3-TreeMap-%E9%9B%86%E5%90%88">TreeMap</a> 实现的。</p><h3 id="4-5-2-TreeSet-排序"><a href="#4-5-2-TreeSet-排序" class="headerlink" title="4.5.2 TreeSet 排序"></a>4.5.2 TreeSet 排序</h3><p><strong>排序返回值规则</strong></p><p>下述比较器 <font class="code-word"><code>Comparator</code></font> 和自定比较方法 <font class="code-word"><code>compareTo(E o)</code></font> 的返回值规则为：</p><ul><li>如果认为第一个元素大于第二个元素：返回正整数即可。</li><li>如果认为第一个元素小于第二个元素：返回负整数即可。</li><li>如果认为第一个元素等于第二个元素：返回 0 即可，此时 TreeSet 集合只会保留一个元素，认为两者重复。</li></ul><p>该返回值如果是 Double 类型强转 int 的话要特别注意。</p><p><strong>TreeSet 排序规则</strong></p><ul><li><p>数值类型：Integer ，Double ，官方默认按照大小进行升序排序。</p></li><li><p>字符串类型：默认按照首字符的编号升序排序。</p></li><li><p>自定义类型：TreeSet 无法直接排序，需要手动制定排序规则，共有两种方法。</p><p>​                       如果 TreeSet 集合存储的对象有实现比较规则，集合也自带比较器，默认使用集合自带的比较器排序。</p><ul><li><p><strong>方法一</strong>：让自定义的类实现 <font class="code-word"><code>Comparable</code></font>  接口重写里面的 <font class="code-word"><code>compareTo(E o)</code></font> 方法来定制比较规则。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3f3ptblckj50ki"></i><span>java</span><div class="collapse show" id="collapse-3f3ptblckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Students&gt; &#123;<br><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//方法一：类自定义比较规则：按年龄排升序，且年龄相等不视作重复元素，避开返回0</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Students o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age &gt;= <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//toString()方法略</span><br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pd4j5plckj50ki"></i><span>java</span><div class="collapse show" id="collapse-pd4j5plckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Set&lt;Students&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">12</span>));<br><br>        System.out.println(set);    <span class="hljs-comment">//输出结果：[Students&#123;name=&#x27;李四&#x27;, age=12&#125;, Students&#123;name=&#x27;张三&#x27;, age=23&#125;]</span><br>     <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><strong>方法二</strong>：TreeSet 集合有参数构造器，可以设置 <font class="code-word"><code>Comparator</code></font> 接口对应的比较器对象，来定制比较规则。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ukv420lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-ukv420lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>   <br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>    <span class="hljs-comment">//toString()方法略</span><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-j3m0b3lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-j3m0b3lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//方法二：匿名内部类重写集合比较器中的方法，按年龄排升序，且年龄相等不视作重复元素，避开返回0</span><br>        Set&lt;Students&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Students&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Students o1, Students o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.age - o2.age &gt;= <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//方法二：使用lambda表达式简化的匿名内部类</span><br>        Set&lt;Students&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;((o1, o2) -&gt; o1.age - o2.age &gt;= <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>);<br>        <br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">12</span>));<br><br>        System.out.println(set);    <span class="hljs-comment">//输出结果：[Students&#123;name=&#x27;李四&#x27;, age=12&#125;, Students&#123;name=&#x27;张三&#x27;, age=23&#125;]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul></li></ul><h1 id="5-集合工具类-Collections"><a href="#5-集合工具类-Collections" class="headerlink" title="5. 集合工具类 Collections"></a>5. 集合工具类 Collections</h1><p><strong>类的方法</strong></p><p><font class="code-word"><code>Collections</code></font> 并不属于集合，是用来操作集合的工具类，其针对 <font class="code-word"><code>Collection</code></font> 集合有相关的API：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static&it;T&gt; boolean addAll(Collection<? super T> c, T... elements)</td>             <td style="text-align: center;">给集合对象批量添加元素</td>          </tr>            <tr>            <td style="text-align: center;">public static void shuffle(List<?> list)</td>             <td style="text-align: center;">打乱List集合元素的顺序</td>          </tr>      </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-p1vzgxlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-p1vzgxlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//批量添加元素</span><br>        Collections.addAll(list, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>        <span class="hljs-comment">//打乱集合元素顺序，每次运行打乱的顺序均不一样</span><br>        Collections.shuffle(list);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>类的排序方法</strong></p><p>Collections 还有对 <font class="code-word"><code>List</code></font> 集合排序的 API：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static &lt;T&gt; void sort(List&lt;T&gt; list)</td>             <td style="text-align: center;">将集合中元素按照默认规则排序</td>          </tr>            <tr>            <td style="text-align: center;">public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator<? super T> c)</td>             <td style="text-align: center;">将集合中元素按照指定规则排序</td>          </tr>      </body></table>对于非自定义类和自定义类的排序规则见 [TreeSet 排序](#4-5-2-TreeSet-排序)中所述，对于自定义类，有两种方法可以制定排序规则：<ul><li><p><strong>方法一</strong>：让自定义的类实现 <font class="code-word"><code>Comparable</code></font> 接口重写里面的 <font class="code-word"><code>compareTo(E o)</code></font> 方法来定制比较规则。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fpxyxclckj50ki"></i><span>java</span><div class="collapse show" id="collapse-fpxyxclckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Students&gt; &#123;<br><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//类自定义比较规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Students o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<br>    &#125;<br>    <br>    <span class="hljs-comment">//toString()方法略</span><br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-sxjhv3lckj50ki"></i><span>java</span><div class="collapse show" id="collapse-sxjhv3lckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        List&lt;Students&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">12</span>));<br>        <br>        <span class="hljs-comment">//使用表格中第一个方法</span><br>        Collections.sort(list);<br><br>        System.out.println(list);    <span class="hljs-comment">//输出结果：[Students&#123;name=&#x27;李四&#x27;, age=12&#125;, Students&#123;name=&#x27;张三&#x27;, age=23&#125;]</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><strong>方法二</strong>：可以设置 <font class="code-word"><code>Comparator</code></font> 接口对应的比较器对象，来定制比较规则。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-uduilqlckj50ki"></i><span>java</span><div class="collapse show" id="collapse-uduilqlckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>   <br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>    <span class="hljs-comment">//toString()方法略</span><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kdv50klckj50ki"></i><span>java</span><div class="collapse show" id="collapse-kdv50klckj50ki"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        List&lt;Students&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">12</span>));<br>        <br>        <span class="hljs-comment">//使用表格中第二个方法：匿名内部类重写集合比较器中的方法</span><br>        Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Students&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Students o1, Students o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.age - o2.age;<br>            &#125;<br>        &#125;);<br>        <br>        <span class="hljs-comment">//使用lambda表达式简化代码</span><br>        Collections.sort(list, (o1, o2) -&gt; o1.age - o2.age);<br>        <br>        System.out.println(list);    <span class="hljs-comment">//输出结果：[Students&#123;name=&#x27;李四&#x27;, age=12&#125;, Students&#123;name=&#x27;张三&#x27;, age=23&#125;]</span><br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>泛型 - Java SE</title>
    <link href="/post/2053/"/>
    <url>/post/2053/</url>
    
    <content type="html"><![CDATA[<h1 id="1-泛型的使用"><a href="#1-泛型的使用" class="headerlink" title="1. 泛型的使用"></a>1. 泛型的使用</h1><p><strong>概念</strong></p><p>泛型是 JDK5 中引入的特性，它限制了能添加进集合的类型，可以在<font class="word-stress">编译阶段约束操作的数据类型</font>，并进行检查。实际在运行时类并未收到泛型的约束。</p><p><strong>语法</strong></p><p>泛型格式为 <font class="code-word"><code>&lt;数据类型&gt;</code></font> ，其数据类型只支持引用数据类型。</p><p>在未给集合指定任何类型时，默认所有的数据类型都是 <font class="code-word"><code>Object</code></font>  类型。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z6bz3rlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-z6bz3rlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//未使用泛型：默认数据类型Object</span><br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br><span class="hljs-comment">//使用泛型：数据类型String</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></div></figure><h1 id="2-泛型的定义"><a href="#2-泛型的定义" class="headerlink" title="2. 泛型的定义"></a>2. 泛型的定义</h1><h2 id="2-1-泛型类"><a href="#2-1-泛型类" class="headerlink" title="2.1 泛型类"></a>2.1 泛型类</h2><p>定义类时同时定义了泛型的类就是泛型类，其原理是把出现泛型变量的地方全部替换成传输的真实数据类型。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-0vb3v8lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-0vb3v8lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义泛型类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span>&lt;E&gt; &#123;<br>    <br>    <span class="hljs-comment">//成员类型可以由外部输入的类型E指定</span><br>    E member;<br>    <br>    <span class="hljs-comment">//方法形参可以由外部输入的类型E指定</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">(E e)</span> &#123;<br>    member = e;<br>    &#125;<br>    <br>    <span class="hljs-comment">//方法返回类型可以由外部输入的类型E指定</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> member;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-muy1zwlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-muy1zwlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        Example&lt;Integer&gt; example = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>&lt;&gt;();<br>        example.add(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> example.get();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-泛型方法"><a href="#2-2-泛型方法" class="headerlink" title="2.2 泛型方法"></a>2.2 泛型方法</h2><p>定义方法时同时定义了泛型的方法就是泛型方法，泛型写在修饰符之后，返回类型之前。</p><p>在调用泛型方法时，即可以显示指定类型，也可以根据形参类型隐式推断而不必指定。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-yftyczlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-yftyczlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br><br>    <span class="hljs-comment">//定义泛型构造方法</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Example(T t) &#123;<br>        System.out.println(t);<br>    &#125;<br><br>    <span class="hljs-comment">//定义泛型方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(ArrayList&lt;E&gt; list, E e)</span> &#123;<br>        list.add(e);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5bmismlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-5bmismlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//显式指定</span><br>        <span class="hljs-keyword">new</span> &lt;String&gt;Example(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        Example.&lt;String&gt;add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), <span class="hljs-string">&quot;你好&quot;</span>);<br><br>        <span class="hljs-comment">//隐式推断</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        Example.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), <span class="hljs-string">&quot;你好&quot;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-3-泛型接口"><a href="#2-3-泛型接口" class="headerlink" title="2.3 泛型接口"></a>2.3 泛型接口</h2><p>使用了泛型定义的接口就是泛型接口，泛型写在接口名之后。泛型接口有两种使用方式：</p><ul><li><p>实现类给出具体的类型。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bapbzolckj50kh"></i><span>java</span><div class="collapse show" id="collapse-bapbzolckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">//定义泛型接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyList</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(ArrayList&lt;E&gt; list, E e)</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h7vii2lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-h7vii2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">//使用方式一：实现类给出具体类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyList</span>&lt;String&gt; &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(ArrayList&lt;String&gt; list, String str)</span> &#123;<br>        list.add(str);<br>    &#125; <br>    <br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p>实现类延续泛型，创建实现类对象时再确定类型。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lacdxnlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-lacdxnlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">//定义泛型接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyList</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(ArrayList&lt;E&gt; list, E e)</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-psx1walckj50kh"></i><span>java</span><div class="collapse show" id="collapse-psx1walckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">//使用方式二：实现类延续泛型，创建实现类对象时再确定类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example2</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyList</span>&lt;E&gt; &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(ArrayList&lt;E&gt; list, E e)</span> &#123;<br>        list.add(e);<br>    &#125; <br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-grpfbmlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-grpfbmlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">Example1</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example1</span>();<br>        <br>        <span class="hljs-comment">//创建实现类对象时才确定类型</span><br>        Example2&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example2</span>&lt;&gt;();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h1 id="3-泛型的特性"><a href="#3-泛型的特性" class="headerlink" title="3. 泛型的特性"></a>3. 泛型的特性</h1><p>泛型具有如下特性：</p><ul><li><p>指定泛型的具体类型后，传递泛型时不具备多态，不能传入其子类类型；传递数据时，可以传入该类类型或者其子类类型。</p></li><li><p>泛型不能实例化：不能创建对象、创建对应数组等。</p></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hgsj9rlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-hgsj9rlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-scd5ullckj50kh"></i><span>java</span><div class="collapse show" id="collapse-scd5ullckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-eyn4q2lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-eyn4q2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YoungStudents</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Students</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lwxr98lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-lwxr98lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        ArrayList&lt;People&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;Students&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;YoungStudents&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//数据能传递本类型和子类型</span><br>        list1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>());<br>        list1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>());<br>        list1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">YoungStudents</span>());<br>        <br>        <span class="hljs-comment">//只能传递对应泛型的形参list2，不能传递list1和list3</span><br>        method(list2);<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(ArrayList&lt;Students&gt; list)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-泛型通配符"><a href="#4-泛型通配符" class="headerlink" title="4. 泛型通配符"></a>4. 泛型通配符</h1><p>当泛型类型不确定，但又想要指定为某一个继承体系里的类型，则可以使用泛型通配符：</p><ul><li><font class="code-word"><code>&lt;?&gt;</code></font> ：无边界通配符，可以接受未知的数据类型</li><li><font class="code-word"><code>&lt;? extends E&gt;</code></font>  ：表示可以传递 E 和 E 的所有子类类型。</li><li><font class="code-word"><code>&lt;? super E&gt;</code></font> ：表示可以传递 E 和 E 的所有父类类型。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-itnygclckj50kh"></i><span>java</span><div class="collapse show" id="collapse-itnygclckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-iu6g8hlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-iu6g8hlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-n3zcnrlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-n3zcnrlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YoungStudents</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Students</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z0w5nhlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-z0w5nhlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        ArrayList&lt;People&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;Students&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;YoungStudents&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">//只能传递对应泛型list2，不能传递list1和list3</span><br>        method1(list2);<br>        <br>        <span class="hljs-comment">//能传递对应泛型的list2和泛型为其子类的list3</span><br>        method2(list2);<br>        method2(list3);<br>        <br>        <span class="hljs-comment">//能传递对应泛型的list2和泛型为其父类的list1</span><br>        method3(list2);<br>        method3(list1);<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">(ArrayList&lt;Students&gt; list)</span> &#123;&#125;<br>    <span class="hljs-comment">//使用泛型通配符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">(ArrayList&lt;? extends Students&gt; list)</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method3</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-built_in">super</span> Students&gt; list)</span> &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="5-泛型擦除"><a href="#5-泛型擦除" class="headerlink" title="5. 泛型擦除"></a>5. 泛型擦除</h1><p>泛型信息只存在于<font class="word-stress">代码编译阶段</font>，在进入 JVM 之前，与泛型相关的信息会被擦除掉，即泛型擦除。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-plc8qblckj50kh"></i><span>java</span><div class="collapse show" id="collapse-plc8qblckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; l1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;Integer&gt; l2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();        <br><br>System.out.println(l1.getClass() == l2.getClass());   <span class="hljs-comment">//输出：true</span><br></code></pre></td></tr></table></div></figure><p>泛型擦除这一性质可以使得<a href="">反射</a>能绕过泛型向集合中添加元素。</p>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象 (三) - Java SE</title>
    <link href="/post/37723/"/>
    <url>/post/37723/</url>
    
    <content type="html"><![CDATA[<h1 id="1-内部类"><a href="#1-内部类" class="headerlink" title="1. 内部类"></a>1. 内部类</h1><h2 id="1-1-匿名内部类"><a href="#1-1-匿名内部类" class="headerlink" title="1.1 匿名内部类"></a>1.1 匿名内部类</h2><p>匿名内部类<font class="word-stress">将继承、方法重写、创建对象合并为一步</font>，相当于创建了一个子类的对象的同时子类中的方法还进行了重写。</p><ul><li>匿名内部类并非真的没有类名，系统会有一个默认的类名并真实创建一个类，但是在编辑器中不会显示。</li><li>在含有匿名内部类的局域结束后要加上分号。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-y2zmuulckj50kh"></i><span>java</span><div class="collapse show" id="collapse-y2zmuulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-psm0tblckj50kh"></i><span>java</span><div class="collapse show" id="collapse-psm0tblckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//创建People的匿名内部类</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;重写了方法&quot;</span>);<br>            &#125;<br>        &#125;;<br>        <br>        person.showInfo();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-2-lambda-表达式"><a href="#1-2-lambda-表达式" class="headerlink" title="1.2 lambda 表达式"></a>1.2 lambda 表达式</h2><p><strong>语法</strong></p><p>lambda 表达式可用于简化函数式<a href="/post/1017/#6-%E6%8E%A5%E5%8F%A3">接口</a> (只有一个抽象方的接口，可用 <font class="code-word"><code>@Functionalinterface</code></font> 检验) 的<a href="#1-1-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB">匿名内部类</a>的写法。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vnkh2glckj50kh"></i><span>java</span><div class="collapse show" id="collapse-vnkh2glckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//函数式接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Show</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">(String str)</span>;    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-bykf6alckj50kh"></i><span>java</span><div class="collapse show" id="collapse-bykf6alckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//未用lambda表达式简化的匿名内部类写法</span><br>        method(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">(String str)</span> &#123;<br>                System.out.println(str);<br>            &#125;<br>        &#125;);<br>        <br>        <span class="hljs-comment">//用lambda表达式简化的写法</span><br>        method((String str) -&gt; &#123;<br>            System.out.println(str);<br>        &#125;);<br><br>    &#125;<br>    <br>    <span class="hljs-comment">//该方法形参类型为接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(Show s)</span> &#123;<br>    s.showInfo(<span class="hljs-string">&quot;输出结果&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>简写</strong></p><ul><li>参数类型可以省略不写。</li><li>如果只有一个参数，参数类型可以省略，同时 ( ) 也可以省略。</li><li>如果 lambda 表达式的方法体只有一行，则大括号、分号、<font class="code-word"><code>return</code></font> 可以省略不写，但必须同时省略。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fbvs9tlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-fbvs9tlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//省略前的lambda表达式</span><br>method((String str) -&gt; &#123;<br>System.out.println(str)；<br>&#125;);<br><br><span class="hljs-comment">//省略后的lambda表达式</span><br>method(str -&gt; System.out.println(str));<br></code></pre></td></tr></table></div></figure><h2 id="1-3-方法引用"><a href="#1-3-方法引用" class="headerlink" title="1.3 方法引用"></a>1.3 方法引用</h2><p>方法引用是用来直接访问类或者实例的已经存在的方法或者构造方法。</p><p>当 lambda 表达式中执行代码块是本身已经存在的方法，则可用方法引用进一步简化。</p><h3 id="1-3-1-静态方法引用"><a href="#1-3-1-静态方法引用" class="headerlink" title="1.3.1 静态方法引用"></a>1.3.1 静态方法引用</h3><p>静态方法引用，即引用类中的静态方法。lambda 表达式被类方法替代的时候，它的形式参数全部传递给静态方法作为参数。   </p><ul><li><p>静态方法引用格式为：<font class="code-sentence"><code>类名::静态方法</code></font></p></li><li><p>对应的 lambda 表达式为：<font class="code-sentence"><code>(args) -&gt; 类名.静态方法(args)</code></font></p></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-eu59fulckj50kh"></i><span>java</span><div class="collapse show" id="collapse-eu59fulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//函数式接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArrayToString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">arrToStr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-a003h8lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-a003h8lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//用lambda表达式简化的写法</span><br>        method(arr -&gt; Arrays.toString(arr));<br><br>        <span class="hljs-comment">//使用方法引用简化的写法</span><br>        method(Arrays::toString);<br><br>    &#125;<br><br>    <span class="hljs-comment">//该方法形参类型为接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(ArrayToString s)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        System.out.println(s.arrToStr(arr));<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="1-3-2-对象方法引用"><a href="#1-3-2-对象方法引用" class="headerlink" title="1.3.2 对象方法引用"></a>1.3.2 对象方法引用</h3><p>对象方法引用，即引用对象的实例方法，需要先创建对象。lambda 表达式被对象的实例方法替代的时候，它的形式参数全部传递给该方法作为参数。</p><ul><li><p>对象方法引用格式为：<font class="code-sentence"><code>对象::成员方法</code></font></p></li><li><p>对应的 lambda 表达式为：<font class="code-sentence"><code>(args) -&gt; 对象.成员方法(args)</code></font></p></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wgr6yjlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-wgr6yjlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//函数式接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PrintArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3na4fwlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-3na4fwlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类和实例方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span> <span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> Arrays.toString(arr);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dg4yeilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-dg4yeilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//用lambda表达式简化的写法</span><br>        method(arr -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> Arrays.toString(arr);<br>            System.out.println(str);<br>        &#125;);<br><br>        <span class="hljs-comment">//使用方法引用简化的写法</span><br>        <span class="hljs-type">MyMethod</span> <span class="hljs-variable">printMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMethod</span>();<br>        method(printMehtod::print);<br>        <br>    &#125;<br><br>    <span class="hljs-comment">//该方法形参类型为接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(PrintArray p)</span> &#123;<br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        p.printArr(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="1-3-3-实例方法引用"><a href="#1-3-3-实例方法引用" class="headerlink" title="1.3.3 实例方法引用"></a>1.3.3 实例方法引用</h3><p>实例方法引用，即引用类的实例方法。lambda 表达式被类的实例方法替代的时候，<font class="word-stress">第一个参数作为调用者</font>，后面的参数全部传递给该方法作为参数。故而接口方法的形参，第一个参数必须是调用者的类型。</p><ul><li><p>静态方法引用格式为：<font class="code-sentence"><code>类名::成员方法</code></font></p></li><li><p>对应的 lambda 表达式为：<font class="code-sentence"><code>(对象，args) -&gt; 对象.成员方法(args)</code></font></p></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-l48gtilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-l48gtilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//函数式接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PrintArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(MyMethod m, <span class="hljs-type">int</span>[] arr)</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-d0rxqmlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-d0rxqmlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类和实例方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span> <span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> Arrays.toString(arr);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5ln9c5lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-5ln9c5lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//用lambda表达式简化的写法</span><br>        method((p, arr) -&gt; p.print(arr));<br>        <br>        <span class="hljs-comment">//使用方法引用简化的写法</span><br>        method(MyMethod::print);<br><br>    &#125;<br><br>    <span class="hljs-comment">//该方法形参类型为接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(PrintArray p)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        p.printArr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMethod</span>(), arr);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="1-3-4-构造方法引用"><a href="#1-3-4-构造方法引用" class="headerlink" title="1.3.4 构造方法引用"></a>1.3.4 构造方法引用</h3><p>构造方法引用，即引用类的构造方法。lambda 表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数。</p><ul><li>静态方法引用格式为：<font class="code-sentence"><code>类名::new</code></font></li><li>对应的 lambda 表达式为：<font class="code-sentence"><code>(args) -&gt; new 类名(args)</code></font></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-olmtq1lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-olmtq1lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//函数式接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentBuilder</span> &#123;<br>    Students <span class="hljs-title function_">build</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vl4puxlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-vl4puxlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类和实例方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-njwbs1lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-njwbs1lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//用lambda表达式简化的写法</span><br>        method((name, age) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(name, age));<br><br>        <span class="hljs-comment">//使用方法引用简化的写法</span><br>        method(Students::<span class="hljs-keyword">new</span>);<br>        <br>    &#125;<br><br>    <span class="hljs-comment">//该方法形参类型为接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(StudentBuilder b)</span> &#123;<br>        <span class="hljs-type">Students</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> b.build(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>);<br>        System.out.println(student);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="2-包装类"><a href="#2-包装类" class="headerlink" title="2. 包装类"></a>2. 包装类</h1><p><strong>概念</strong></p><p>包装类：即基本数据类型对应的引用类型，包装类和基本类型在 JDK5 之后可以<font class="word-stress">自动装箱、自动拆箱</font>进行转换：</p><table class="myform">    <body>        <tr>            <td style="text-align: center;" width=12%><b>基本类型</b></td>             <td style="text-align: center;" width=11%>byte</td>             <td style="text-align: center;" width=11%>char</td>             <td style="text-align: center;" width=11%>int</td>             <td style="text-align: center;" width=11%>short</td>             <td style="text-align: center;" width=11%>long</td>             <td style="text-align: center;" width=11%>float</td>             <td style="text-align: center;" width=11%>double</td>             <td style="text-align: center;" width=11%>boolean</td>             <td style="padding:0; margin:0;"></td>        </tr>        <tr>            <td style="text-align: center;"><b>包装类</b></td>              <td style="text-align: center;">Byte</td>             <td style="text-align: center;">Character</td>             <td style="text-align: center;">Integer</td>             <td style="text-align: center;">Short</td>             <td style="text-align: center;">Long</td>             <td style="text-align: center;">Float</td>             <td style="text-align: center;">Double</td>             <td style="text-align: center;">Boolean</td>         </tr>       </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-h11v5xlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-h11v5xlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;    <span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> b;        <span class="hljs-comment">//自动拆箱</span><br></code></pre></td></tr></table></div></figure><p>在内存中可以看到，区别于基本数据类型，包装类存储的是堆中对象的<font class="word-stress">地址值</font>：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-4.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><p><strong>方法</strong></p><p>以 <font class="code-word"><code>Integer</code></font>  为例，其包含有如下成员方法：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">public static String toBinaryString(int i)</td>             <td style="text-align: center;">得到二进制</td>         </tr>        <tr>            <td style="text-align: center;">public static String toOctalString(int i)</td>             <td style="text-align: center;">得到八进制</td>         </tr>        <tr>            <td style="text-align: center;">public static String toHexString(int i)</td>             <td style="text-align: center;">得到十六进制</td>         </tr>        <tr>            <td style="text-align: center;">public static int parseInt(String s)</td>             <td style="text-align: center;">将 String 类型的整数转成 int 类型的整数</td>         </tr>    </body></table><p>在八个包装类中除了 <font class="code-word"><code>Character</code></font>  以外都有对应的 <font class="code-word"><code>parseXxx</code></font> 的方法进行类型转换。</p><h1 id="3-枚举类"><a href="#3-枚举类" class="headerlink" title="3. 枚举类"></a>3. 枚举类</h1><p><strong>概念</strong></p><p>枚举是 Java 中的一种特殊类型，枚举的作用是为了做信息的标志和分类。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-i8t0y3lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-i8t0y3lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义枚举类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season</span> &#123;<br>    SPRING, SUMMER, AUTUMN, WINTER;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>特点</strong></p><ul><li>枚举类都是继承了枚举类型：<font class="code-word"><code>java.lang.Enum</code></font> </li><li>枚举都是最终类，不可以被继承。</li><li>构造器都是私有的，枚举对外不能创建对象。</li><li>枚举类的第一行默认都是罗列枚举对象的名称的。</li><li>枚举类相当于是多例模式，其中固定创建了多个实例对象。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zbvd4slckj50kh"></i><span>java</span><div class="collapse show" id="collapse-zbvd4slckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//枚举类反编译</span><br>Compiled from <span class="hljs-string">&quot;Season.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.lang.Enum&lt;Season&gt; &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SUMMER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">AUTUMN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">WINTER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>();    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Season[] values();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Season <span class="hljs-title function_">valueOf</span><span class="hljs-params">(java.lang.String)</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>案例</strong></p><p>以下为一个枚举类用于管理信息选项的使用案例。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-qsepnnlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-qsepnnlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>   <br>        printSeason(Season.SPRING);<br>        printSeason(Season.SUMMER);<br>        printSeason(Season.AUTUMN);<br>        printSeason(Season.WINTER);<br>        <br>    &#125;<br><br>    <span class="hljs-comment">//定义形参为枚举类的方法，形参将只能接受枚举类中给定的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printSeason</span><span class="hljs-params">(Season season)</span> &#123;      <br>        <span class="hljs-keyword">switch</span> (season) &#123;<br>            <span class="hljs-keyword">case</span> SPRING -&gt; System.out.println(<span class="hljs-string">&quot;春天到了&quot;</span>);<br>            <span class="hljs-keyword">case</span> SUMMER -&gt; System.out.println(<span class="hljs-string">&quot;夏天到了&quot;</span>);<br>            <span class="hljs-keyword">case</span> AUTUMN -&gt; System.out.println(<span class="hljs-string">&quot;秋天到了&quot;</span>);<br>            <span class="hljs-keyword">case</span> WINTER -&gt; System.out.println(<span class="hljs-string">&quot;冬天到了&quot;</span>);<br>        &#125;   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象 (二) - Java SE</title>
    <link href="/post/1017/"/>
    <url>/post/1017/</url>
    
    <content type="html"><![CDATA[<h1 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h1><h2 id="1-1-继承的语法"><a href="#1-1-继承的语法" class="headerlink" title="1.1 继承的语法"></a>1.1 继承的语法</h2><p>Java 允许我们用 <font class="code-word"><code>extends</code></font> 关键字，让一个类和另一个类建立起一种父子关系。子类可以得到父类的属性和行为，子类可以使用。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-tmxmhhlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-tmxmhhlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    String name;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-o109czlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-o109czlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类：继承父类</span><br><span class="hljs-keyword">public</span> Class Students <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br>    String className;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>创建子类对象后，在堆区会分配一块内存用于存放对象，其中分为父类空间和子类空间：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-2.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:60%;" /><h2 id="1-2-继承的特点"><a href="#1-2-继承的特点" class="headerlink" title="1.2 继承的特点"></a>1.2 继承的特点</h2><p><strong>继承的特点</strong></p><ul><li>Java 只支持单继承，一个类<font class="word-stress">只能继承一个直接父类</font>。不支持多继承，但支持多层继承。</li><li>每一个类都直接或间接的继承于 <font class="code-word"><code>Object</code></font> 类。</li></ul><p><strong>继承的内容</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=32%>父类成员</th>            <th style="text-align: center;" width=34%>子类能否继承</th>            <th style="text-align: center;" width=34%>子类能否继承</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">构造方法</td>             <td style="text-align: center;">非private&emsp;×</td>             <td style="text-align: center;">private&emsp;×</td>         </tr>        <tr>            <td style="text-align: center;">成员变量</td>             <td style="text-align: center;">非pirvate&emsp;√</td>             <td style="text-align: center;">private&emsp;√</td>         </tr>        <tr>            <td style="text-align: center;">成员方法</td>             <td style="text-align: center;">虚方法表&emsp;√</td>             <td style="text-align: center;">非虚方法表&emsp;×</td>         </tr>    </body></table><p>虚方法表：非 <font class="code-word"><code>private</code></font> 、<font class="code-word"><code>static</code></font> 、 <font class="code-word"><code>final</code></font>  的方法。</p><h2 id="1-3-super-关键字"><a href="#1-3-super-关键字" class="headerlink" title="1.3 super 关键字"></a>1.3 super 关键字</h2><p><font class="code-word"><code>super</code></font> 关键字是一个指向父类的引用，可用于访问父类成员和父类构造方法。（区别于 this 代表当前方法调用者的地址值）</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=19%>关键字</th>            <th style="text-align: center;" width=27%>访问成员变量</th>            <th style="text-align: center;" width=27%>访问成员方法</th>            <th style="text-align: center;" width=27%>访问构造方法</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">this</td>             <td style="text-align: center;">访问本类&emsp;this.成员变量</td>             <td style="text-align: center;">访问本类&emsp;this.成员方法()</td>             <td style="text-align: center;">访问本类&emsp;this()</td>        </tr>        <tr>            <td style="text-align: center;">super</td>             <td style="text-align: center;">访问父类&emsp;super.成员变量</td>             <td style="text-align: center;">访问父类&emsp;super.成员方法()</td>             <td style="text-align: center;">访问父类&emsp;super()</td>        </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wuhf6mlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-wuhf6mlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-aw36jdlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-aw36jdlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    String className;<br>    <br>    <span class="hljs-comment">//访问父类构造方法 super()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();           <span class="hljs-comment">//要放在方法体内部第一行</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//访问父类成员 super.成员，super可省略</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">example</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.method();<br>        System.out.println(<span class="hljs-built_in">super</span>.name);<br>    &#125;<br>      <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-4-子类访问成员"><a href="#1-4-子类访问成员" class="headerlink" title="1.4 子类访问成员"></a>1.4 子类访问成员</h2><h3 id="1-4-1-就近原则"><a href="#1-4-1-就近原则" class="headerlink" title="1.4.1 就近原则"></a>1.4.1 就近原则</h3><p>在子类方法中访问成员（成员变量、成员方法）满足就近原则：</p><ul><li>先子类局部范围找</li><li>然后子类成员范围找</li><li>然后父类成员范围找，如果父类范围还没有找到则报错。</li></ul><p>对于重名变量或重写方法优先就近调用，若要调用远端则要用到 <font class="code-word"><code>this</code></font> 和 <font class="code-word"><code>super</code></font> 关键字。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-neizy5lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-neizy5lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;父类Name&quot;</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-62yazzlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-62yazzlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;子类Name&quot;</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;局部Name&quot;</span>;<br>        <br>        System.out.println(name);          <span class="hljs-comment">//输出：局部Name</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);     <span class="hljs-comment">//输出：子类Name</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name);    <span class="hljs-comment">//输出：父类Name</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h3 id="1-4-2-访问父类私有成员"><a href="#1-4-2-访问父类私有成员" class="headerlink" title="1.4.2 访问父类私有成员"></a>1.4.2 访问父类私有成员</h3><p>父类私有成员能被子类继承下来，但无法被子类直接访问，只能通过父类提供的方法去访问。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-p04v00lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-p04v00lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zswfaulckj50kh"></i><span>java</span><div class="collapse show" id="collapse-zswfaulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//调用父类方法访问父类私有成员</span><br>        System.out.println(getName());<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="1-5-子类方法重写"><a href="#1-5-子类方法重写" class="headerlink" title="1.5 子类方法重写"></a>1.5 子类方法重写</h2><p><strong>概念</strong></p><p>在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类这个方法是重写的方法。</p><p>在重写方法前加入 <font class="code-word"><code>@Override</code></font> 注解可用于检验重写时语法是否正确。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-s9d2ewlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-s9d2ewlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;展示个人信息&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lqu0fblckj50kh"></i><span>java</span><div class="collapse show" id="collapse-lqu0fblckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-comment">//子类重写父类方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;展示学生信息&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>注意</strong></p><ul><li><p>重写方法的名称、形参列表和返回类型必须与被重写方法一致：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>同名类型</th>            <th style="text-align: center;" width=25%>方法规则与父类相同</th>            <th style="text-align: center;" width=25%>形参不同</th>            <th style="text-align: center;" width=25%>返回类型不同</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">继承前后存在同名方法</td>             <td style="text-align: center;">方法重写</td>             <td style="text-align: center;">方法重载</td>             <td style="text-align: center;">冲突，无法实现</td>        </tr>    </body></table></li><li><p>只有被添加到虚方法表中的方法才能被重写。</p></li><li><p>子类重写父类方法时，访问权限必须大于或者等于父类 （缺省 &lt; protected &lt; public ），返回值类型子类必须小于等于父类。</p></li><li><p>方法重写后，原父类方法仍可访问，访问规则参照<a href="#1-4-1-%E5%B0%B1%E8%BF%91%E5%8E%9F%E5%88%99">就近原则</a>。</p></li></ul><h2 id="1-6-子类构造方法"><a href="#1-6-子类构造方法" class="headerlink" title="1.6 子类构造方法"></a>1.6 子类构造方法</h2><p>子类不能继承父类的构造方法，但是可以通过 <font class="code-word"><code>super</code></font>  调用。</p><p>若子类构造方法未调用父类构造方法，则子类构造方法的第一行有一个默认的 <font class="code-word"><code>super()</code></font> ，若手动书写则必须写在第一行。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9m9hk6lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-9m9hk6lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    String name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">()</span> &#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">(String inputName)</span> &#123;&#125;;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ezm3wrlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ezm3wrlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    String studentName;<br>    <br>    <span class="hljs-comment">//访问父类的有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();      <br>    &#125;<br>    <br>    <span class="hljs-comment">//访问父类的有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String input1, String input2)</span> &#123;<br>        <span class="hljs-built_in">super</span>(input1);<br>        studentName = input2;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="2-Static-关键字"><a href="#2-Static-关键字" class="headerlink" title="2. Static 关键字"></a>2. Static 关键字</h1><h2 id="2-1-静态变量"><a href="#2-1-静态变量" class="headerlink" title="2.1 静态变量"></a>2.1 静态变量</h2><p><strong>定义静态变量</strong></p><p><font class="code-word"><code>static</code></font> 修饰后的成员变量，可以被类的所有对象共享，访问，修改。因为类只有一个，所以静态变量在内存区域中随类的加载进入堆中的静态区并唯一存在。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ncct2wlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ncct2wlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <br>    <span class="hljs-comment">//普通成员变量</span><br>    String name;<br>    <br>    <span class="hljs-comment">//静态成员变量</span><br>    <span class="hljs-keyword">static</span> String teacherName;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>访问静态变量</strong></p><p>可以采用类名和对象名去访问静态成员变量。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3zudmilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-3zudmilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//类名访问静态变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">teacher1</span> <span class="hljs-operator">=</span> Student.teacherName;<br>        <br>        <span class="hljs-comment">//对象访问静态变量（不推荐）</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">teacher2</span> <span class="hljs-operator">=</span> student.teacherName;<br>        <br>        <span class="hljs-comment">//对象访问实例变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">studentName</span> <span class="hljs-operator">=</span> student.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-2-静态方法"><a href="#2-2-静态方法" class="headerlink" title="2.2 静态方法"></a>2.2 静态方法</h2><p><strong>定义静态方法</strong></p><p>有 <font class="code-word"><code>static</code></font> 修饰成员方法称为静态方法，所有对象都可以共享这个方法。因为类只有一个，所以静态方法在内存区域中也只存在一份。</p><p>静态方法多用于测试类与工具类中。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-o8gtxelckj50kh"></i><span>java</span><div class="collapse show" id="collapse-o8gtxelckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <br>    String name;<br>    <span class="hljs-keyword">static</span> String teacherName;<br>    <br>    <span class="hljs-comment">//普通成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>    <span class="hljs-comment">//静态成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>访问静态方法</strong></p><p>可以采用类名和对象名去访问静态成员变量。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-w21e5mlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-w21e5mlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//类名访问静态方法</span><br>        Student.study();<br>        <br>        <span class="hljs-comment">//对象访问静态方法（不推荐）</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.study();<br>        <br>        <span class="hljs-comment">//对象访问实例方法</span><br>        student.showInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>访问规则</strong></p><ul><li>静态方法只能访问静态变量和静态方法，<font class="word-stress">不可以直接访问实例成员</font>。</li><li>实例方法可以访问实例成员，也可以访问静态成员，但无法使用 <font class="code-word"><code>super</code></font>  和 <font class="code-word"><code>this</code></font> 关键字去访问静态成员。</li><li>静态方法中没有 <font class="code-word"><code>this</code></font> 关键字。（所以才有第一条规则，因为实例方法默认有指向调用者地址值的 this 作形参。）</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ybs9btlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ybs9btlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <br>    String name;<br>    <span class="hljs-keyword">static</span> String teacherName;<br>    <br>    <span class="hljs-comment">//实例方法均可访问</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.study();<br>        System.out.println(<span class="hljs-string">&quot;访问了成员变量&quot;</span> + name + <span class="hljs-string">&quot;,&quot;</span> + teacherName);<br>    &#125;<br>    <br>    <span class="hljs-comment">//静态方法只能访问静态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;访问了成员变量&quot;</span> + teacherName);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-3-静态代码块"><a href="#2-3-静态代码块" class="headerlink" title="2.3 静态代码块"></a>2.3 静态代码块</h2><p>静态代码块和实例代码块的区别如下：</p><ul><li>静态代码块：是通过 <font class="code-word"><code>static</code></font> 关键字修饰的代码块，<font class="word-stress">随着类的加载而加载</font>，并且自动触发、只执行一次。</li><li>实例代码块：无 <font class="code-word"><code>static</code></font> 修饰，属于对象，每次构建对象时，都会触发一次执行。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-61n0salckj50kh"></i><span>java</span><div class="collapse show" id="collapse-61n0salckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <br>    String name;<br>    <span class="hljs-keyword">static</span> String teacherName;<br>    <br>    <span class="hljs-comment">//静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了静态代码块&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//实例代码块</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了实例代码块&quot;</span>);<br>    &#125;   <br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-4-main-方法"><a href="#2-4-main-方法" class="headerlink" title="2.4 main 方法"></a>2.4 main 方法</h2><p>在 Java 中，<font class="code-word"><code>main</code></font> 方法是 Java 应用程序的<font class="word-stress">入口方法</font>，程序在运行的时候，第一个执行的方法就是 main 方法，且是静态方法不必创建对象，随着类被加载进内存时该方法即可调用。</p><p>每一个类中可以有一个 main 方法，main 方法只能定义成如下指定格式。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-76crztlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-76crztlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-final-关键字"><a href="#3-final-关键字" class="headerlink" title="3. final 关键字"></a>3. final 关键字</h1><p><font class="code-word"><code>final</code></font> 关键字是最终的意思，可以修饰类、方法、变量：</p><ul><li><p><strong>修饰类</strong>：表明该类是最终类，不能被继承。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-x8fv29lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-x8fv29lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//final修饰类，该类不能被继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><strong>修饰方法</strong>：表明该方法是最终方法，不能被重写。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-49b6ndlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-49b6ndlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-comment">//final修饰方法，该方法不能被重写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure></li><li><p><strong>修饰变量</strong>：即常量，表示该变量第一次赋值后，不能再次被赋值，有且仅能被赋值一次。</p><ul><li><p>final 修饰的变量是基本类型：那么变量存储的<font class="word-stress">数据值</font>不能发生改变。</p></li><li><p>final 修饰的变量是引用类型：那么变量存储的<font class="word-stress">地址值</font>不能发生改变，但是地址指向的对象内容是可以发生变化的。</p></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-x690oulckj50kh"></i><span>java</span><div class="collapse show" id="collapse-x690oulckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//final修饰基本类型：常量</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">EXAMPLE_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">514</span>;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-okrkrblckj50kh"></i><span>java</span><div class="collapse show" id="collapse-okrkrblckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//final修饰基本类型：加上static关键字成为静态常量，同时拥有二者性质，用于记录系统配置数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String NAME;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ur75cjlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ur75cjlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    String name;<br>&#125;<br><br><span class="hljs-comment">//final修饰引用类型：地址值不变但对象内容可变</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-keyword">final</span> <span class="hljs-type">People</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br>        person.name = <span class="hljs-string">&quot;修改姓名&quot;</span>;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h1 id="4-多态"><a href="#4-多态" class="headerlink" title="4. 多态"></a>4. 多态</h1><h2 id="4-1-多态的实现"><a href="#4-1-多态的实现" class="headerlink" title="4.1 多态的实现"></a>4.1 多态的实现</h2><p>多态是指对象可以有多种形态，多态的前提是：<font class="word-stress">有继承关系、有父类引用指向子类对象、<a href="#1-5-%E5%AD%90%E7%B1%BB%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99">有方法重写</a></font>。</p><p>语法格式为：<font class="code-sentence"><code>父类类型 对象名称 = new 子类对象</code></font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hxe8svlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-hxe8svlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animals</span> &#123;   <br>    String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-p57oe6lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-p57oe6lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dogs</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animals</span> &#123;  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗的名字是：&quot;</span> + name);<br>    &#125;        <br>&#125; <br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vwyo3xlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-vwyo3xlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cats</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animals</span> &#123;   <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫的名字是：&quot;</span> + name);<br>    &#125;      <br>&#125; <br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1pe70hlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1pe70hlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">Dogs</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dogs</span>();<br>        dog.name = <span class="hljs-string">&quot;狗的名字&quot;</span>;<br>        showInfo(dog);<br>        <br>        <span class="hljs-type">Cats</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cats</span>();<br>        cat.name = <span class="hljs-string">&quot;猫的名字&quot;</span>;<br>        showInfo(cat);<br>        <br>    &#125;<br>    <br>    <span class="hljs-comment">//用父类引用可接收子类对象，实现多态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">(Animals animal)</span> &#123;<br>        animal.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-2-调用成员"><a href="#4-2-调用成员" class="headerlink" title="4.2 调用成员"></a>4.2 调用成员</h2><p>采用父类引用接收了子类对象的地址后，对象调用成员有一定规则：</p><ul><li><strong>方法调用</strong>：编译时找父类中该方法是否存在，运行时调用子类中该方法。所以多态<font class="word-stress">不能调用子类的特有方法</font>。</li><li><strong>变量调用</strong>：编译时找父类中该变量是否存在，运行时调用父类中该变量。所以多态<font class="word-stress">不能调用子类的特有成员</font>。</li></ul><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-3.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" /><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-oqd4q0lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-oqd4q0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animals</span> &#123;   <br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;动物&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-e3ybg1lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-e3ybg1lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dogs</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animals</span> &#123;  <br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;狗狗&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name);<br>    &#125;        <br>&#125; <br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-43h2j9lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-43h2j9lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">Animals</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dogs</span>();<br>        <br>        <span class="hljs-comment">//Animals中存在成员name，则编译不报错，运行调用Animals中的name，输出&quot;动物&quot;</span><br>        System.out.println(animal.name);    <br>        <br>        <span class="hljs-comment">//Animals中存在成员show()，则编译不报错，运行调用Dogs中的show()，输出&quot;狗狗&quot;</span><br>        animal.show();                 <br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-3-类型转换"><a href="#4-3-类型转换" class="headerlink" title="4.3 类型转换"></a>4.3 类型转换</h2><ul><li><p><strong>从子类到父类</strong>：为自动进行的类型转换。</p></li><li><p><strong>从父类到子类</strong>：类型转换需要强制进行，且若原父类类型为子类的多态用法，则转换成子类时只能转换对应子类。</p><p>​                           为了避免强制转换子类的类型出错，常用 <font class="code-word"><code>instanceof</code></font> 判断其真实类型，再进行转换。</p></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-8m9pzflckj50kh"></i><span>java</span><div class="collapse show" id="collapse-8m9pzflckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//子类到父类：自动转换</span><br><span class="hljs-type">Animals</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dogs</span>();<br>    <br><span class="hljs-comment">//父类到子类：强制转换</span><br><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Dog) &#123;<br>    <span class="hljs-type">Dogs</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dogs)animal;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="5-抽象类和方法"><a href="#5-抽象类和方法" class="headerlink" title="5. 抽象类和方法"></a>5. 抽象类和方法</h1><p><strong>概念</strong></p><p>关键字 <font class="code-word"><code>abstract</code></font> 可以修饰类、成员方法。abstract 修饰类时这个类就是抽象类；修饰方法时这个方法就是抽象方法。</p><p>抽象类为子类规定了方法重写格式，抽象方法<font class="word-stress">只有方法签名</font>，没有方法体。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-kbxb7plckj50kh"></i><span>java</span><div class="collapse show" id="collapse-kbxb7plckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>特点</strong></p><ul><li>抽象类<font class="word-stress">不能实例化</font>，类有的成员（成员变量、方法、构造器）抽象类都具备。</li><li>抽象类的子类：<ul><li>子类重写抽象类中所有抽象方法，成为非抽象类。</li><li>子类未重写所有抽象方法，仍为抽象类。</li></ul></li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类。</li></ul><h1 id="6-接口"><a href="#6-接口" class="headerlink" title="6. 接口"></a>6. 接口</h1><h2 id="6-1-接口的定义"><a href="#6-1-接口的定义" class="headerlink" title="6.1 接口的定义"></a>6.1 接口的定义</h2><p>接口用关键字 <font class="code-word"><code>interface</code></font> 定义，用于规定某一类行为的规则，是对行为的抽象。其书写格式<font class="word-stress">不含形参列表</font>。</p><p><strong>接口成员</strong></p><ul><li>接口的对象：接口<font class="word-stress">不能实例化</font>，所以没有对象，若想访问成员只能通过接口名。</li><li>接口中的成员变量：只能是静态常量，默认修饰符 <font class="code-word"><code>public static final</code></font>。</li><li>接口中的构造方法：没有构造方法。</li><li>接口中的成员方法：JDK7以前只能是抽象方法，默认修饰符 <font class="code-word"><code>public abstract</code></font>。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-sfob0llckj50kh"></i><span>java</span><div class="collapse show" id="collapse-sfob0llckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Show</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">final</span> <span class="hljs-variable">MOOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;开心&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="6-2-接口的实现"><a href="#6-2-接口的实现" class="headerlink" title="6.2 接口的实现"></a>6.2 接口的实现</h2><p>使用关键字 <font class="code-word"><code>implements</code></font> 可以使接口用来被类实现的，实现接口的类称为实现类。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-mmy98elckj50kh"></i><span>java</span><div class="collapse show" id="collapse-mmy98elckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Show</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-lnrz7klckj50kh"></i><span>java</span><div class="collapse show" id="collapse-lnrz7klckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Show</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;展示信息&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="6-3-接口的特点"><a href="#6-3-接口的特点" class="headerlink" title="6.3 接口的特点"></a>6.3 接口的特点</h2><p><strong>接口与类之间的关系</strong></p><ul><li><p>一个类<font class="word-stress">可以实现多个接口</font>，这区别于类只能单继承。并且类可以在继承父类的同时实现接口：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>同名类型</th>            <th style="text-align: center;" width=25%>方法规则相同</th>            <th style="text-align: center;" width=25%>形参不同</th>            <th style="text-align: center;" width=25%>返回类型不同</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">父类与接口存在同名方法</td>             <td style="text-align: center;">无需重写接口方法<br/>父类继承的方法视作接口的实现</td>             <td style="text-align: center;">需重写接口方法<br/>&emsp;同名的两者视为方法重载&emsp;</td>             <td style="text-align: center;">需重写接口方法<br/>&emsp;同名的两者视为方法重载&emsp;</td>         </tr>        <tr>            <td style="text-align: center;">接口与接口存在同名方法</td>             <td style="text-align: center;">只需重写一次接口方法</td>             <td style="text-align: center;">两者接口方法均需重写<br/>同名的两者视为方法重载</td>             <td style="text-align: center;">规则冲突，不可实现</td>         </tr>       </body></table></li><li><p>接口的子类：</p><ul><li>实现类重写接口中所有抽象方法，成为非抽象类。</li><li>实现类未重写接口中所有抽象方法，为抽象类。</li></ul></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-hioo58lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-hioo58lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Show1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo1</span><span class="hljs-params">()</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo2</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-b7wgbrlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-b7wgbrlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Show2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo2</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2g6dbflckj50kh"></i><span>java</span><div class="collapse show" id="collapse-2g6dbflckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;展示信息1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ejij2xlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ejij2xlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Show1</span>, Show2 &#123;<br>    <br>    <span class="hljs-comment">//showInfo1()接口由从父类继承的方法实现，无需重写</span><br>    <br>    <span class="hljs-comment">//showInfo2()接口重写，且只重写一次</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;展示信息2&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>接口与接口之间的关系</strong></p><ul><li><p>一个接口可以继承多个接口，可以将多个接口整合为同一个，但继承来的方法规则不能冲突：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>同名类型</th>            <th style="text-align: center;" width=25%>方法规则相同</th>            <th style="text-align: center;" width=25%>形参不同</th>            <th style="text-align: center;" width=25%>返回类型不同</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">继承前后存在同名方法</td>             <td style="text-align: center;">视为接口中一个方法</td>             <td style="text-align: center;">视为接口中不同方法(重载)</td>             <td style="text-align: center;">冲突，不可继承</td>         </tr>      </body></table></li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pf80rclckj50kh"></i><span>java</span><div class="collapse show" id="collapse-pf80rclckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Show1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo1</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ql1v8ilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ql1v8ilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Show2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Show1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo2</span><span class="hljs-params">()</span>;  <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xlc73slckj50kh"></i><span>java</span><div class="collapse show" id="collapse-xlc73slckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Show1</span>, Show2 &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;展示信息1&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;展示信息2&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="6-4-接口作形参"><a href="#6-4-接口作形参" class="headerlink" title="6.4 接口作形参"></a>6.4 接口作形参</h2><p>调用方法时，当形参是接口时，则参数要<font class="word-stress">传递这个接口的实现类对象</font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-62cu2llckj50kh"></i><span>java</span><div class="collapse show" id="collapse-62cu2llckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Show</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span>;   <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-z4gkqtlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-z4gkqtlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//调用该方法时，实际传递的参数应为Show接口的实现类对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(Show s)</span> &#123;<br>    s.showInfo();<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象 (一) - Java SE</title>
    <link href="/post/50013/"/>
    <url>/post/50013/</url>
    
    <content type="html"><![CDATA[<h1 id="1-三大特性"><a href="#1-三大特性" class="headerlink" title="1. 三大特性"></a>1. 三大特性</h1><p>面向对象编程 (OOP) 的三大特性如下：</p><ul><li><a href="#5-%E5%B0%81%E8%A3%85%E4%B8%8E%E7%AE%A1%E7%90%86">封装</a>：指的是类的内部信息进行隐藏，一般是指对类内部的属性进行私有化，外部无法直接访问或影响内部的属性，只能通过特定的方法对封装的内容进行访问，提高了代码的安全性。</li><li><a href="/post/1017/#1-%E7%BB%A7%E6%89%BF">继承</a>：指子类继承父类，子类可以获得父类的全部属性和方法，且可以拥有一些父类所没有的方法和属性，提高了代码的复用性和逻辑性。</li><li><a href="/post/1017/#4-%E5%A4%9A%E6%80%81">多态</a>：多态性是指同一个操作用于某一对象，可以有不同的解释，产生不同的执行结果。</li></ul><h1 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2. 类和对象"></a>2. 类和对象</h1><h2 id="2-1-类的定义"><a href="#2-1-类的定义" class="headerlink" title="2.1 类的定义"></a>2.1 类的定义</h2><p><strong>定义类</strong></p><p>一个 Java 文件中可以定义多个 <font class="code-word"><code>class</code></font>  类，但只能一个类是 <font class="code-word"><code>public</code></font>  修饰，而且 <font class="word-stress">public 修饰的类名必须成为代码文件名</font>，实际建议一个 java 文件定义一个 class 类。类名通常采用<font class="word-stress">大驼峰命名法</font>。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wx42uelckj50kh"></i><span>java</span><div class="collapse show" id="collapse-wx42uelckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animals</span> &#123;<br>    <br>    <span class="hljs-comment">//属性</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drink</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>类的分类</strong></p><ul><li>Javabean 类：用来描述一类事物的类。</li><li>测试类：用来检查其他类是否书写正确，带有 main 方法的类，是程序的入口。</li><li>工具类：不用于描述一类事物，而是用于实现一些方法的类。</li></ul><h2 id="2-2-访问对象"><a href="#2-2-访问对象" class="headerlink" title="2.2 访问对象"></a>2.2 访问对象</h2><p><strong>访问对象</strong></p><p>创建的 Animals 对象存放于堆中，同时堆中还存放一个指向方法区中成员方法的引用地址。</p><p>对象变量 animal 存放于栈中为<font class="word-stress">引用数据类型</font>，存放的是指向堆中对象的地址：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-1.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 50%;" />  <figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5v7zfwlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-5v7zfwlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建对象</span><br><span class="hljs-type">Animals</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animals</span>();  <br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-awoqpolckj50kh"></i><span>java</span><div class="collapse show" id="collapse-awoqpolckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//访问对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">animalName</span> <span class="hljs-operator">=</span> animal.name;      <span class="hljs-comment">//调用类的属性</span><br>animal.eat();                         <span class="hljs-comment">//调用类的方法</span><br></code></pre></td></tr></table></div></figure><p><strong>访问成员变量</strong></p><ul><li>静态变量访问：可以采用类名和对象名去访问静态成员变量。</li><li>实例变量访问：只能创建对象并用对象名去访问。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xs3rj3lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-xs3rj3lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//类名访问静态变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">teacher1</span> <span class="hljs-operator">=</span> Student.teacherName;<br>        <br>        <span class="hljs-comment">//对象访问静态变量（不推荐）</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">teacher2</span> <span class="hljs-operator">=</span> student.teacherName;<br>        <br>        <span class="hljs-comment">//对象访问实例变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">studentName</span> <span class="hljs-operator">=</span> student.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>访问成员方法</strong></p><ul><li>静态方法访问：可以采用类名和对象名去访问静态成员变量。</li><li>实例方法访问：只能创建对象并用对象名去访问。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ukjxe0lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ukjxe0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//类名访问静态方法</span><br>        Student.study();<br>        <br>        <span class="hljs-comment">//对象访问静态方法（不推荐）</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.study();<br>        <br>        <span class="hljs-comment">//对象访问实例方法</span><br>        student.showInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="2-3-this-关键字"><a href="#2-3-this-关键字" class="headerlink" title="2.3 this 关键字"></a>2.3 this 关键字</h2><p><font class="code-word"><code>this</code></font> 关键字用于方法和构造器中，代表<font class="word-stress">当前对象的地址值</font>，可以用于指定访问当前对象的成员和构造方法。</p><p>当用 <font class="code-word"><code>this()</code></font>  访问构造方法时，必须要放在方法体内的第一行。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-u43rgrlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-u43rgrlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animals</span> &#123;<br>    <br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">//访问当前对象成员，this可省略</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animals</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = <span class="hljs-number">2</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//访问构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animals</span><span class="hljs-params">(String inputName)</span> &#123;<br>        <span class="hljs-built_in">this</span>();    <span class="hljs-comment">//调用有参构造方法则用this(参数)</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//返回当前对象</span><br>    <span class="hljs-keyword">public</span> Animals <span class="hljs-title function_">grow</span><span class="hljs-params">()</span> &#123;<br>        age++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fs8caslckj50kh"></i><span>java</span><div class="collapse show" id="collapse-fs8caslckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//通过返回当前对象实现连续调用</span><br>        <span class="hljs-type">Animals</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animals</span>();<br>        animal.grow().grow();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="3-构造方法"><a href="#3-构造方法" class="headerlink" title="3. 构造方法"></a>3. 构造方法</h1><p><strong>定义构造方法</strong></p><p>构造方法又名构造器，定义在类中，可以用于初始化一个类的对象，并返回对象的地址。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-dxm0z2lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-dxm0z2lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animals</span> &#123;<br>    <br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animals</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animals</span><span class="hljs-params">(String name)</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animals</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animals</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;&#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vzfbgjlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-vzfbgjlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//调用构造方法创建对象</span><br>        <span class="hljs-type">Animals</span> <span class="hljs-variable">animal1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animals</span>();  <br>        <span class="hljs-type">Animals</span> <span class="hljs-variable">animal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animals</span>(<span class="hljs-string">&quot;猫猫&quot;</span>);<br>        <span class="hljs-type">Animals</span> <span class="hljs-variable">animal3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animals</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-type">Animals</span> <span class="hljs-variable">animal4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animals</span>(<span class="hljs-string">&quot;狗狗&quot;</span>, <span class="hljs-number">3</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>构造方法的参数</strong></p><p>构造方法分为有参数构造方法和无参数构造方法：</p><ul><li><strong>无参数构造方法</strong>：初始化对象时，成员变量均采用<font class="word-stress">数据类型的默认值</font>。若未定义任何构造方法，则存在一个<font class="word-stress">默认的无参数构造方法</font>。</li><li><strong>有参数构造方法</strong>：初始化对象时，同时可以接受参数为对象赋值。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ipwvgylckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ipwvgylckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animals</span><span class="hljs-params">()</span> &#123;<br>    <br>    name = <span class="hljs-literal">null</span>;<br>    age = <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="4-成员方法"><a href="#4-成员方法" class="headerlink" title="4. 成员方法"></a>4. 成员方法</h1><h2 id="4-1-方法定义"><a href="#4-1-方法定义" class="headerlink" title="4.1 方法定义"></a>4.1 方法定义</h2><p><strong>方法的格式</strong></p><p>方法的完整格式包括<font class="word-stress">修饰符、返回值类型、方法名称、形参列表、执行代码</font>几个部分。方法名通常采用<font class="word-stress">大驼峰命名法</font>。</p><p>对于不需要返回值的方法，返回值类型必须声明为 <font class="code-word"><code>void</code></font>，此时方法内部不可以用  <font class="code-word"><code>return</code></font>  返回数据。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pcw778lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-pcw778lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    System.out.println(a);<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>方法的内存图</strong></p><p>方法在内存中存放于方法区，调用方法时，方法运行区域为栈内存。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-26.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:50%;" /><h2 id="4-2-参数传递"><a href="#4-2-参数传递" class="headerlink" title="4.2 参数传递"></a>4.2 参数传递</h2><h3 id="4-2-1-值传递"><a href="#4-2-1-值传递" class="headerlink" title="4.2.1 值传递"></a>4.2.1 值传递</h3><p>在传输实参给方法的形参的时候，并不是传输实参变量本身， 而是传输实参变量中存储的值，这就是<font class="word-stress">值传递</font>：</p><ul><li>基本类型的参数传输存储的<font class="word-stress">数据值</font>。</li><li>引用类型的参数传输存储的<font class="word-stress">地址值</font>。</li></ul><h3 id="4-2-2-可变参数"><a href="#4-2-2-可变参数" class="headerlink" title="4.2.2 可变参数"></a>4.2.2 可变参数</h3><p>可变参数在形参中非常灵活，方便。可以不接收参数，可以接收1个或者多个参数，也可以接收一个数组。</p><p>可变参数的使用注意事项是：</p><ul><li>一个形参列表中可变参数只能有一个。</li><li>可变参数必须放在形参列表的最后面。</li><li>可变参数传入方法后，在方法内部即是一个数组，可调用数组的方法。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-u75c3hlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-u75c3hlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Method</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        sum();<br>        sum(<span class="hljs-number">10</span>);<br>        sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);<br>        sum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;);<br>        <br>        sum2(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>);    <span class="hljs-comment">//前一个参数视作num，后两个参数视作nums</span><br>        <br>    &#125;<br><br>    <span class="hljs-comment">//定义传可变参数的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;元素个数：&quot;</span> + nums.length);<br>        System.out.println(<span class="hljs-string">&quot;元素内容：&quot;</span> + Arrays.toString(nums));<br>    &#125;<br>    <br>    <span class="hljs-comment">//定义含有普通参数和可变参数的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum2</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span>... nums)</span> &#123;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-3-方法重载"><a href="#4-3-方法重载" class="headerlink" title="4.3 方法重载"></a>4.3 方法重载</h2><p>同一个类中出现多个方法名称相同，但是<font class="word-stress">形参列表</font>（类型、顺序、数量）是不同的，不论返回类型和修饰符，这些方法就是重载方法。</p><p><strong>调用重载方法</strong></p><p>调用方法的时候，会通过参数的不同来区分调用的是哪个方法。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vft3y0lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-vft3y0lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <br>    <span class="hljs-type">int</span> id;<br>    String name;<br>    <br>    <span class="hljs-comment">//构造方法重载</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;&#125;<br>    <br>    <span class="hljs-comment">//方法重载</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getInfo</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<span class="hljs-keyword">return</span> id;&#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">(String word)</span> &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-4-方法递归"><a href="#4-4-方法递归" class="headerlink" title="4.4 方法递归"></a>4.4 方法递归</h2><p>待学习。</p><h1 id="5-封装与管理"><a href="#5-封装与管理" class="headerlink" title="5. 封装与管理"></a>5. 封装与管理</h1><h2 id="5-1-权限修饰符"><a href="#5-1-权限修饰符" class="headerlink" title="5.1 权限修饰符"></a>5.1 权限修饰符</h2><p>权限修饰符用于控制一个成员能够被访问的范围，可以修饰成员变量、方法、构造器、内部类：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>修饰符</th>            <th style="text-align: center;" width=20%>同一个类中</th>            <th style="text-align: center;" width=20%>同一个包其他类</th>            <th style="text-align: center;" width=20%>不同包下的子类</th>            <th style="text-align: center;" width=20%>不同包下的无关类</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">private</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">&emsp;</td>             <td style="text-align: center;">&emsp;</td>             <td style="text-align: center;">&emsp;</td>         </tr>        <tr>            <td style="text-align: center;">缺省</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">&emsp;</td>             <td style="text-align: center;">&emsp;</td>         </tr>        <tr>            <td style="text-align: center;">protected</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">&emsp;</td>         </tr>        <tr>            <td style="text-align: center;">public</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>             <td style="text-align: center;">√</td>         </tr>    </body></table><h2 id="5-2-封装思想"><a href="#5-2-封装思想" class="headerlink" title="5.2 封装思想"></a>5.2 封装思想</h2><p>封装对应的数据，并提供数据对应的行为。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-zazvfvlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-zazvfvlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <br>    <span class="hljs-comment">//封装数据</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-comment">//提供数据对应的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String inputName)</span> &#123;<br>        name = inputName;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="5-3-包的使用"><a href="#5-3-包的使用" class="headerlink" title="5.3 包的使用"></a>5.3 包的使用</h2><p><strong>创建包</strong></p><p>包是用来分门别类的管理各种不同类的，类似于文件夹。</p><p>建包语句必须放在第一行，包名格式建议：<font class="word-stress">公司域名倒写.技术名称</font>，建议全部小写。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ptxv8hlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ptxv8hlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//建包</span><br><span class="hljs-keyword">package</span> com.mycompany.test;<br></code></pre></td></tr></table></div></figure><p><strong>导入包</strong></p><p>相同包下的类可以直接访问，不同包下的类必须导包才可以使用。但使用 <font class="code-word"><code>java.lang</code></font>  包中的类时不需要导包。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fby685lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-fby685lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导包：import 包名.类名;</span><br><span class="hljs-keyword">import</span> com.mycompany.test.Example;<br></code></pre></td></tr></table></div></figure><p><strong>注意</strong></p><p>不同包下的同名类：假如一个类中需要用到不同类，而这个两个类名称是一样的，则默认只能导入一个类，另一个类要带包名访问。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-9ydodjlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-9ydodjlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mycompany.test1.Student;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-comment">//包com.mycompany.test1中的Student类</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <br>        <span class="hljs-comment">//包com.mycompany.test2中的Student类</span><br>        com.mycompany.test2.Student = <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mycompany.test2.Student();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><h1 id="6-对象销毁"><a href="#6-对象销毁" class="headerlink" title="6. 对象销毁"></a>6. 对象销毁</h1><p>Java 中对象的销毁不再是手动管理，而是由 Java 虚拟机进行管理和销毁的。</p>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础语法 (一) - Java SE</title>
    <link href="/post/28534/"/>
    <url>/post/28534/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h1><h2 id="1-1-二进制存储"><a href="#1-1-二进制存储" class="headerlink" title="1.1 二进制存储"></a>1.1 二进制存储</h2><p><strong>计算机的数据单位</strong></p><p>计算机在底层都是采用<font class="word-stress">二进制</font>，使用0和1来存储，其数据单元如下：</p><ul><li>位：字节中的每个二进制位就称为位 <font class="code-word"><code>bit</code></font>，简称 b。二进制使用最高位表示符号位，用1表示负数，用0表示正数。</li><li>字节：计算机中数据最小的组成单元成为字节 <font class="code-word"><code>byte</code></font>，简称 B。其由8个二进制位组成。</li></ul><p><strong>进制的转换</strong></p><p>十进制转二进制分为整数和小数两种形式：</p><ul><li><p><strong>整数二进制转换</strong>：除2取余，逆序排列，直到商为0为止。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-38.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /></li><li><p><strong>小数二进制转换</strong>：乘2取整，正序排列，直到小数为0或达到指定精度为止。</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-39.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /></li></ul><p>由二进制数转换成十进制数的基本做法是，把二进制数首先写成加权系数展开式，然后按十进制加法规则求和。</p><blockquote><p>示例：</p><p>以二进制数110.101为例，(110.101)<sub>2</sub>&#x3D;1×2<sup>2</sup>+1×2<sup>1</sup>+0×2<sup>0</sup>+1×2<sup>-1</sup>+0×2<sup>-2</sup>+1×2<sup>-3</sup>&#x3D;(6.625)<sub>10</sub></p></blockquote><h2 id="1-2-基本数据类型"><a href="#1-2-基本数据类型" class="headerlink" title="1.2 基本数据类型"></a>1.2 基本数据类型</h2><p><strong>基本数据类型</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" colspan="2" width=30%>基本数据类型</th>            <th style="text-align: center;" width=20%>存储需求</th>            <th style="text-align: center;" width=20%>默认值</th>            <th style="text-align: center;" width=30%>取值范围</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">整型</td>              <td style="text-align: center;">byte</td>             <td style="text-align: center;">1字节 （8位）</td>             <td style="text-align: center;">0</td>             <td style="text-align: center;">(-2<sup>7</sup>, 2<sup>7</sup>-1)</td>        </tr>           <tr>            <td style="text-align: center;">整型</td>              <td style="text-align: center;">short</td>             <td style="text-align: center;">2字节 （16位）</td>             <td style="text-align: center;">0</td>             <td style="text-align: center;">(-2<sup>15</sup>, 2<sup>15</sup>-1)</td>         </tr>        <tr>            <td style="text-align: center;">整型</td>              <td style="text-align: center;">int</td>             <td style="text-align: center;">4字节 （32位）</td>             <td style="text-align: center;">0</td>             <td style="text-align: center;">(-2<sup>31</sup>, 2<sup>31</sup>-1)</td>         </tr>        <tr>            <td style="text-align: center;">整型</td>              <td style="text-align: center;">long</td>             <td style="text-align: center;">8字节 （64位）</td>             <td style="text-align: center;">0</td>             <td style="text-align: center;">(-2<sup>63</sup>, 2<sup>63</sup>-1)</td>         </tr>        <tr>            <td style="text-align: center;">浮点型</td>              <td style="text-align: center;">float</td>             <td style="text-align: center;">4字节 （32位）</td>             <td style="text-align: center;">0.0f</td>             <td style="text-align: center;">近似认为 (-2<sup>128</sup>, 2^<sup>128</sup>) （IEEE 754）</td>         </tr>        <tr>            <td style="text-align: center;">浮点型</td>              <td style="text-align: center;">double</td>             <td style="text-align: center;">8字节 （64位）</td>             <td style="text-align: center;">0.0d</td>             <td style="text-align: center;">近似认为 (-2<sup>1024</sup>, 2^<sup>1024</sup>) （IEEE 754）</td>         </tr>        <tr>            <td style="text-align: center;">字符型</td>              <td style="text-align: center;">char</td>             <td style="text-align: center;">2字节 （16位）</td>             <td style="text-align: center;">\u0000 (即0)</td>             <td style="text-align: center;">(0, 2^<sup>16</sup>)</td>         </tr>        <tr>            <td style="text-align: center;">布尔型</td>              <td style="text-align: center;">boolean</td>             <td style="text-align: center;">1字节 （8位）</td>             <td style="text-align: center;">false</td>             <td style="text-align: center;">0, 1</td>         </tr>    </body></table><p><strong>整型数据存储</strong></p><p>整型数据存储由<font class="word-stress">符号位，数据位</font>构成。以 <font class="code-word"><code>byte</code></font> 类型为例，其存储的最大正数为127，而最小负数为-128，这是因为+0用来存储0，而-0用来存储了-128，其他整型类型也是如此。</p><p><strong>浮点型数据存储</strong></p><p>浮点型数据存储由<font class="word-stress">符号位(S)，指数位(E)，有效数字位(M)</font>构成，即<font class="word-stress">(-1)<sup>S</sup> × M × 2<sup>E</sup></font>。</p><p><font class="code-word"><code>float</code></font> 类型符号位1位，指数位8位，有效数字位23位。<font class="code-word"><code>double</code></font> 类型符号位1位，指数位11位，有效数字位52位。</p><p>java 中浮点数符合 IEEE 754 标准：</p><ul><li>符号位(S)：正数为0，负数为1。</li><li>指数位(E)：指数实际取值范围为 (-126, 127) 或 (-1022, 1023)。<ul><li>规范化数：指数E不为全0或全1，默认小数点前为1。E的十进制值减127（或1023），即得真实指数值。</li><li>非规范化数：指数E全为0，默认小数点前为0。E等于1-127（或1-1023）。</li><li>特殊数值：指数E全为1。表示特殊值。</li></ul></li><li>有效数字位(M)：M只存储小数点后的数字。</li></ul><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=20%>描述</th>            <th style="text-align: center;" width=15%>指数位</th>            <th style="text-align: center;" width=15%>小数位</th>            <th style="text-align: center;" width=25%>单精度</th>            <th style="text-align: center;" width=25%>双精度</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">0</td>              <td style="text-align: center;">00...00</td>             <td style="text-align: center;">0...00</td>             <td style="text-align: center;">0</td>             <td style="text-align: center;">0</td>        </tr>           <tr>            <td style="text-align: center;">1</td>              <td style="text-align: center;">01...11</td>             <td style="text-align: center;">0...00</td>             <td style="text-align: center;">1×2<sup>0</sup></td>             <td style="text-align: center;">1×2<sup>0</sup></td>        </tr>          <tr>            <td style="text-align: center;">∞</td>              <td style="text-align: center;">11...11</td>             <td style="text-align: center;">0...00</td>             <td style="text-align: center;">∞</td>             <td style="text-align: center;">∞</td>        </tr>          <tr>            <td style="text-align: center;">最小非格式化数</td>              <td style="text-align: center;">00...00</td>             <td style="text-align: center;">0...01</td>             <td style="text-align: center;">2<sup>-23</sup>×2<sup>-126</sup>≈1.4E-45</td>             <td style="text-align: center;">2<sup>-52</sup>×2<sup>-1022</sup></td>        </tr>           <tr>            <td style="text-align: center;">最大非格式化数</td>              <td style="text-align: center;">00...00</td>             <td style="text-align: center;">1...11</td>             <td style="text-align: center;">(1-2<sup>-23</sup>)×2<sup>-126</sup>≈1.18E-38</td>             <td style="text-align: center;">(1-2<sup>-52</sup>)×2<sup>-1022</sup></td>        </tr>           <tr>            <td style="text-align: center;">最小格式化数</td>              <td style="text-align: center;">00...01</td>             <td style="text-align: center;">0...00</td>             <td style="text-align: center;">1×2<sup>-126</sup>≈1.18E-38</td>             <td style="text-align: center;">1×2<sup>-1022</sup></td>        </tr>           <tr>            <td style="text-align: center;">最大格式化数</td>              <td style="text-align: center;">11...10</td>             <td style="text-align: center;">1...11</td>             <td style="text-align: center;">(2-2<sup>-23</sup>)×2<sup>127</sup>≈3.4E+38</td>             <td style="text-align: center;">(2-2<sup>-52</sup>)×2<sup>1023</sup></td>        </tr>       </body></table><blockquote><p>示例：</p><p>以浮点数6.625f的存储为例，其二进制表示为110.101，将其规范化表示为1.10101×2^2。</p><p>有效数字位：因为规范化表示后小数点前必须为1，所以有效数字位只存储小数点后的数字，即10101000000000000000000。</p><p>指数位：指数为2，加上127之后为129，即10000001。</p><p>符号位：正数为0。</p><p>最终存储结果：0 10000001 10101000000000000000000</p></blockquote><p>浮点型在转换为二进制时，存在无法精确转换的问题（乘2取整但一直无法使小数为0），那么在执行浮点数操作时（算数运算、比较运算等），要考虑<font class="word-stress">精度丢失</font>可能带来的问题。可以通过 <a href="/post/45824/#8-BigDecimal-%E7%B1%BB">BigDecimal 类</a>解决。</p><h2 id="1-3-引用数据类型"><a href="#1-3-引用数据类型" class="headerlink" title="1.3 引用数据类型"></a>1.3 引用数据类型</h2><p>引用数据类型包括<font class="word-stress">数组、类 、接口</font>三大类，其默认值均为 <font class="code-word"><code>null</code></font> 。</p><p>每个基本数据类型均有其对应的引用类型，也被称为<a href="/post/37723/#2-%E5%8C%85%E8%A3%85%E7%B1%BB">包装类</a>。</p><h2 id="1-4-类型转换"><a href="#1-4-类型转换" class="headerlink" title="1.4 类型转换"></a>1.4 类型转换</h2><p><strong>自动类型转换</strong></p><p>变量和表达式均可进行自动类型转换：</p><ul><li><p><strong>变量自动类型转换</strong>：</p><p>类型范围小的变量，可以直接赋值给类型范围大的变量，反之则不能自动转换。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-mvr92mlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-mvr92mlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-comment">//自动类型转换</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;<br></code></pre></td></tr></table></div></figure><p>其类型自动转换的底层原理如下图：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-23.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 60%;" /><p>其他形式的还有 <font class="word-stress">byte → short → int → long → float → double</font> 和 <font class="word-stress">char → int</font>。</p></li><li><p><strong>表达式自动类型转换</strong>：</p><p>在表达式中，小范围类型的变量会自动转换成当前较大范围的类型再运算。</p><p>表达式的最终结果类型由表达式中的最高类型决定。</p><p>在表达式中，byte、short、char 是直接转换成 int 类型参与运算的。</p></li></ul><p><strong>强制类型转换</strong></p><p>可以强制将类型范围大的变量、数据赋值给类型范围小的变量。只需要<font class="word-stress">在转换的变量前加上括号</font>，括号内为想要转换的类型。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2502umlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-2502umlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-comment">//强制类型转换</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>  (<span class="hljs-type">byte</span>)a; <br></code></pre></td></tr></table></div></figure><p>强制类型转换底层原理如下图所示：</p><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-24.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom: 80%;" /><p>强制类型转换可能造成<font class="word-stress">数据(丢失)溢出</font>。浮点型强转成整型，直接丢掉小数部分，保留整数部分返回。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-144t74lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-144t74lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1500</span>;<br><span class="hljs-comment">//强制类型转换造成数据丢失，j = 36</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span>  (<span class="hljs-type">byte</span>)i;<br></code></pre></td></tr></table></div></figure><img src="https://mmimages.oss-cn-chengdu.aliyuncs.com/img/01-25.png" srcset="/img/loading.gif" lazyload class="img-center" style="zoom:80%;" /><p><strong>多态中的类型转换</strong></p><p>自动类型转换和强制类型转换还存在于<a href="/post/1017/#4-3-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">多态</a>中。</p><h1 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h1><h2 id="2-1-算数运算符"><a href="#2-1-算数运算符" class="headerlink" title="2.1 算数运算符"></a>2.1 算数运算符</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">+</td>             <td style="text-align: center;">加</td>         </tr>        <tr>            <td style="text-align: center;">-</td>             <td style="text-align: center;">减</td>         </tr>        <tr>            <td style="text-align: center;">*</td>             <td style="text-align: center;">乘</td>         </tr>        <tr>            <td style="text-align: center;">/</td>             <td style="text-align: center;">除</td>         </tr>        <tr>            <td style="text-align: center;">%</td>             <td style="text-align: center;">取余</td>         </tr>    </body></table><p>运算符的注意事项如下：</p><ul><li><p>如果是整型数据进行除法运算，其结果必然是整型数据，<font class="word-stress">小数部分会自动抹掉</font>（是抹掉不是四舍五入）。</p></li><li><p>多个字符串允许用 <font class="code-word"><code>+</code></font> 号拼接，在遇到字符前的 + 负责相加数字，对于其后紧跟字符、以及这之后的 + 均表示拼接字符。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-5ldgshlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-5ldgshlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-number">3</span>);   <span class="hljs-comment">//输出：3 4，第一个加号是数字相加，后两个都是拼接字符</span><br></code></pre></td></tr></table></div></figure></li><li><p>整数数字直接用运算符计算时，默认是 <font class="code-word"><code>int</code></font> 类型，如果运算过程中出现结果过大超过 int 存储范围，则会导致结果失真，要注意手动将数字定为 <font class="code-word"><code>long</code></font> 类型。</p></li></ul><h2 id="2-2-自增自减运算符"><a href="#2-2-自增自减运算符" class="headerlink" title="2.2 自增自减运算符"></a>2.2 自增自减运算符</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">++</td>             <td style="text-align: center;">自+1</td>         </tr>        <tr>            <td style="text-align: center;">--</td>             <td style="text-align: center;">自-1</td>         </tr>    </body></table><p>自增自减运算符放于变量前后的区别如下：</p><ul><li><strong>放在变量的前面</strong>：先对变量进行+1、-1，再拿变量的值进行运算。 </li><li><strong>放在变量的后面</strong>：先拿变量的值进行运算，再对变量的值进行+1、-1 。</li></ul><h2 id="2-3-赋值运算符"><a href="#2-3-赋值运算符" class="headerlink" title="2.3 赋值运算符"></a>2.3 赋值运算符</h2><p><strong>赋值运算符</strong></p><p>赋值运算符包括：<font class="code-word"><code>=</code></font></p><p>赋值运算符把右边的值赋给左边，且赋值运算符还自带了<font class="word-stress">强制类型转换</font>。</p><p><strong>二元运算符</strong></p><p>二元运算符包括：<font class="code-word"><code>+=</code></font>、<font class="code-word"><code>-=</code></font>、<font class="code-word"><code>*=</code></font>、<font class="code-word"><code>/=</code></font>、<font class="code-word"><code>%=</code></font></p><p>二元运算符将计算和赋值合并书写，a +&#x3D; b 等同于 a &#x3D; (a+b)。</p><h2 id="2-4-关系运算符"><a href="#2-4-关系运算符" class="headerlink" title="2.4 关系运算符"></a>2.4 关系运算符</h2><p>关系运算符是对数据进行条件判断的符号，最终会返回一个比较的 <font class="code-word"><code>boolean</code></font> 结果。关系运算符如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">==</td>             <td style="text-align: center;">a == b，判断 a 是否等于 b</td>         </tr>        <tr>            <td style="text-align: center;">!=</td>            <td style="text-align: center;">a != b，判断 a 和 b 是否不相等</td>         </tr>        <tr>            <td style="text-align: center;">&gt;</td>             <td style="text-align: center;">a &gt; b，判断 a 是否大于 b</td>         </tr>        <tr>            <td style="text-align: center;">&lt;</td>             <td style="text-align: center;">a &lt; b，判断 a 是否小于 b</td>         </tr>        <tr>            <td style="text-align: center;">&gt;=</td>             <td style="text-align: center;">a &gt;= b，判断 a 是否大于等于 b</td>         </tr>        <tr>            <td style="text-align: center;">&lt;=</td>             <td style="text-align: center;">a &lt;= b，判断 a 是否小于等于 b</td>         </tr>    </body></table><h2 id="2-5-逻辑运算符"><a href="#2-5-逻辑运算符" class="headerlink" title="2.5 逻辑运算符"></a>2.5 逻辑运算符</h2><p><strong>逻辑运算符</strong></p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">&amp;</td>             <td style="text-align: center;">逻辑与（无论左边结果，右边都会执行）</td>         </tr>        <tr>            <td style="text-align: center;">|</td>             <td style="text-align: center;">逻辑或（无论左边结果，右边都会执行）</td>         </tr>        <tr>            <td style="text-align: center;">!</td>             <td style="text-align: center;">逻辑非</td>         </tr>        <tr>            <td style="text-align: center;">^</td>             <td style="text-align: center;">逻辑异或，两个条件不同结果则为true，否则为false</td>         </tr>        <tr>            <td style="text-align: center;">&amp;&amp;</td>             <td style="text-align: center;">短路与（左边为 false 则不执行右边）</td>         </tr>        <tr>            <td style="text-align: center;">||</td>             <td style="text-align: center;">短路或（左边为 true 则不执行右边）</td>         </tr>    </body></table><p><strong>按位运算符</strong></p><p>如果进行比较的双方是数字的话，那么用如下比较符进行比较就会变成按位运算。</p><p>按位运算即<font class="word-stress">针对里面每一位均进行比较</font>，每位的结果均为0或1，最终结果再由二进制转换为十进制。</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">&amp;</td>             <td style="text-align: center;">按位与</td>         </tr>        <tr>            <td style="text-align: center;">|</td>             <td style="text-align: center;">按位或</td>         </tr>        <tr>            <td style="text-align: center;">~</td>             <td style="text-align: center;">按位非</td>         </tr>        <tr>            <td style="text-align: center;">^</td>             <td style="text-align: center;">按位异或</td>         </tr>    </body></table><h2 id="2-6-移位运算符"><a href="#2-6-移位运算符" class="headerlink" title="2.6 移位运算符"></a>2.6 移位运算符</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=50%>说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">&lt;&lt;</td>             <td style="text-align: center;">左移（丢弃左边指定位数，右边补0）</td>         </tr>        <tr>            <td style="text-align: center;">&gt;&gt;</td>             <td style="text-align: center;">右移（丢弃右边指定位数，左边补最高位的值）</td>         </tr>        <tr>            <td style="text-align: center;">&gt;&gt;&gt;</td>             <td style="text-align: center;">无符号右移（丢弃右边指定位数，左边补0）</td>         </tr>    </body></table><h2 id="2-7-三元运算符"><a href="#2-7-三元运算符" class="headerlink" title="2.7 三元运算符"></a>2.7 三元运算符</h2><p>三元运算符语法为：<font class="code-sentence"><code>条件表达式? 表达式1: 表达式2</code> </font></p><p>首先计算关系表达式的返回值，如果值为 <font class="code-word"><code>true</code></font> 则调用表达式1，如果为 <font class="code-word"><code>false</code></font> 则调用表达式2。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-r9wzvdlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-r9wzvdlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a &gt; b ? a : b;<br>System.out.println(c);      <span class="hljs-comment">//输出：20</span><br></code></pre></td></tr></table></div></figure><h2 id="2-8-运算符优先级"><a href="#2-8-运算符优先级" class="headerlink" title="2.8 运算符优先级"></a>2.8 运算符优先级</h2><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=25%>优先级</th>            <th style="text-align: center;" width=50%>运算符</th>            <th style="text-align: center;" width=25%>结合性</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">1</td>             <td style="text-align: center;">[] . ()(方法调用)</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">2</td>             <td style="text-align: center;">! ~ ++ -- +(一元运算) -(一元运算) ()(类型强转) new</td>             <td style="text-align: center;">←</td>         </tr>        <tr>            <td style="text-align: center;">3</td>             <td style="text-align: center;">* / %</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">4</td>             <td style="text-align: center;">+ -</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">5</td>             <td style="text-align: center;">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">6</td>             <td style="text-align: center;">&lt; &lt;= &gt; &gt;= instanceof</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">7</td>             <td style="text-align: center;">== !=</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">8</td>             <td style="text-align: center;">&amp;</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">9</td>             <td style="text-align: center;">^</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">10</td>             <td style="text-align: center;">|</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">11</td>             <td style="text-align: center;">&amp;&amp;</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">12</td>             <td style="text-align: center;">||</td>             <td style="text-align: center;">→</td>         </tr>        <tr>            <td style="text-align: center;">13</td>             <td style="text-align: center;">?:</td>             <td style="text-align: center;">←</td>         </tr>        <tr>            <td style="text-align: center;">14</td>             <td style="text-align: center;">= += -= *= /= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td>             <td style="text-align: center;">←</td>         </tr>    </body></table><h1 id="3-输入与输出"><a href="#3-输入与输出" class="headerlink" title="3. 输入与输出"></a>3. 输入与输出</h1><h2 id="3-1-控制台输入"><a href="#3-1-控制台输入" class="headerlink" title="3.1 控制台输入"></a>3.1 控制台输入</h2><p>输入使用 <font class="code-word"><code>Scanner</code></font> 类。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-vd6x7tlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-vd6x7tlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造标准输入流对象</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><span class="hljs-comment">//调用方法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> in.nextInt();<br></code></pre></td></tr></table></div></figure><p>标准输入流  Scanner 类常用的方法如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=50%>方法名称</th>            <th style="text-align: center;" width=50%>方法说明</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">String nextLine()</td>             <td style="text-align: center;">读取输入的下一行内容</td>         </tr>        <tr>            <td style="text-align: center;">String next()</td>             <td style="text-align: center;">读取输入的下一个单词（以空格作为分隔符）</td>         </tr>        <tr>            <td style="text-align: center;">int nextInt()</td>             <td style="text-align: center;">读取并转换下一个表示整数的字符序列</td>         </tr>        <tr>            <td style="text-align: center;">int nextDouble()</td>             <td style="text-align: center;">读取并转换下一个表示整数或浮点数的字符序列</td>         </tr>    </body></table><p><font class="code-sentence"><code>System.in</code></font> 实际返回的是一个 <font class="code-word"><code>InputStream</code></font> 指向控制台的<a href="/post/5808/#4-1-1-%E5%AD%97%E8%8A%82%E8%BE%93%E5%85%A5%E6%B5%81">字节输入流</a>。</p><h2 id="3-2-控制台输出"><a href="#3-2-控制台输出" class="headerlink" title="3.2 控制台输出"></a>3.2 控制台输出</h2><p><strong>输出语法</strong></p><p><font class="code-sentence"><code>System.out.println()</code></font> ：输出括号中的内容并换行。</p><p><font class="code-sentence"><code>System.out.print()</code></font> ：输出括号中的内容且不换行。</p><p><font class="code-sentence"><code>System.out.printf()</code></font> ：输出括号中的内容且不换行，允许使用格式字符如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=30%>格式字符</th>            <th style="text-align: center;" width=70%>功能</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">%n</td>             <td style="text-align: center;">换行，相当于 \n</td>         </tr>        <tr>            <td style="text-align: center;">%c</td>             <td style="text-align: center;">单个字符</td>         </tr>        <tr>            <td style="text-align: center;">%d</td>             <td style="text-align: center;">十进制整数</td>         </tr>        <tr>            <td style="text-align: center;">%u</td>             <td style="text-align: center;">无符号十进制数</td>         </tr>        <tr>            <td style="text-align: center;">%f</td>             <td style="text-align: center;">十进制浮点数，可以指定位数如 %3.2f ，两个数字分别为小数点前后显示的位数</td>         </tr>        <tr>            <td style="text-align: center;">%o</td>             <td style="text-align: center;">八进制数</td>         </tr>        <tr>            <td style="text-align: center;">%x</td>             <td style="text-align: center;">十六进制数</td>         </tr>        <tr>            <td style="text-align: center;">%s</td>             <td style="text-align: center;">字符串</td>         </tr>        <tr>            <td style="text-align: center;">%%</td>             <td style="text-align: center;">输出百分号</td>         </tr>    </body></table><p><strong>转义序列</strong></p><p>Java 中输出特殊符号需要用到转义序列如下：</p><table class="myform">    <head>        <tr>            <th style="text-align: center;" width=30%>转义序列</th>            <th style="text-align: center;" width=70%>名称</th>            <th style="padding:0; margin:0;"></th>        </tr>    </head>    <body>        <tr>            <td style="text-align: center;">\b</td>             <td style="text-align: center;">退格</td>         </tr>        <tr>            <td style="text-align: center;">\t</td>             <td style="text-align: center;">制表</td>         </tr>        <tr>            <td style="text-align: center;">\n</td>             <td style="text-align: center;">换行</td>         </tr>        <tr>            <td style="text-align: center;">\r</td>             <td style="text-align: center;">回车</td>         </tr>        <tr>            <td style="text-align: center;">\"</td>             <td style="text-align: center;">双引号</td>         </tr>        <tr>            <td style="text-align: center;">\'</td>             <td style="text-align: center;">单引号</td>         </tr>        <tr>            <td style="text-align: center;">\\</td>             <td style="text-align: center;">反斜杠</td>         </tr>    </body></table><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-2wgowllckj50kh"></i><span>java</span><div class="collapse show" id="collapse-2wgowllckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.printf(<span class="hljs-string">&quot;第一个%d第二个%%3.2f&quot;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">88.2</span>);   <span class="hljs-comment">//输出：第一个34第二个%3.2f</span><br>System.out.println(<span class="hljs-string">&quot;第一个\t第二个&quot;</span>);                  <span class="hljs-comment">//输出：第一个第二个</span><br></code></pre></td></tr></table></div></figure><p><font class="code-sentence"><code>System.out</code></font> 实际返回的是一个 <font class="code-word"><code>PrintStream</code></font> 默认指向控制台的<a href="/post/54804/#4-2-%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91">打印流</a>。</p><h1 id="4-Java-控制流程"><a href="#4-Java-控制流程" class="headerlink" title="4. Java 控制流程"></a>4. Java 控制流程</h1><h2 id="4-1-条件语句"><a href="#4-1-条件语句" class="headerlink" title="4.1 条件语句"></a>4.1 条件语句</h2><h3 id="4-1-1-if-else-语句"><a href="#4-1-1-if-else-语句" class="headerlink" title="4.1.1 if else 语句"></a>4.1.1 if else 语句</h3><p><strong>if 语句</strong></p><p><font class="code-word"><code>if</code></font> 语句可以单独使用，当 if 后条件语句为真则执行大括号里的内容。若大括号内只有一条语句，则大括号可以不写。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-pzsq67lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-pzsq67lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;                         <br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">9</span>) &#123;                        <br>    System.out.println(<span class="hljs-string">&quot;大于9&quot;</span>);      <br>&#125;                                   <br></code></pre></td></tr></table></div></figure><p><strong>if..else 语句</strong></p><p><font class="code-word"><code>if</code></font> 语句也可以和 <font class="code-word"><code>else</code></font> 语句连用，if 语句执行了就不会再执行 else 语句了。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ciun7plckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ciun7plckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;                           <br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">9</span>) &#123;                          <br>    System.out.println(<span class="hljs-string">&quot;大于9&quot;</span>);        <br>&#125; <span class="hljs-keyword">else</span> &#123;                              <br>    System.out.println(<span class="hljs-string">&quot;小于9&quot;</span>);        <br>&#125;                                     <br></code></pre></td></tr></table></div></figure><p><strong>if…elseif 语句</strong></p><p>存在多个选择分支时，可以用用 <font class="code-sentence"><code>if...elseif</code></font> 语句，按顺序从上往下匹配，其中任意一句执行后都不会再执行其他的分支。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ldp0dolckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ldp0dolckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;                          <br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">9</span>) &#123;                         <br>    System.out.println(<span class="hljs-string">&quot;大于9&quot;</span>);       <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">9</span> &amp;&amp; a &gt; <span class="hljs-number">5</span>) &#123;         <br>    System.out.println(<span class="hljs-string">&quot;小于9大于5&quot;</span>);    <br>&#125; <span class="hljs-keyword">else</span> &#123;                             <br>    System.out.println(<span class="hljs-string">&quot;小于5&quot;</span>);       <br>&#125;                                    <br></code></pre></td></tr></table></div></figure><h3 id="4-1-2-switch-语句"><a href="#4-1-2-switch-语句" class="headerlink" title="4.1.2 switch 语句"></a>4.1.2 switch 语句</h3><p><font class="code-word"><code>switch</code></font> 语句根据执行条件去匹配不同分支，<font class="code-word"><code>switch</code></font> 语句书写的注意事项如下：</p><ul><li>若不在分支后写 <font class="code-word"><code>break</code></font>，则执行完该分支后会直接执行下一个 case 中的代码块（不论是否匹配上），直到遇到 <font class="code-word"><code>break</code></font>。</li><li>switch 后跟的表达式类型只能是 byte、short、int、char、枚举 ( JDK5后)、String ( JDK7后)，不支持 double、float、long。</li><li><font class="code-word"><code>case</code></font> 给出的值不允许重复，且只能是字面量，不能是变量。</li></ul><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-1qq7uolckj50kh"></i><span>java</span><div class="collapse show" id="collapse-1qq7uolckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <br><span class="hljs-keyword">switch</span> (a) &#123;                                             <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:                                             <br>        System.out.println(<span class="hljs-string">&quot;a = 10&quot;</span>);                    <br>        <span class="hljs-keyword">break</span>;                                           <br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:                                              <br>        System.out.println(<span class="hljs-string">&quot;a = 9&quot;</span>);                     <br>        <span class="hljs-keyword">break</span>;                                           <br>    <span class="hljs-keyword">default</span>:                                             <br>        System.out.println(<span class="hljs-string">&quot;a 为其他数字&quot;</span>);                   <br>        <span class="hljs-keyword">break</span>;                                           <br>&#125;                                                        <br></code></pre></td></tr></table></div></figure><h2 id="4-2-循环语句"><a href="#4-2-循环语句" class="headerlink" title="4.2 循环语句"></a>4.2 循环语句</h2><h3 id="4-2-1-while-循环"><a href="#4-2-1-while-循环" class="headerlink" title="4.2.1 while 循环"></a>4.2.1 while 循环</h3><p><strong>while 循环</strong></p><p><font class="code-word"><code>while</code></font> 语句会在括号中表达式为真时一直反复执行大括号内的语句。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-n3l26tlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-n3l26tlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;            <br><span class="hljs-keyword">while</span> (a &gt; <span class="hljs-number">8</span>) &#123;       <br>    a--;               <br>&#125;                     <br></code></pre></td></tr></table></div></figure><p>可以通过 <font class="code-sentence"><code>while (true)</code></font> 这种写法来一直执行循环。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-xpty5clckj50kh"></i><span>java</span><div class="collapse show" id="collapse-xpty5clckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;                 <br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;             <br>    <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">8</span>) &#123;           <br>        <span class="hljs-keyword">break</span>;             <br>    &#125;                      <br>    a--;                    <br>&#125;                          <br></code></pre></td></tr></table></div></figure><p><strong>do while 循环</strong></p><p><font class="code-word"><code>do while</code></font> 循环与 <font class="code-word"><code>while</code></font> 循环的区别在于，do while 是先执行再判断，大括号内的语句至少会执行一次。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-wqgpx7lckj50kh"></i><span>java</span><div class="collapse show" id="collapse-wqgpx7lckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;                         <br><span class="hljs-keyword">do</span> &#123;                                <br>     System.out.println(<span class="hljs-string">&quot;执行一次&quot;</span>);    <br> &#125; <span class="hljs-keyword">while</span> (a == <span class="hljs-number">1</span>);                  <br></code></pre></td></tr></table></div></figure><h3 id="4-2-2-for-循环"><a href="#4-2-2-for-循环" class="headerlink" title="4.2.2 for 循环"></a>4.2.2 for 循环</h3><p><strong>for 循环</strong></p><p><font class="code-word"><code>for</code></font> 循环的语法为：<font class="code-sentence"><code>for (初始化; 布尔表达式; 步进) &#123;&#125;</code></font> ，每次判断表达式为真后就会指定代码块，然后执行一次步进的语句。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-ictvghlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-ictvghlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;            <br>    System.out.println(i);               <br>&#125;                                        <br></code></pre></td></tr></table></div></figure><p><strong>for each 循环</strong></p><p><font class="code-word"><code>for each</code></font> 循环的语法为：<font class="code-sentence"><code>for (变量 : 集合) &#123;&#125;</code></font> ，变量用于挨个接受元素，可以用来依次遍历数组或者集合这种结构。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-itpe7ilckj50kh"></i><span>java</span><div class="collapse show" id="collapse-itpe7ilckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ele : a) &#123;<br>    System.out.println(a);<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h2><h3 id="4-3-1-break-语句"><a href="#4-3-1-break-语句" class="headerlink" title="4.3.1 break 语句"></a>4.3.1 break 语句</h3><p><font class="code-word"><code>break</code></font> 用于跳出并结束当前所在循环。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-nawi6blckj50kh"></i><span>java</span><div class="collapse show" id="collapse-nawi6blckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;                     <br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">3</span>) &#123;                                  <br>        <span class="hljs-keyword">break</span>;                                    <br>    &#125;                                             <br>&#125;                                                 <br></code></pre></td></tr></table></div></figure><h3 id="4-3-2-continue-语句"><a href="#4-3-2-continue-语句" class="headerlink" title="4.3.2 continue 语句"></a>4.3.2 continue 语句</h3><p><font class="code-word"><code>continue</code></font> 用于当次循环的执行，并开始下一次循环。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-3rxtjvlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-3rxtjvlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;                <br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;                            <br>        <span class="hljs-keyword">continue</span>;                            <br>    &#125;                                        <br>&#125;                                            <br></code></pre></td></tr></table></div></figure><h3 id="4-3-3-return-语句"><a href="#4-3-3-return-语句" class="headerlink" title="4.3.3 return 语句"></a>4.3.3 return 语句</h3><p><font class="code-word"><code>return</code></font> 语句可以从一个方法返回，并把控制权交给调用它的语句。</p><figure class="highlight java"><i class="fa fa-angle-down" type="button" data-toggle="collapse" data-target="#collapse-fw6sjnlckj50kh"></i><span>java</span><div class="collapse show" id="collapse-fw6sjnlckj50kh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>02 Java SE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java SE</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
